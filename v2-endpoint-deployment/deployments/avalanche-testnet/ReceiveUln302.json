{
  "address": "0xEcDfD631Bdd95C350f1e5d0809DE316014c31E2b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LZ_MessageLib_OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_AtLeastOneDVN",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "configType",
          "type": "uint32"
        }
      ],
      "name": "LZ_ULN_InvalidConfigType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidConfirmations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidEid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidOptionalDVNCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidOptionalDVNThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidPacketHeader",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidPacketVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidRequiredDVNCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_Unsorted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "LZ_ULN_UnsupportedEid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_Verifying",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "confirmations",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "requiredDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNThreshold",
                  "type": "uint8"
                },
                {
                  "internalType": "address[]",
                  "name": "requiredDVNs",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "optionalDVNs",
                  "type": "address[]"
                }
              ],
              "internalType": "struct UlnConfig",
              "name": "config",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct SetDefaultUlnConfigParam[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "DefaultUlnConfigsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dvn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        }
      ],
      "name": "PayloadVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "indexed": false,
          "internalType": "struct UlnConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "UlnConfigSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_localEid",
          "type": "uint32"
        }
      ],
      "name": "assertHeader",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "commitVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        }
      ],
      "name": "getAppUlnConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        }
      ],
      "name": "getUlnConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfig",
          "name": "rtnConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "dvn",
          "type": "address"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "submitted",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "confirmations",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "isSupportedEid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageLibType",
      "outputs": [
        {
          "internalType": "enum MessageLibType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "configType",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "config",
              "type": "bytes"
            }
          ],
          "internalType": "struct SetConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "confirmations",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "requiredDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNThreshold",
                  "type": "uint8"
                },
                {
                  "internalType": "address[]",
                  "name": "requiredDVNs",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "optionalDVNs",
                  "type": "address[]"
                }
              ],
              "internalType": "struct UlnConfig",
              "name": "config",
              "type": "tuple"
            }
          ],
          "internalType": "struct SetDefaultUlnConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDefaultUlnConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfig",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verifiable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endpointVersion",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc35719088c263ecbde17fd6bda66678bb697a2d5c353e0ffde812f7f3ad33ee",
  "receipt": {
    "to": null,
    "from": "0x462c2AE39B6B0bdB950Deb2BC82082308cF8cB10",
    "contractAddress": "0xEcDfD631Bdd95C350f1e5d0809DE316014c31E2b",
    "transactionIndex": 2,
    "gasUsed": "2014793",
    "logsBloom": "0x
    "blockHash": "0xdf67ddd5e8356e23e576e73322208b99df1ecaa420c4d970a6fad5d2dbf3a06f",
    "transactionHash": "0xcc35719088c263ecbde17fd6bda66678bb697a2d5c353e0ffde812f7f3ad33ee",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 35722227,
        "transactionHash": "0xcc35719088c263ecbde17fd6bda66678bb697a2d5c353e0ffde812f7f3ad33ee",
        "address": "0xEcDfD631Bdd95C350f1e5d0809DE316014c31E2b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000462c2ae39b6b0bdb950deb2bc82082308cf8cb10"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xdf67ddd5e8356e23e576e73322208b99df1ecaa420c4d970a6fad5d2dbf3a06f"
      }
    ],
    "blockNumber": 35722227,
    "cumulativeGasUsed": "2205183",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1260AdfaFCad76834BaEB4693724067A0C19cA62"
  ],
  "numDeployments": 1,
  "solcInputHash": "df45c5d73ee7212b45689d2cdbb787f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LZ_MessageLib_OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_AtLeastOneDVN\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"configType\",\"type\":\"uint32\"}],\"name\":\"LZ_ULN_InvalidConfigType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidConfirmations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidEid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidOptionalDVNCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidOptionalDVNThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidPacketHeader\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidPacketVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidRequiredDVNCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_Unsorted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"LZ_ULN_UnsupportedEid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_Verifying\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct SetDefaultUlnConfigParam[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"DefaultUlnConfigsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dvn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"}],\"name\":\"PayloadVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct UlnConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"UlnConfigSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_localEid\",\"type\":\"uint32\"}],\"name\":\"assertHeader\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"commitVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"}],\"name\":\"getAppUlnConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"}],\"name\":\"getUlnConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"rtnConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"dvn\",\"type\":\"address\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"submitted\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isSupportedEid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageLibType\",\"outputs\":[{\"internalType\":\"enum MessageLibType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"struct SetConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct SetDefaultUlnConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDefaultUlnConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verifiable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endpointVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is a gluing contract. It simply parses the requests and forward to the super.impl() accordingly.In this case, it combines the logic of ReceiveUlnBase and ReceiveLibBaseE2\",\"kind\":\"dev\",\"methods\":{\"commitVerification(bytes,bytes32)\":{\"details\":\"dont need to check endpoint verifiable here to save gas, as it will reverts if not verifiable.\"},\"getAppUlnConfig(address,uint32)\":{\"details\":\"Get the uln config without the default config for the given remoteEid.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])\":{\"details\":\"about the DEFAULT ULN config 1) its values are all LITERAL (e.g. 0 is 0). whereas in the oapp ULN config, 0 (default value) points to the default ULN config     this design enables the oapp to point to DEFAULT config without explicitly setting the config 2) its configuration is more restrictive than the oapp ULN config that     a) it must not use NIL value, where NIL is used only by oapps to indicate the LITERAL 0     b) it must have at least one DVN\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verify(bytes,bytes32,uint64)\":{\"details\":\"for dvn to verify the payload\"}},\"stateVariables\":{\"CONFIG_TYPE_ULN\":{\"details\":\"CONFIG_TYPE_ULN=2 here to align with SendUln302/ReceiveUln302/ReceiveUln301\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol\":\"ReceiveUln302\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Packet } from \\\"../../interfaces/ISendLib.sol\\\";\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/MessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\n/// @dev simply a container of endpoint address and local eid\\nabstract contract MessageLibBase {\\n    address internal immutable endpoint;\\n    uint32 internal immutable localEid;\\n\\n    error LZ_MessageLib_OnlyEndpoint();\\n\\n    modifier onlyEndpoint() {\\n        if (endpoint != msg.sender) revert LZ_MessageLib_OnlyEndpoint();\\n        _;\\n    }\\n\\n    constructor(address _endpoint, uint32 _localEid) {\\n        endpoint = _endpoint;\\n        localEid = _localEid;\\n    }\\n}\\n\",\"keccak256\":\"0x14899a4398251439938d6ef8a15ea8c6acdddc98a7b0066d7e63676192dea0d1\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/ReceiveLibBaseE2.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport { ILayerZeroEndpointV2, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib, MessageLibType } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport { MessageLibBase } from \\\"./MessageLibBase.sol\\\";\\n\\n/// @dev receive-side message library base contract on endpoint v2.\\n/// it does not have the complication as the one of endpoint v1, such as nonce, executor whitelist, etc.\\nabstract contract ReceiveLibBaseE2 is MessageLibBase, ERC165, IMessageLib {\\n    using PacketV1Codec for bytes;\\n\\n    constructor(address _endpoint) MessageLibBase(_endpoint, ILayerZeroEndpointV2(_endpoint).eid()) {}\\n\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return _interfaceId == type(IMessageLib).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    function messageLibType() external pure virtual override returns (MessageLibType) {\\n        return MessageLibType.Receive;\\n    }\\n}\\n\",\"keccak256\":\"0x2fdbd1b13751a264cd6e7fac518a2685b15c968806c03f1d18b177fc0526e9a9\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/ReceiveUlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport { UlnBase, UlnConfig } from \\\"./UlnBase.sol\\\";\\n\\nstruct Verification {\\n    bool submitted;\\n    uint64 confirmations;\\n}\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\nabstract contract ReceiveUlnBase is UlnBase {\\n    using PacketV1Codec for bytes;\\n\\n    mapping(bytes32 headerHash => mapping(bytes32 payloadHash => mapping(address dvn => Verification)))\\n        public hashLookup;\\n\\n    event PayloadVerified(address dvn, bytes header, uint256 confirmations, bytes32 proofHash);\\n\\n    error LZ_ULN_InvalidPacketHeader();\\n    error LZ_ULN_InvalidPacketVersion();\\n    error LZ_ULN_InvalidEid();\\n    error LZ_ULN_Verifying();\\n\\n    // ============================ External ===================================\\n    function verifiable(\\n        UlnConfig memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) external view returns (bool) {\\n        return _checkVerifiable(_config, _headerHash, _payloadHash);\\n    }\\n\\n    function assertHeader(bytes calldata _packetHeader, uint32 _localEid) external pure {\\n        _assertHeader(_packetHeader, _localEid);\\n    }\\n\\n    // ============================ Internal ===================================\\n    /// @dev per DVN signing function\\n    function _verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) internal {\\n        hashLookup[keccak256(_packetHeader)][_payloadHash][msg.sender] = Verification(true, _confirmations);\\n        emit PayloadVerified(msg.sender, _packetHeader, _confirmations, _payloadHash);\\n    }\\n\\n    function _verified(\\n        address _dvn,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash,\\n        uint64 _requiredConfirmation\\n    ) internal view returns (bool verified) {\\n        Verification memory verification = hashLookup[_headerHash][_payloadHash][_dvn];\\n        // return true if the dvn has signed enough confirmations\\n        verified = verification.submitted && verification.confirmations >= _requiredConfirmation;\\n    }\\n\\n    function _verifyAndReclaimStorage(UlnConfig memory _config, bytes32 _headerHash, bytes32 _payloadHash) internal {\\n        if (!_checkVerifiable(_config, _headerHash, _payloadHash)) {\\n            revert LZ_ULN_Verifying();\\n        }\\n\\n        // iterate the required DVNs\\n        if (_config.requiredDVNCount > 0) {\\n            for (uint8 i = 0; i < _config.requiredDVNCount; ++i) {\\n                delete hashLookup[_headerHash][_payloadHash][_config.requiredDVNs[i]];\\n            }\\n        }\\n\\n        // iterate the optional DVNs\\n        if (_config.optionalDVNCount > 0) {\\n            for (uint8 i = 0; i < _config.optionalDVNCount; ++i) {\\n                delete hashLookup[_headerHash][_payloadHash][_config.optionalDVNs[i]];\\n            }\\n        }\\n    }\\n\\n    function _assertHeader(bytes calldata _packetHeader, uint32 _localEid) internal pure {\\n        // assert packet header is of right size 81\\n        if (_packetHeader.length != 81) revert LZ_ULN_InvalidPacketHeader();\\n        // assert packet header version is the same as ULN\\n        if (_packetHeader.version() != PacketV1Codec.PACKET_VERSION) revert LZ_ULN_InvalidPacketVersion();\\n        // assert the packet is for this endpoint\\n        if (_packetHeader.dstEid() != _localEid) revert LZ_ULN_InvalidEid();\\n    }\\n\\n    /// @dev for verifiable view function\\n    /// @dev checks if this verification is ready to be committed to the endpoint\\n    function _checkVerifiable(\\n        UlnConfig memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) internal view returns (bool) {\\n        // iterate the required DVNs\\n        if (_config.requiredDVNCount > 0) {\\n            for (uint8 i = 0; i < _config.requiredDVNCount; ++i) {\\n                if (!_verified(_config.requiredDVNs[i], _headerHash, _payloadHash, _config.confirmations)) {\\n                    // return if any of the required DVNs haven't signed\\n                    return false;\\n                }\\n            }\\n            if (_config.optionalDVNCount == 0) {\\n                // returns early if all required DVNs have signed and there are no optional DVNs\\n                return true;\\n            }\\n        }\\n\\n        // then it must require optional validations\\n        uint8 threshold = _config.optionalDVNThreshold;\\n        for (uint8 i = 0; i < _config.optionalDVNCount; ++i) {\\n            if (_verified(_config.optionalDVNs[i], _headerHash, _payloadHash, _config.confirmations)) {\\n                // increment the optional count if the optional DVN has signed\\n                threshold--;\\n                if (threshold == 0) {\\n                    // early return if the optional threshold has hit\\n                    return true;\\n                }\\n            }\\n        }\\n\\n        // return false as a catch-all\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x36c93de122bbb74ae31e3eacf567c0a3bc649ed3ebb2766c76dfa93aebcace44\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/UlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// the formal properties are documented in the setter functions\\nstruct UlnConfig {\\n    uint64 confirmations;\\n    // we store the length of required DVNs and optional DVNs instead of using DVN.length directly to save gas\\n    uint8 requiredDVNCount; // 0 indicate DEFAULT, NIL_DVN_COUNT indicate NONE (to override the value of default)\\n    uint8 optionalDVNCount; // 0 indicate DEFAULT, NIL_DVN_COUNT indicate NONE (to override the value of default)\\n    uint8 optionalDVNThreshold; // (0, optionalDVNCount]\\n    address[] requiredDVNs; // no duplicates. sorted an an ascending order. allowed overlap with optionalDVNs\\n    address[] optionalDVNs; // no duplicates. sorted an an ascending order. allowed overlap with requiredDVNs\\n}\\n\\nstruct SetDefaultUlnConfigParam {\\n    uint32 eid;\\n    UlnConfig config;\\n}\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\nabstract contract UlnBase is Ownable {\\n    address private constant DEFAULT_CONFIG = address(0);\\n    // reserved values for\\n    uint8 internal constant DEFAULT = 0;\\n    uint8 internal constant NIL_DVN_COUNT = type(uint8).max;\\n    uint64 internal constant NIL_CONFIRMATIONS = type(uint64).max;\\n    // 127 to prevent total number of DVNs (127 * 2) exceeding uint8.max (255)\\n    // by limiting the total size, it would help constraint the design of DVNOptions\\n    uint8 private constant MAX_COUNT = (type(uint8).max - 1) / 2;\\n\\n    mapping(address oapp => mapping(uint32 eid => UlnConfig)) internal ulnConfigs;\\n\\n    error LZ_ULN_Unsorted();\\n    error LZ_ULN_InvalidRequiredDVNCount();\\n    error LZ_ULN_InvalidOptionalDVNCount();\\n    error LZ_ULN_AtLeastOneDVN();\\n    error LZ_ULN_InvalidOptionalDVNThreshold();\\n    error LZ_ULN_InvalidConfirmations();\\n    error LZ_ULN_UnsupportedEid(uint32 eid);\\n\\n    event DefaultUlnConfigsSet(SetDefaultUlnConfigParam[] params);\\n    event UlnConfigSet(address oapp, uint32 eid, UlnConfig config);\\n\\n    // ============================ OnlyOwner ===================================\\n\\n    /// @dev about the DEFAULT ULN config\\n    /// 1) its values are all LITERAL (e.g. 0 is 0). whereas in the oapp ULN config, 0 (default value) points to the default ULN config\\n    ///     this design enables the oapp to point to DEFAULT config without explicitly setting the config\\n    /// 2) its configuration is more restrictive than the oapp ULN config that\\n    ///     a) it must not use NIL value, where NIL is used only by oapps to indicate the LITERAL 0\\n    ///     b) it must have at least one DVN\\n    function setDefaultUlnConfigs(SetDefaultUlnConfigParam[] calldata _params) external onlyOwner {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            SetDefaultUlnConfigParam calldata param = _params[i];\\n\\n            // 2.a must not use NIL\\n            if (param.config.requiredDVNCount == NIL_DVN_COUNT) revert LZ_ULN_InvalidRequiredDVNCount();\\n            if (param.config.optionalDVNCount == NIL_DVN_COUNT) revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (param.config.confirmations == NIL_CONFIRMATIONS) revert LZ_ULN_InvalidConfirmations();\\n\\n            // 2.b must have at least one dvn\\n            _assertAtLeastOneDVN(param.config);\\n\\n            _setConfig(DEFAULT_CONFIG, param.eid, param.config);\\n        }\\n        emit DefaultUlnConfigsSet(_params);\\n    }\\n\\n    // ============================ View ===================================\\n    // @dev assuming most oapps use default, we get default as memory and custom as storage to save gas\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) public view returns (UlnConfig memory rtnConfig) {\\n        UlnConfig storage defaultConfig = ulnConfigs[DEFAULT_CONFIG][_remoteEid];\\n        UlnConfig storage customConfig = ulnConfigs[_oapp][_remoteEid];\\n\\n        // if confirmations is 0, use default\\n        uint64 confirmations = customConfig.confirmations;\\n        if (confirmations == DEFAULT) {\\n            rtnConfig.confirmations = defaultConfig.confirmations;\\n        } else if (confirmations != NIL_CONFIRMATIONS) {\\n            // if confirmations is uint64.max, no block confirmations required\\n            rtnConfig.confirmations = confirmations;\\n        } // else do nothing, rtnConfig.confirmation is 0\\n\\n        if (customConfig.requiredDVNCount == DEFAULT) {\\n            if (defaultConfig.requiredDVNCount > 0) {\\n                // copy only if count > 0. save gas\\n                rtnConfig.requiredDVNs = defaultConfig.requiredDVNs;\\n                rtnConfig.requiredDVNCount = defaultConfig.requiredDVNCount;\\n            } // else, do nothing\\n        } else {\\n            if (customConfig.requiredDVNCount != NIL_DVN_COUNT) {\\n                rtnConfig.requiredDVNs = customConfig.requiredDVNs;\\n                rtnConfig.requiredDVNCount = customConfig.requiredDVNCount;\\n            } // else, do nothing\\n        }\\n\\n        if (customConfig.optionalDVNCount == DEFAULT) {\\n            if (defaultConfig.optionalDVNCount > 0) {\\n                // copy only if count > 0. save gas\\n                rtnConfig.optionalDVNs = defaultConfig.optionalDVNs;\\n                rtnConfig.optionalDVNCount = defaultConfig.optionalDVNCount;\\n                rtnConfig.optionalDVNThreshold = defaultConfig.optionalDVNThreshold;\\n            }\\n        } else {\\n            if (customConfig.optionalDVNCount != NIL_DVN_COUNT) {\\n                rtnConfig.optionalDVNs = customConfig.optionalDVNs;\\n                rtnConfig.optionalDVNCount = customConfig.optionalDVNCount;\\n                rtnConfig.optionalDVNThreshold = customConfig.optionalDVNThreshold;\\n            }\\n        }\\n\\n        // the final value must have at least one dvn\\n        // it is possible that some default config result into 0 dvns\\n        _assertAtLeastOneDVN(rtnConfig);\\n    }\\n\\n    /// @dev Get the uln config without the default config for the given remoteEid.\\n    function getAppUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfig memory) {\\n        return ulnConfigs[_oapp][_remoteEid];\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _setUlnConfig(uint32 _remoteEid, address _oapp, UlnConfig memory _param) internal {\\n        _setConfig(_oapp, _remoteEid, _param);\\n\\n        // get ULN config again as a catch all to ensure the config is valid\\n        getUlnConfig(_oapp, _remoteEid);\\n        emit UlnConfigSet(_oapp, _remoteEid, _param);\\n    }\\n\\n    /// @dev a supported Eid must have a valid default uln config, which has at least one dvn\\n    function _isSupportedEid(uint32 _remoteEid) internal view returns (bool) {\\n        UlnConfig storage defaultConfig = ulnConfigs[DEFAULT_CONFIG][_remoteEid];\\n        return defaultConfig.requiredDVNCount > 0 || defaultConfig.optionalDVNThreshold > 0;\\n    }\\n\\n    function _assertSupportedEid(uint32 _remoteEid) internal view {\\n        if (!_isSupportedEid(_remoteEid)) revert LZ_ULN_UnsupportedEid(_remoteEid);\\n    }\\n\\n    // ============================ Private ===================================\\n\\n    function _assertAtLeastOneDVN(UlnConfig memory _config) private pure {\\n        if (_config.requiredDVNCount == 0 && _config.optionalDVNThreshold == 0) revert LZ_ULN_AtLeastOneDVN();\\n    }\\n\\n    /// @dev this private function is used in both setDefaultUlnConfigs and setUlnConfig\\n    function _setConfig(address _oapp, uint32 _eid, UlnConfig memory _param) private {\\n        // @dev required dvns\\n        // if dvnCount == NONE, dvns list must be empty\\n        // if dvnCount == DEFAULT, dvn list must be empty\\n        // otherwise, dvnList.length == dvnCount and assert the list is valid\\n        if (_param.requiredDVNCount == NIL_DVN_COUNT || _param.requiredDVNCount == DEFAULT) {\\n            if (_param.requiredDVNs.length != 0) revert LZ_ULN_InvalidRequiredDVNCount();\\n        } else {\\n            if (_param.requiredDVNs.length != _param.requiredDVNCount || _param.requiredDVNCount > MAX_COUNT)\\n                revert LZ_ULN_InvalidRequiredDVNCount();\\n            _assertNoDuplicates(_param.requiredDVNs);\\n        }\\n\\n        // @dev optional dvns\\n        // if optionalDVNCount == NONE, optionalDVNs list must be empty and threshold must be 0\\n        // if optionalDVNCount == DEFAULT, optionalDVNs list must be empty and threshold must be 0\\n        // otherwise, optionalDVNs.length == optionalDVNCount, threshold > 0 && threshold <= optionalDVNCount and assert the list is valid\\n\\n        // example use case: an oapp uses the DEFAULT 'required' but\\n        //     a) use a custom 1/1 dvn (practically a required dvn), or\\n        //     b) use a custom 2/3 dvn\\n        if (_param.optionalDVNCount == NIL_DVN_COUNT || _param.optionalDVNCount == DEFAULT) {\\n            if (_param.optionalDVNs.length != 0) revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (_param.optionalDVNThreshold != 0) revert LZ_ULN_InvalidOptionalDVNThreshold();\\n        } else {\\n            if (_param.optionalDVNs.length != _param.optionalDVNCount || _param.optionalDVNCount > MAX_COUNT)\\n                revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (_param.optionalDVNThreshold == 0 || _param.optionalDVNThreshold > _param.optionalDVNCount)\\n                revert LZ_ULN_InvalidOptionalDVNThreshold();\\n            _assertNoDuplicates(_param.optionalDVNs);\\n        }\\n        // don't assert valid count here, as it needs to be validated along side default config\\n\\n        ulnConfigs[_oapp][_eid] = _param;\\n    }\\n\\n    function _assertNoDuplicates(address[] memory _dvns) private pure {\\n        address lastDVN = address(0);\\n        for (uint256 i = 0; i < _dvns.length; i++) {\\n            address dvn = _dvns[i];\\n            if (dvn <= lastDVN) revert LZ_ULN_Unsorted(); // to ensure no duplicates\\n            lastDVN = dvn;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdb1d04f4996c0a9d35abfbfcf10d978da638885eb77d0a9dc35cea5993074e3\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/interfaces/IReceiveUlnE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @dev should be implemented by the ReceiveUln302 contract and future ReceiveUln contracts on EndpointV2\\ninterface IReceiveUlnE2 {\\n    /// @notice for each dvn to verify the payload\\n    /// @dev this function signature 0x0223536e\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external;\\n\\n    /// @notice verify the payload at endpoint, will check if all DVNs verified\\n    function commitVerification(bytes calldata _packetHeader, bytes32 _payloadHash) external;\\n}\\n\",\"keccak256\":\"0xcdf7e690e5d5c0a3ec26a0d7b1a7fe49c7d16a3634721c3944f77d13ff5d4a91\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\nimport { SetConfigParam } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\\\";\\nimport { ILayerZeroEndpointV2, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\nimport { IReceiveUlnE2 } from \\\"../interfaces/IReceiveUlnE2.sol\\\";\\nimport { ReceiveUlnBase } from \\\"../ReceiveUlnBase.sol\\\";\\nimport { ReceiveLibBaseE2 } from \\\"../../ReceiveLibBaseE2.sol\\\";\\nimport { UlnConfig } from \\\"../UlnBase.sol\\\";\\n\\n/// @dev This is a gluing contract. It simply parses the requests and forward to the super.impl() accordingly.\\n/// @dev In this case, it combines the logic of ReceiveUlnBase and ReceiveLibBaseE2\\ncontract ReceiveUln302 is IReceiveUlnE2, ReceiveUlnBase, ReceiveLibBaseE2 {\\n    using PacketV1Codec for bytes;\\n\\n    /// @dev CONFIG_TYPE_ULN=2 here to align with SendUln302/ReceiveUln302/ReceiveUln301\\n    uint32 internal constant CONFIG_TYPE_ULN = 2;\\n\\n    error LZ_ULN_InvalidConfigType(uint32 configType);\\n\\n    constructor(address _endpoint) ReceiveLibBaseE2(_endpoint) {}\\n\\n    function supportsInterface(bytes4 _interfaceId) public view override returns (bool) {\\n        return _interfaceId == type(IReceiveUlnE2).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    // ============================ OnlyEndpoint ===================================\\n\\n    // only the ULN config on the receive side\\n    function setConfig(address _oapp, SetConfigParam[] calldata _params) external override onlyEndpoint {\\n        for (uint256 i = 0; i < _params.length; i++) {\\n            SetConfigParam calldata param = _params[i];\\n            _assertSupportedEid(param.eid);\\n            if (param.configType == CONFIG_TYPE_ULN) {\\n                _setUlnConfig(param.eid, _oapp, abi.decode(param.config, (UlnConfig)));\\n            } else {\\n                revert LZ_ULN_InvalidConfigType(param.configType);\\n            }\\n        }\\n    }\\n\\n    // ============================ External ===================================\\n\\n    /// @dev dont need to check endpoint verifiable here to save gas, as it will reverts if not verifiable.\\n    function commitVerification(bytes calldata _packetHeader, bytes32 _payloadHash) external {\\n        _assertHeader(_packetHeader, localEid);\\n\\n        // cache these values to save gas\\n        address receiver = _packetHeader.receiverB20();\\n        uint32 srcEid = _packetHeader.srcEid();\\n\\n        UlnConfig memory config = getUlnConfig(receiver, srcEid);\\n        _verifyAndReclaimStorage(config, keccak256(_packetHeader), _payloadHash);\\n\\n        Origin memory origin = Origin(srcEid, _packetHeader.sender(), _packetHeader.nonce());\\n        // endpoint will revert if nonce <= lazyInboundNonce\\n        ILayerZeroEndpointV2(endpoint).verify(origin, receiver, _payloadHash);\\n    }\\n\\n    /// @dev for dvn to verify the payload\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external {\\n        _verify(_packetHeader, _payloadHash, _confirmations);\\n    }\\n\\n    // ============================ View ===================================\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view override returns (bytes memory) {\\n        if (_configType == CONFIG_TYPE_ULN) {\\n            return abi.encode(getUlnConfig(_oapp, _eid));\\n        } else {\\n            revert LZ_ULN_InvalidConfigType(_configType);\\n        }\\n    }\\n\\n    function isSupportedEid(uint32 _eid) external view override returns (bool) {\\n        return _isSupportedEid(_eid);\\n    }\\n\\n    function version() external pure override returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (3, 0, 2);\\n    }\\n}\\n\",\"keccak256\":\"0x1c16bbadd26af06c849adabe5f2cb350e2cede88201e4dfbe8e9e0e4ce88c190\",\"license\":\"LZBL-1.2\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200248138038062002481833981016040819052620000349162000116565b8080816001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009b919062000148565b620000a633620000c6565b6001600160a01b0390911660805263ffffffff1660a05250620001709050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200012957600080fd5b81516001600160a01b03811681146200014157600080fd5b9392505050565b6000602082840312156200015b57600080fd5b815163ffffffff811681146200014157600080fd5b60805160a0516122e46200019d600039600061031e01526000818161041b015261048401526122e46000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806343ea4fa9116100a25780638da5cb5b116100715780638da5cb5b146102665780639c33abf714610281578063c40ff835146102a1578063e084d952146102b4578063f2fde38b146102c757600080fd5b806343ea4fa91461021857806354fd4d501461022b5780636750cd4c1461024b578063715018a61461025e57600080fd5b806320efd722116100de57806320efd7221461016f57806329460b0b1461018257806339e3f938146101955780633c782a52146101b557600080fd5b806301ffc9a7146101105780630223536e146101385780630894edf11461014d5780631881d94d14610160575b600080fd5b61012361011e366004611755565b6102da565b60405190151581526020015b60405180910390f35b61014b6101463660046117e3565b610305565b005b61014b61015b36600461183f565b610317565b600160405161012f919061188a565b61014b61017d36600461190d565b610482565b61014b61019036600461195f565b6105a4565b6101a86101a33660046119b4565b61073c565b60405161012f9190611a9d565b6101f96101c3366004611ab0565b600260209081526000938452604080852082529284528284209052825290205460ff81169061010090046001600160401b031682565b6040805192151583526001600160401b0390911660208301520161012f565b6101a86102263660046119b4565b610877565b60408051600381526000602082015260029181019190915260600161012f565b610123610259366004611ae5565b610b83565b61014b610b8e565b6000546040516001600160a01b03909116815260200161012f565b61029461028f366004611b00565b610ba2565b60405161012f9190611b3a565b61014b6102af366004611b89565b610c0b565b6101236102c2366004611d78565b610c1b565b61014b6102d5366004611dc5565b610c30565b60006001600160e01b03198216630ab7be9f60e01b14806102ff57506102ff82610ca9565b92915050565b61031184848484610cde565b50505050565b61034283837f0000000000000000000000000000000000000000000000000000000000000000610dc4565b600061034e8484610e47565b9050600061035c8585610e59565b9050600061036a8383610877565b905061038e818787604051610380929190611de0565b604051809103902086610e7c565b600060405180606001604052808463ffffffff1681526020016103b18989610fcc565b81526020016103c08989610fe5565b6001600160401b039081169091526040805163a825d74760e01b8152835163ffffffff166004820152602084015160248201529083015190911660448201526001600160a01b038681166064830152608482018890529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a825d7479060a401600060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b5050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146104cb5760405163467409c360e01b815260040160405180910390fd5b60005b8181101561031157368383838181106104e9576104e9611df0565b90506020028101906104fb9190611e06565b905061051261050d6020830183611ae5565b611008565b60026105246040830160208401611ae5565b63ffffffff16036105645761055f61053f6020830183611ae5565b8661054d6040850185611e26565b81019061055a9190611e6c565b611036565b61059b565b6105746040820160208301611ae5565b604051635d4be0fd60e11b815263ffffffff90911660048201526024015b60405180910390fd5b506001016104ce565b6105ac61108c565b60005b818110156106fe57368383838181106105ca576105ca611df0565b90506020028101906105dc9190611ea0565b905060ff6105ed6020830183611eb6565b6105fe906040810190602001611ecc565b60ff160361061f576040516341d50bed60e11b815260040160405180910390fd5b60ff61062e6020830183611eb6565b61063f906060810190604001611ecc565b60ff16036106605760405163211089b360e11b815260040160405180910390fd5b6001600160401b036106756020830183611eb6565b610683906020810190611ee7565b6001600160401b0316036106aa5760405163281b33d760e11b815260040160405180910390fd5b6106c86106ba6020830183611eb6565b6106c390611f02565b6110e6565b6106f560006106da6020840184611ae5565b6106e76020850185611eb6565b6106f090611f02565b61111e565b506001016105af565b507faaf3aaa0c11056e86ac56eb653e25b005ca1a7d4dcd21ba24647f7ab63f3b5608282604051610730929190611f92565b60405180910390a15050565b610744611693565b6001600160a01b038316600090815260016020818152604080842063ffffffff87168552825292839020835160c08101855281546001600160401b038116825260ff600160401b8204811683860152600160481b8204811683880152600160501b909104166060820152928101805485518185028101850190965280865293949193608086019383018282801561080457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107e6575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561086657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610848575b505050505081525050905092915050565b61087f611693565b63ffffffff821660008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260408083206001600160a01b03881684526001835281842094845293909152902080546001600160401b0316806108f45782546001600160401b03168452610911565b6001600160401b0381811614610911576001600160401b03811684525b8154600160401b900460ff166109ab578254600160401b900460ff16156109a6578260010180548060200260200160405190810160405280929190818152602001828054801561098a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161096c575b505050505060808501528254600160401b900460ff1660208501525b610a32565b8154600160401b900460ff90811614610a325781600101805480602002602001604051908101604052809291908181526020018280548015610a1657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f8575b505050505060808501528154600160401b900460ff1660208501525b8154600160481b900460ff16610adb578254600160481b900460ff1615610ad65782600201805480602002602001604051908101604052809291908181526020018280548015610aab57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a8d575b505050505060a0850152825460ff600160481b820481166040870152600160501b9091041660608501525b610b71565b8154600160481b900460ff90811614610b715781600201805480602002602001604051908101604052809291908181526020018280548015610b4657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b28575b505050505060a0850152815460ff600160481b820481166040870152600160501b9091041660608501525b610b7a846110e6565b50505092915050565b60006102ff826113b7565b610b9661108c565b610ba06000611412565b565b606060011963ffffffff831601610be357610bbd8385610877565b604051602001610bcd9190611a9d565b6040516020818303038152906040529050610c04565b604051635d4be0fd60e11b815263ffffffff83166004820152602401610592565b9392505050565b610c16838383610dc4565b505050565b6000610c28848484611462565b949350505050565b610c3861108c565b6001600160a01b038116610c9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610592565b610ca681611412565b50565b60006001600160e01b031982166325fc096160e21b14806102ff57506301ffc9a760e01b6001600160e01b03198316146102ff565b604080518082018252600181526001600160401b03831660208201529051600290600090610d0f9088908890611de0565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352908452908290208451815495909401516001600160401b03166101000268ffffffffffffffff00199415159490941668ffffffffffffffffff19909516949094179290921790925590517f2cb0eed7538baeae4c6fde038c0fd0384d27de0dd55a228c65847bda6aa1ab5691610db69187908790869088906120d4565b60405180910390a150505050565b60518214610de55760405163c9bf37b760e01b815260040160405180910390fd5b6001610df1848461156b565b60ff1614610e1257604051633a9ae7b960e01b815260040160405180910390fd5b8063ffffffff16610e23848461158d565b63ffffffff1614610c165760405163216964bf60e11b815260040160405180910390fd5b6000610c04610e56848461159d565b90565b6000610e69600d6009848661212e565b610e7291612158565b60e01c9392505050565b610e87838383611462565b610ea45760405163130c463560e21b815260040160405180910390fd5b602083015160ff1615610f395760005b836020015160ff168160ff161015610f3757600083815260026020908152604080832085845290915281206080860151805191929160ff8516908110610efc57610efc611df0565b6020908102919091018101516001600160a01b03168252810191909152604001600020805468ffffffffffffffffff19169055600101610eb4565b505b604083015160ff1615610c165760005b836040015160ff168160ff161015610311576000838152600260209081526040808320858452909152812060a0860151805191929160ff8516908110610f9157610f91611df0565b6020908102919091018101516001600160a01b03168252810191909152604001600020805468ffffffffffffffffff19169055600101610f49565b6000610fdc602d600d848661212e565b610c0491612188565b6000610ff560096001848661212e565b610ffe916121a6565b60c01c9392505050565b611011816113b7565b610ca657604051633c30434160e21b815263ffffffff82166004820152602401610592565b61104182848361111e565b61104b8284610877565b507f82118522aa536ac0e96cc5c689407ae42b89d592aa133890a01f1509842f508182848360405161107f939291906121d4565b60405180910390a1505050565b6000546001600160a01b03163314610ba05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610592565b602081015160ff161580156111005750606081015160ff16155b15610ca65760405163ce2c375160e01b815260040160405180910390fd5b602081015160ff90811614806111395750602081015160ff16155b156111675760808101515115611162576040516341d50bed60e11b815260040160405180910390fd5b6111cd565b806020015160ff168160800151511415806111a25750600261118b600160ff61221a565b6111959190612233565b60ff16816020015160ff16115b156111c0576040516341d50bed60e11b815260040160405180910390fd5b6111cd81608001516115ad565b604081015160ff90811614806111e85750604081015160ff16155b1561123c5760a081015151156112115760405163211089b360e11b815260040160405180910390fd5b606081015160ff1615611237576040516338682fa960e01b815260040160405180910390fd5b6112e1565b806040015160ff168160a001515114158061127757506002611260600160ff61221a565b61126a9190612233565b60ff16816040015160ff16115b156112955760405163211089b360e11b815260040160405180910390fd5b606081015160ff1615806112b65750806040015160ff16816060015160ff16115b156112d4576040516338682fa960e01b815260040160405180910390fd5b6112e18160a001516115ad565b6001600160a01b038316600090815260016020818152604080842063ffffffff8716855282529283902084518154868401519587015160608801516001600160401b0390931668ffffffffffffffffff1990921691909117600160401b60ff97881602176affff0000000000000000001916600160481b9187169190910260ff60501b191617600160501b959091169490940293909317835560808401518051859493611393939085019201906116db565b5060a082015180516113af9160028401916020909101906116db565b505050505050565b63ffffffff811660009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604081208054600160401b900460ff16151580610c04575054600160501b900460ff16151592915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602083015160009060ff16156114e55760005b846020015160ff168160ff1610156114cd576114b785608001518260ff16815181106114a3576114a3611df0565b602002602001015185858860000151611614565b6114c5576000915050610c04565b600101611475565b50836040015160ff166000036114e557506001610c04565b606084015160005b856040015160ff168160ff16101561155f5761152f8660a001518260ff168151811061151b5761151b611df0565b602002602001015186868960000151611614565b15611557578161153e81612263565b9250508160ff1660000361155757600192505050610c04565b6001016114ed565b50600095945050505050565b600061157a600182848661212e565b61158391612280565b60f81c9392505050565b6000610e696031602d848661212e565b6000610fdc60516031848661212e565b6000805b8251811015610c165760008382815181106115ce576115ce611df0565b60200260200101519050826001600160a01b0316816001600160a01b03161161160a5760405163447516e160e01b815260040160405180910390fd5b91506001016115b1565b600083815260026020908152604080832085845282528083206001600160a01b0388168452825280832081518083019092525460ff81161580158084526101009092046001600160401b03169383019390935290916116895750826001600160401b031681602001516001600160401b031610155b9695505050505050565b6040518060c0016040528060006001600160401b03168152602001600060ff168152602001600060ff168152602001600060ff16815260200160608152602001606081525090565b828054828255906000526020600020908101928215611730579160200282015b8281111561173057825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906116fb565b5061173c929150611740565b5090565b5b8082111561173c5760008155600101611741565b60006020828403121561176757600080fd5b81356001600160e01b031981168114610c0457600080fd5b60008083601f84011261179157600080fd5b5081356001600160401b038111156117a857600080fd5b6020830191508360208285010111156117c057600080fd5b9250929050565b80356001600160401b03811681146117de57600080fd5b919050565b600080600080606085870312156117f957600080fd5b84356001600160401b0381111561180f57600080fd5b61181b8782880161177f565b90955093505060208501359150611834604086016117c7565b905092959194509250565b60008060006040848603121561185457600080fd5b83356001600160401b0381111561186a57600080fd5b6118768682870161177f565b909790965060209590950135949350505050565b60208101600383106118ac57634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160a01b03811681146117de57600080fd5b60008083601f8401126118db57600080fd5b5081356001600160401b038111156118f257600080fd5b6020830191508360208260051b85010111156117c057600080fd5b60008060006040848603121561192257600080fd5b61192b846118b2565b925060208401356001600160401b0381111561194657600080fd5b611952868287016118c9565b9497909650939450505050565b6000806020838503121561197257600080fd5b82356001600160401b0381111561198857600080fd5b611994858286016118c9565b90969095509350505050565b803563ffffffff811681146117de57600080fd5b600080604083850312156119c757600080fd5b6119d0836118b2565b91506119de602084016119a0565b90509250929050565b60008151808452602080850194506020840160005b83811015611a215781516001600160a01b0316875295820195908201906001016119fc565b509495945050505050565b6001600160401b03815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301526000608082015160c06080850152611a7b60c08501826119e7565b905060a083015184820360a0860152611a9482826119e7565b95945050505050565b602081526000610c046020830184611a2c565b600080600060608486031215611ac557600080fd5b8335925060208401359150611adc604085016118b2565b90509250925092565b600060208284031215611af757600080fd5b610c04826119a0565b600080600060608486031215611b1557600080fd5b611b1e846119a0565b9250611b2c602085016118b2565b9150611adc604085016119a0565b60006020808352835180602085015260005b81811015611b6857858101830151858201604001528201611b4c565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600060408486031215611b9e57600080fd5b83356001600160401b03811115611bb457600080fd5b611bc08682870161177f565b9094509250611adc9050602085016119a0565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715611c0b57611c0b611bd3565b60405290565b803560ff811681146117de57600080fd5b600082601f830112611c3357600080fd5b813560206001600160401b0380831115611c4f57611c4f611bd3565b8260051b604051601f19603f83011681018181108482111715611c7457611c74611bd3565b6040529384526020818701810194908101925087851115611c9457600080fd5b6020870191505b84821015611cbb57611cac826118b2565b83529183019190830190611c9b565b979650505050505050565b600060c08284031215611cd857600080fd5b611ce0611be9565b9050611ceb826117c7565b8152611cf960208301611c11565b6020820152611d0a60408301611c11565b6040820152611d1b60608301611c11565b606082015260808201356001600160401b0380821115611d3a57600080fd5b611d4685838601611c22565b608084015260a0840135915080821115611d5f57600080fd5b50611d6c84828501611c22565b60a08301525092915050565b600080600060608486031215611d8d57600080fd5b83356001600160401b03811115611da357600080fd5b611daf86828701611cc6565b9660208601359650604090950135949350505050565b600060208284031215611dd757600080fd5b610c04826118b2565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112611e1c57600080fd5b9190910192915050565b6000808335601e19843603018112611e3d57600080fd5b8301803591506001600160401b03821115611e5757600080fd5b6020019150368190038213156117c057600080fd5b600060208284031215611e7e57600080fd5b81356001600160401b03811115611e9457600080fd5b610c2884828501611cc6565b60008235603e19833603018112611e1c57600080fd5b6000823560be19833603018112611e1c57600080fd5b600060208284031215611ede57600080fd5b610c0482611c11565b600060208284031215611ef957600080fd5b610c04826117c7565b60006102ff3683611cc6565b6000808335601e19843603018112611f2557600080fd5b83016020810192503590506001600160401b03811115611f4457600080fd5b8060051b36038213156117c057600080fd5b8183526000602080850194508260005b85811015611a21576001600160a01b03611f7f836118b2565b1687529582019590820190600101611f66565b60208082528181018390526000906040808401600586901b8501820187855b888110156120c657603f19808985030185528235603e198c3603018112611fd757600080fd5b8b0163ffffffff611fe7826119a0565b1685528781013560be1982360301811261200057600080fd5b858901889052016001600160401b03612018826117c7565b1687860152612028888201611c11565b606060ff8083168289015261203e8a8501611c11565b92506080818416818a0152612054838601611c11565b935060a09250818416838a015261206d81860186611f0e565b60c08b81015294509150612088905061010089018483611f56565b92505061209781840184611f0e565b93509050838783030160e08801526120b0828483611f56565b978a019796505050928701925050600101611fb1565b509098975050505050505050565b6001600160a01b03861681526080602082018190528101849052838560a0830137600060a08583010152600060a0601f19601f87011683010190506001600160401b03841660408301528260608301529695505050505050565b6000808585111561213e57600080fd5b8386111561214b57600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156121805780818660040360031b1b83161692505b505092915050565b803560208310156102ff57600019602084900360031b1b1692915050565b6001600160c01b031981358181169160088510156121805760089490940360031b84901b1690921692915050565b6001600160a01b038416815263ffffffff83166020820152606060408201819052600090611a9490830184611a2c565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156102ff576102ff612204565b600060ff83168061225457634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b600060ff82168061227657612276612204565b6000190192915050565b6001600160f81b031981358181169160018510156121805760019490940360031b84901b169092169291505056fea26469706673582212208dbba963c71856a7633afdde05502b8526bebdc2fef884aa7b3e00aa3f94744064736f6c63430008160033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This is a gluing contract. It simply parses the requests and forward to the super.impl() accordingly.In this case, it combines the logic of ReceiveUlnBase and ReceiveLibBaseE2",
    "kind": "dev",
    "methods": {
      "commitVerification(bytes,bytes32)": {
        "details": "dont need to check endpoint verifiable here to save gas, as it will reverts if not verifiable."
      },
      "getAppUlnConfig(address,uint32)": {
        "details": "Get the uln config without the default config for the given remoteEid."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": {
        "details": "about the DEFAULT ULN config 1) its values are all LITERAL (e.g. 0 is 0). whereas in the oapp ULN config, 0 (default value) points to the default ULN config     this design enables the oapp to point to DEFAULT config without explicitly setting the config 2) its configuration is more restrictive than the oapp ULN config that     a) it must not use NIL value, where NIL is used only by oapps to indicate the LITERAL 0     b) it must have at least one DVN"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verify(bytes,bytes32,uint64)": {
        "details": "for dvn to verify the payload"
      }
    },
    "stateVariables": {
      "CONFIG_TYPE_ULN": {
        "details": "CONFIG_TYPE_ULN=2 here to align with SendUln302/ReceiveUln302/ReceiveUln301"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7924,
        "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20352,
        "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
        "label": "ulnConfigs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(UlnConfig)20301_storage))"
      },
      {
        "astId": 19426,
        "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
        "label": "hashLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(UlnConfig)20301_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct UlnConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(UlnConfig)20301_storage)"
      },
      "t_mapping(t_address,t_struct(Verification)19411_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Verification)",
        "numberOfBytes": "32",
        "value": "t_struct(Verification)19411_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct Verification))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Verification)19411_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(address => struct Verification)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage))"
      },
      "t_mapping(t_uint32,t_struct(UlnConfig)20301_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct UlnConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(UlnConfig)20301_storage"
      },
      "t_struct(UlnConfig)20301_storage": {
        "encoding": "inplace",
        "label": "struct UlnConfig",
        "members": [
          {
            "astId": 20288,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "confirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 20290,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "requiredDVNCount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20292,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "optionalDVNCount",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20294,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "optionalDVNThreshold",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20297,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "requiredDVNs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 20300,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "optionalDVNs",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Verification)19411_storage": {
        "encoding": "inplace",
        "label": "struct Verification",
        "members": [
          {
            "astId": 19408,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "submitted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19410,
            "contract": "contracts/messagelib/contracts/uln/uln302/ReceiveUln302.sol:ReceiveUln302",
            "label": "confirmations",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}