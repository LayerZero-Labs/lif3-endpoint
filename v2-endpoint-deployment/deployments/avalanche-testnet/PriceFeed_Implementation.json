{
  "address": "0x8c3a776d3a0f836ce08CfD9cb3959f0f9b4289E9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "provided",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "LZ_PriceFeed_InsufficientFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "l2Eid",
          "type": "uint32"
        }
      ],
      "name": "LZ_PriceFeed_NotAnOPStack",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_PriceFeed_OnlyPriceUpdater",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer_NativeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Transfer_ToAddressIsZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARBITRUM_COMPRESSION_PERCENT",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrumPriceExt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "gasPerL2Tx",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "gasPerL1CallDataByte",
              "type": "uint32"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "eidToModelType",
      "outputs": [
        {
          "internalType": "enum ModelType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeByChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "priceRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeByEid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_callDataSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeOnSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "priceRatio",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "gasPriceInUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "gasPerByte",
              "type": "uint32"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.Price",
          "name": "price",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "priceRatio",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "gasPriceInUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "gasPerByte",
              "type": "uint32"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.Price",
          "name": "price",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceRatioDenominator",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceUpdater",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeTokenPriceUSD",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "updater",
          "type": "address"
        }
      ],
      "name": "priceUpdater",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_compressionPercent",
          "type": "uint128"
        }
      ],
      "name": "setArbitrumCompressionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "enum ModelType",
              "name": "modelType",
              "type": "uint8"
            }
          ],
          "internalType": "struct SetEidToModelTypeParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setEidToModelType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "name": "setEndpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_nativeTokenPriceUSD",
          "type": "uint128"
        }
      ],
      "name": "setNativeTokenPriceUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "priceRatio",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "gasPriceInUnit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.Price",
              "name": "price",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.UpdatePrice[]",
          "name": "_price",
          "type": "tuple[]"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "priceRatio",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "gasPriceInUnit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.Price",
              "name": "price",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "gasPerL2Tx",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "gasPerL1CallDataByte",
                  "type": "uint32"
                }
              ],
              "internalType": "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
              "name": "extend",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILayerZeroPriceFeed.UpdatePriceExt",
          "name": "_update",
          "type": "tuple"
        }
      ],
      "name": "setPriceForArbitrum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_denominator",
          "type": "uint128"
        }
      ],
      "name": "setPriceRatioDenominator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setPriceUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf9d2c1afa8ce1a6ae84b0c5972058fc1570ffd6b536cbf8953daa2d590ecd59",
  "receipt": {
    "to": null,
    "from": "0x462c2AE39B6B0bdB950Deb2BC82082308cF8cB10",
    "contractAddress": "0x8c3a776d3a0f836ce08CfD9cb3959f0f9b4289E9",
    "transactionIndex": 0,
    "gasUsed": "1490369",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x02064f8f4653864429f3288a4737f123d1093c7eafa80df4742513965fa88483",
    "transactionHash": "0xaf9d2c1afa8ce1a6ae84b0c5972058fc1570ffd6b536cbf8953daa2d590ecd59",
    "logs": [],
    "blockNumber": 35723067,
    "cumulativeGasUsed": "1490369",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "df45c5d73ee7212b45689d2cdbb787f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"LZ_PriceFeed_InsufficientFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"l2Eid\",\"type\":\"uint32\"}],\"name\":\"LZ_PriceFeed_NotAnOPStack\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_PriceFeed_OnlyPriceUpdater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer_NativeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Transfer_ToAddressIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARBITRUM_COMPRESSION_PERCENT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrumPriceExt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gasPerL2Tx\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerL1CallDataByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.ArbitrumPriceExt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"eidToModelType\",\"outputs\":[{\"internalType\":\"enum ModelType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeByChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeByEid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_callDataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"estimateFeeOnSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceRatioDenominator\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceUpdater\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"priceUpdater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_compressionPercent\",\"type\":\"uint128\"}],\"name\":\"setArbitrumCompressionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"enum ModelType\",\"name\":\"modelType\",\"type\":\"uint8\"}],\"internalType\":\"struct SetEidToModelTypeParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setEidToModelType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"name\":\"setEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_nativeTokenPriceUSD\",\"type\":\"uint128\"}],\"name\":\"setNativeTokenPriceUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"internalType\":\"struct ILayerZeroPriceFeed.UpdatePrice[]\",\"name\":\"_price\",\"type\":\"tuple[]\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"priceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"gasPriceInUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gasPerL2Tx\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasPerL1CallDataByte\",\"type\":\"uint32\"}],\"internalType\":\"struct ILayerZeroPriceFeed.ArbitrumPriceExt\",\"name\":\"extend\",\"type\":\"tuple\"}],\"internalType\":\"struct ILayerZeroPriceFeed.UpdatePriceExt\",\"name\":\"_update\",\"type\":\"tuple\"}],\"name\":\"setPriceForArbitrum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_denominator\",\"type\":\"uint128\"}],\"name\":\"setPriceRatioDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPriceUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messagelib/contracts/PriceFeed.sol\":\"PriceFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ADDRESS_ZERO = address(0);\\n\\n    error Transfer_NativeFailed(address _to, uint256 _value);\\n    error Transfer_ToAddressIsZero();\\n\\n    function native(address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        (bool success, ) = _to.call{ value: _value }(\\\"\\\");\\n        if (!success) revert Transfer_NativeFailed(_to, _value);\\n    }\\n\\n    function token(address _token, address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        IERC20(_token).safeTransfer(_to, _value);\\n    }\\n\\n    function nativeOrToken(address _token, address _to, uint256 _value) internal {\\n        if (_token == ADDRESS_ZERO) {\\n            native(_to, _value);\\n        } else {\\n            token(_token, _to, _value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x621d6dd5b8b7e827351459fff4ac87c16ba4656757592cf67de8b199aea4cf9a\",\"license\":\"LZBL-1.2\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { Proxied } from \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { Transfer } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\\\";\\n\\nimport { ILayerZeroPriceFeed } from \\\"./interfaces/ILayerZeroPriceFeed.sol\\\";\\n\\nenum ModelType {\\n    DEFAULT,\\n    ARB_STACK,\\n    OP_STACK\\n}\\n\\nstruct SetEidToModelTypeParam {\\n    uint32 dstEid;\\n    ModelType modelType;\\n}\\n\\n// PriceFeed is updated based on v1 eids\\n// v2 eids will fall to the convention of v1 eid + 30,000\\ncontract PriceFeed is ILayerZeroPriceFeed, OwnableUpgradeable, Proxied {\\n    uint128 internal PRICE_RATIO_DENOMINATOR;\\n\\n    // sets pricing\\n    mapping(address updater => bool active) public priceUpdater;\\n\\n    mapping(uint32 dstEid => Price) internal _defaultModelPrice;\\n    ArbitrumPriceExt internal _arbitrumPriceExt;\\n\\n    uint128 internal _nativePriceUSD; // uses PRICE_RATIO_DENOMINATOR\\n\\n    // upgrade: arbitrum compression - percentage of callDataSize after brotli compression\\n    uint128 public ARBITRUM_COMPRESSION_PERCENT;\\n\\n    ILayerZeroEndpointV2 public endpoint;\\n\\n    // for the destination endpoint id, return the fee model type\\n    mapping(uint32 => ModelType) public eidToModelType;\\n\\n    // ============================ Constructor ===================================\\n\\n    function initialize(address _priceUpdater) public proxied initializer {\\n        __Ownable_init();\\n        priceUpdater[_priceUpdater] = true;\\n        PRICE_RATIO_DENOMINATOR = 1e20;\\n        ARBITRUM_COMPRESSION_PERCENT = 47;\\n    }\\n\\n    // ============================ Modifier ======================================\\n\\n    // owner is always approved\\n    modifier onlyPriceUpdater() {\\n        if (owner() != msg.sender) {\\n            if (!priceUpdater[msg.sender]) {\\n                revert LZ_PriceFeed_OnlyPriceUpdater();\\n            }\\n        }\\n        _;\\n    }\\n\\n    // ============================ OnlyOwner =====================================\\n\\n    function setPriceUpdater(address _addr, bool _active) external onlyOwner {\\n        priceUpdater[_addr] = _active;\\n    }\\n\\n    function setPriceRatioDenominator(uint128 _denominator) external onlyOwner {\\n        PRICE_RATIO_DENOMINATOR = _denominator;\\n    }\\n\\n    function setArbitrumCompressionPercent(uint128 _compressionPercent) external onlyOwner {\\n        ARBITRUM_COMPRESSION_PERCENT = _compressionPercent;\\n    }\\n\\n    // set the fee ModelType for the destination eid\\n    function setEidToModelType(SetEidToModelTypeParam[] calldata _params) external onlyOwner {\\n        for (uint i = 0; i < _params.length; i++) {\\n            eidToModelType[_params[i].dstEid] = _params[i].modelType;\\n        }\\n    }\\n\\n    function setEndpoint(address _endpoint) external onlyOwner {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n    }\\n\\n    function withdrawFee(address _to, uint256 _amount) external onlyOwner {\\n        Transfer.native(_to, _amount);\\n    }\\n\\n    // ============================ OnlyPriceUpdater =====================================\\n\\n    function setPrice(UpdatePrice[] calldata _price) external onlyPriceUpdater {\\n        for (uint256 i = 0; i < _price.length; i++) {\\n            UpdatePrice calldata _update = _price[i];\\n            _setPrice(_update.eid, _update.price);\\n        }\\n    }\\n\\n    function setPriceForArbitrum(UpdatePriceExt calldata _update) external onlyPriceUpdater {\\n        _setPrice(_update.eid, _update.price);\\n\\n        uint64 gasPerL2Tx = _update.extend.gasPerL2Tx;\\n        uint32 gasPerL1CalldataByte = _update.extend.gasPerL1CallDataByte;\\n\\n        _arbitrumPriceExt.gasPerL2Tx = gasPerL2Tx;\\n        _arbitrumPriceExt.gasPerL1CallDataByte = gasPerL1CalldataByte;\\n    }\\n\\n    function setNativeTokenPriceUSD(uint128 _nativeTokenPriceUSD) external onlyPriceUpdater {\\n        _nativePriceUSD = _nativeTokenPriceUSD;\\n    }\\n\\n    // ============================ External =====================================\\n\\n    function estimateFeeOnSend(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) external payable returns (uint256, uint128, uint128, uint128) {\\n        uint256 fee = getFee(_dstEid, _callDataSize, _gas);\\n        if (msg.value < fee) revert LZ_PriceFeed_InsufficientFee(msg.value, fee);\\n        return _estimateFeeByEid(_dstEid, _callDataSize, _gas);\\n    }\\n\\n    // ============================ View ==========================================\\n\\n    // get fee for calling estimateFeeOnSend\\n    function getFee(uint32 /*_dstEid*/, uint256 /*_callDataSize*/, uint256 /*_gas*/) public pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getPriceRatioDenominator() external view returns (uint128) {\\n        return PRICE_RATIO_DENOMINATOR;\\n    }\\n\\n    // NOTE: to be reverted when endpoint is in sendContext\\n    function nativeTokenPriceUSD() external view returns (uint128) {\\n        return _nativePriceUSD;\\n    }\\n\\n    // NOTE: to be reverted when endpoint is in sendContext\\n    function arbitrumPriceExt() external view returns (ArbitrumPriceExt memory) {\\n        return _arbitrumPriceExt;\\n    }\\n\\n    // NOTE: to be reverted when endpoint is in sendContext\\n    function getPrice(uint32 _dstEid) external view returns (Price memory price) {\\n        price = _defaultModelPrice[_dstEid];\\n    }\\n\\n    // NOTE: to be reverted when endpoint is in sendContext\\n    function estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) external view returns (uint256, uint128, uint128, uint128) {\\n        return _estimateFeeByEid(_dstEid, _callDataSize, _gas);\\n    }\\n\\n    // NOTE: to be reverted when endpoint is in sendContext\\n    // NOTE: to support legacy\\n    function getPrice(uint16 _dstEid) external view returns (Price memory price) {\\n        price = _defaultModelPrice[_dstEid];\\n    }\\n\\n    // NOTE: to be reverted when endpoint is in sendContext\\n    // NOTE: to support legacy\\n    function estimateFeeByChain(\\n        uint16 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) external view returns (uint256 fee, uint128 priceRatio) {\\n        // legacy if-statement uses very little gas, can keep using it until future upgrade\\n        if (_dstEid == 110 || _dstEid == 10143 || _dstEid == 20143) {\\n            return _estimateFeeWithArbitrumModel(_dstEid, _callDataSize, _gas);\\n        } else if (_dstEid == 111 || _dstEid == 10132 || _dstEid == 20132) {\\n            return _estimateFeeWithOptimismModel(_dstEid, _callDataSize, _gas);\\n        }\\n\\n        // fee model type is configured per eid\\n        ModelType _modelType = eidToModelType[_dstEid];\\n        if (_modelType == ModelType.OP_STACK) {\\n            return _estimateFeeWithOptimismModel(_dstEid, _callDataSize, _gas);\\n        } else if (_modelType == ModelType.ARB_STACK) {\\n            return _estimateFeeWithArbitrumModel(_dstEid, _callDataSize, _gas);\\n        } else {\\n            return _estimateFeeWithDefaultModel(_dstEid, _callDataSize, _gas);\\n        }\\n    }\\n\\n    // ============================ Internal ==========================================\\n\\n    function _setPrice(uint32 _dstEid, Price memory _price) internal {\\n        uint128 priceRatio = _price.priceRatio;\\n        uint64 gasPriceInUnit = _price.gasPriceInUnit;\\n        uint32 gasPerByte = _price.gasPerByte;\\n        _defaultModelPrice[_dstEid] = Price(priceRatio, gasPriceInUnit, gasPerByte);\\n    }\\n\\n    function _getL1LookupIdForOptimismModel(uint32 _l2Eid) internal view returns (uint32) {\\n        uint32 l2Eid = _l2Eid % 30_000;\\n        if (l2Eid == 111) {\\n            return 101;\\n        } else if (l2Eid == 10132) {\\n            return 10121; // ethereum-goerli\\n        } else if (l2Eid == 20132) {\\n            return 20121; // ethereum-goerli\\n        }\\n\\n        if (eidToModelType[l2Eid] != ModelType.OP_STACK) revert LZ_PriceFeed_NotAnOPStack(_l2Eid);\\n        if (l2Eid < 10000) {\\n            return 101;\\n        } else if (l2Eid < 20000) {\\n            return 10161; // ethereum-sepolia\\n        } else {\\n            return 20121; // ethereum-goerli\\n        }\\n    }\\n\\n    function _estimateFeeWithDefaultModel(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) internal view returns (uint256 fee, uint128 priceRatio) {\\n        Price storage remotePrice = _defaultModelPrice[_dstEid];\\n\\n        // assuming the _gas includes (1) the 21,000 overhead and (2) not the calldata gas\\n        uint256 gasForCallData = _callDataSize * remotePrice.gasPerByte;\\n        uint256 remoteFee = (gasForCallData + _gas) * remotePrice.gasPriceInUnit;\\n        return ((remoteFee * remotePrice.priceRatio) / PRICE_RATIO_DENOMINATOR, remotePrice.priceRatio);\\n    }\\n\\n    function _estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) internal view returns (uint256 fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 priceUSD) {\\n        uint32 dstEid = _dstEid % 30_000;\\n        if (dstEid == 110 || dstEid == 10143 || dstEid == 20143) {\\n            (fee, priceRatio) = _estimateFeeWithArbitrumModel(dstEid, _callDataSize, _gas);\\n        } else if (dstEid == 111 || dstEid == 10132 || dstEid == 20132) {\\n            (fee, priceRatio) = _estimateFeeWithOptimismModel(dstEid, _callDataSize, _gas);\\n        }\\n\\n        // lookup map stuff\\n        ModelType _modelType = eidToModelType[dstEid];\\n        if (_modelType == ModelType.OP_STACK) {\\n            (fee, priceRatio) = _estimateFeeWithOptimismModel(dstEid, _callDataSize, _gas);\\n        } else if (_modelType == ModelType.ARB_STACK) {\\n            (fee, priceRatio) = _estimateFeeWithArbitrumModel(dstEid, _callDataSize, _gas);\\n        } else {\\n            (fee, priceRatio) = _estimateFeeWithDefaultModel(dstEid, _callDataSize, _gas);\\n        }\\n\\n        priceRatioDenominator = PRICE_RATIO_DENOMINATOR;\\n        priceUSD = _nativePriceUSD;\\n    }\\n\\n    function _estimateFeeWithOptimismModel(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) internal view returns (uint256 fee, uint128 priceRatio) {\\n        uint32 ethereumId = _getL1LookupIdForOptimismModel(_dstEid);\\n\\n        // L1 fee\\n        Price storage ethereumPrice = _defaultModelPrice[ethereumId];\\n        uint256 gasForL1CallData = (_callDataSize * ethereumPrice.gasPerByte) + 3188; // 2100 + 68 * 16\\n        uint256 l1Fee = gasForL1CallData * ethereumPrice.gasPriceInUnit;\\n\\n        // L2 fee\\n        Price storage optimismPrice = _defaultModelPrice[_dstEid];\\n        uint256 gasForL2CallData = _callDataSize * optimismPrice.gasPerByte;\\n        uint256 l2Fee = (gasForL2CallData + _gas) * optimismPrice.gasPriceInUnit;\\n\\n        uint256 l1FeeInSrcPrice = (l1Fee * ethereumPrice.priceRatio) / PRICE_RATIO_DENOMINATOR;\\n        uint256 l2FeeInSrcPrice = (l2Fee * optimismPrice.priceRatio) / PRICE_RATIO_DENOMINATOR;\\n        uint256 gasFee = l1FeeInSrcPrice + l2FeeInSrcPrice;\\n        return (gasFee, optimismPrice.priceRatio);\\n    }\\n\\n    function _estimateFeeWithArbitrumModel(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) internal view returns (uint256 fee, uint128 priceRatio) {\\n        Price storage arbitrumPrice = _defaultModelPrice[_dstEid];\\n\\n        // L1 fee\\n        uint256 gasForL1CallData = ((_callDataSize * ARBITRUM_COMPRESSION_PERCENT) / 100) *\\n            _arbitrumPriceExt.gasPerL1CallDataByte;\\n        // L2 Fee\\n        uint256 gasForL2CallData = _callDataSize * arbitrumPrice.gasPerByte;\\n        uint256 gasFee = (_gas + _arbitrumPriceExt.gasPerL2Tx + gasForL1CallData + gasForL2CallData) *\\n            arbitrumPrice.gasPriceInUnit;\\n\\n        return ((gasFee * arbitrumPrice.priceRatio) / PRICE_RATIO_DENOMINATOR, arbitrumPrice.priceRatio);\\n    }\\n}\\n\",\"keccak256\":\"0x8c22f6b1306bb47a405c52bd3cefd2c8358b12977ca7ca88faade6c8b6349ea6\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/interfaces/ILayerZeroPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroPriceFeed {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 20, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^20 = 10 ^ 30.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint32 eid;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint32 eid;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    error LZ_PriceFeed_OnlyPriceUpdater();\\n    error LZ_PriceFeed_InsufficientFee(uint256 provided, uint256 required);\\n    error LZ_PriceFeed_NotAnOPStack(uint32 l2Eid);\\n\\n    function nativeTokenPriceUSD() external view returns (uint128);\\n\\n    function getFee(uint32 _dstEid, uint256 _callDataSize, uint256 _gas) external view returns (uint256);\\n\\n    function getPrice(uint32 _dstEid) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n\\n    function estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) external view returns (uint256 fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n\\n    function estimateFeeOnSend(\\n        uint32 _dstEid,\\n        uint256 _callDataSize,\\n        uint256 _gas\\n    ) external payable returns (uint256 fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n}\\n\",\"keccak256\":\"0xb4df72798a64f5ea44775b526e0c417c3de0ffc661659d7b31d5b28567c6fbcc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506119fe806100206000396000f3fe6080604052600436106101815760003560e01c80638ca2fb08116100d1578063cd68b79b1161008a578063dbbb415511610064578063dbbb4155146105e0578063e0ad121a14610600578063f2fde38b14610689578063fd9be522146106a957600080fd5b8063cd68b79b146104d8578063d350ad25146104ff578063da26663a1461051f57600080fd5b80638ca2fb08146103f75780638da5cb5b1461043757806392807f5814610455578063c1723a1d14610487578063c18403271461049a578063c4d66de8146104b857600080fd5b80635d6d7ccb1161013e5780637760e22d116101185780637760e22d1461032b5780637bc3c9ab1461034b5780637dc438a41461038857806388a4124c146103a857600080fd5b80635d6d7ccb146102be5780635e280f11146102de578063715018a61461031657600080fd5b806311f2c34314610186578063223cf5b2146101bd5780632f7cb0b4146101fa5780633161b7f61461021c57806336a5beba1461023c57806352a725101461029e575b600080fd5b34801561019257600080fd5b506101aa6101a1366004611572565b60009392505050565b6040519081526020015b60405180910390f35b3480156101c957600080fd5b506101ed6101d83660046115a5565b606b6020526000908152604090205460ff1681565b6040516101b491906115dd565b34801561020657600080fd5b5061021a61021536600461161c565b6106c9565b005b34801561022857600080fd5b5061021a610237366004611637565b6106f0565b34801561024857600080fd5b506040805180820182526000808252602091820152815180830183526068546001600160401b03811680835263ffffffff600160401b9092048216928401928352845190815291511691810191909152016101b4565b3480156102aa57600080fd5b5061021a6102b93660046116c2565b610831565b3480156102ca57600080fd5b5061021a6102d936600461161c565b610864565b3480156102ea57600080fd5b50606a546102fe906001600160a01b031681565b6040516001600160a01b0390911681526020016101b4565b34801561032257600080fd5b5061021a6108d7565b34801561033757600080fd5b5061021a6103463660046116fe565b6108eb565b34801561035757600080fd5b5061036b610366366004611772565b610991565b604080519283526001600160801b039091166020830152016101b4565b34801561039457600080fd5b5061021a6103a3366004611790565b610a9d565b3480156103b457600080fd5b506103c86103c3366004611572565b610b5e565b604080519485526001600160801b039384166020860152918316918401919091521660608201526080016101b4565b34801561040357600080fd5b506104276104123660046117a8565b60666020526000908152604090205460ff1681565b60405190151581526020016101b4565b34801561044357600080fd5b506033546001600160a01b03166102fe565b34801561046157600080fd5b506069546001600160801b03165b6040516001600160801b0390911681526020016101b4565b6103c8610495366004611572565b610b80565b3480156104a657600080fd5b506065546001600160801b031661046f565b3480156104c457600080fd5b5061021a6104d33660046117a8565b610bb1565b3480156104e457600080fd5b5060695461046f90600160801b90046001600160801b031681565b34801561050b57600080fd5b5061021a61051a36600461161c565b610d97565b34801561052b57600080fd5b506105a661053a3660046115a5565b60408051606080820183526000808352602080840182905292840181905263ffffffff94851681526067835283902083519182018452546001600160801b0381168252600160801b81046001600160401b031692820192909252600160c01b9091049092169082015290565b6040805182516001600160801b031681526020808401516001600160401b0316908201529181015163ffffffff16908201526060016101b4565b3480156105ec57600080fd5b5061021a6105fb3660046117a8565b610dc1565b34801561060c57600080fd5b506105a661061b3660046117c3565b60408051606080820183526000808352602080840182905292840181905261ffff949094168452606782529282902082519384018352546001600160801b03811684526001600160401b03600160801b82041691840191909152600160c01b900463ffffffff169082015290565b34801561069557600080fd5b5061021a6106a43660046117a8565b610deb565b3480156106b557600080fd5b5061021a6106c43660046117de565b610e64565b6106d1610e7a565b606980546001600160801b03928316600160801b029216919091179055565b336107036033546001600160a01b031690565b6001600160a01b031614610741573360009081526066602052604090205460ff166107415760405163320ae52960e01b815260040160405180910390fd5b60005b8181101561082c573683838381811061075f5761075f611808565b608002919091019150610823905061077a60208301836115a5565b61078c36849003840160208501611835565b805160208083015160409384015184516060810186526001600160801b0394851681526001600160401b0392831681850190815263ffffffff9283168288019081529783166000908152606790955295909320925183549551965194166001600160c01b031990951694909417600160801b95909116949094029390931763ffffffff60c01b1916600160c01b9190921602179055565b50600101610744565b505050565b610839610e7a565b6001600160a01b03919091166000908152606660205260409020805460ff1916911515919091179055565b336108776033546001600160a01b031690565b6001600160a01b0316146108b5573360009081526066602052604090205460ff166108b55760405163320ae52960e01b815260040160405180910390fd5b606980546001600160801b0319166001600160801b0392909216919091179055565b6108df610e7a565b6108e96000610ed4565b565b6108f3610e7a565b60005b8181101561082c5782828281811061091057610910611808565b905060400201602001602081019061092891906118ae565b606b600085858581811061093e5761093e611808565b61095492602060409092020190810191506115a5565b63ffffffff1681526020810191909152604001600020805460ff19166001836002811115610984576109846115c7565b02179055506001016108f6565b6000808461ffff16606e14806109ac57508461ffff1661279f145b806109bc57508461ffff16614eaf145b156109d9576109d08561ffff168585610f26565b91509150610a95565b8461ffff16606f14806109f157508461ffff16612794145b80610a0157508461ffff16614ea4145b15610a15576109d08561ffff168585611033565b61ffff85166000908152606b602052604090205460ff166002816002811115610a4057610a406115c7565b03610a5e57610a548661ffff168686611033565b9250925050610a95565b6001816002811115610a7257610a726115c7565b03610a8657610a548661ffff168686610f26565b610a548661ffff168686611183565b935093915050565b33610ab06033546001600160a01b031690565b6001600160a01b031614610aee573360009081526066602052604090205460ff16610aee5760405163320ae52960e01b815260040160405180910390fd5b610afe61077a60208301836115a5565b6000610b1060a08301608084016118cf565b90506000610b2460c0840160a085016115a5565b6068805463ffffffff909216600160401b026bffffffffffffffffffffffff199092166001600160401b0390941693909317179091555050565b600080600080610b6f878787611223565b935093509350935093509350935093565b600080808080610b94565b60405180910390fd5b610b9f888888611223565b94509450945094505093509350935093565b6000610bdb7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610c1a576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c2f565b336001600160a01b03821614610c2f57600080fd5b600054610100900460ff1615808015610c4f5750600054600160ff909116105b80610c695750303b158015610c69575060005460ff166001145b610ccc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b8b565b6000805460ff191660011790558015610cef576000805461ff0019166101001790555b610cf7611364565b6001600160a01b0383166000908152606660205260409020805460ff19166001179055606580546001600160801b03191668056bc75e2d6310000017905560698054602f60801b6001600160801b0391909116179055801561082c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610d9f610e7a565b606580546001600160801b0319166001600160801b0392909216919091179055565b610dc9610e7a565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b610df3610e7a565b6001600160a01b038116610e585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b8b565b610e6181610ed4565b50565b610e6c610e7a565b610e768282611393565b5050565b6033546001600160a01b031633146108e95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b8b565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b63ffffffff8381166000908152606760205260408120606854606954929384938492600160401b900490911690606490610f7090600160801b90046001600160801b031689611900565b610f7a9190611933565b610f849190611900565b8254909150600090610fa390600160c01b900463ffffffff1688611900565b83546068549192506000916001600160401b03600160801b90920482169184918691610fd091168b611947565b610fda9190611947565b610fe49190611947565b610fee9190611900565b60655485549192506001600160801b039081169161100d911683611900565b6110179190611933565b935493996001600160801b039094169850929650505050505050565b600080600061104186611440565b63ffffffff8082166000908152606760205260408120805493945092909161107191600160c01b90041688611900565b61107d90610c74611947565b825490915060009061109f90600160801b90046001600160401b031683611900565b63ffffffff808b16600090815260676020526040812080549394509290916110cf91600160c01b9004168b611900565b8254909150600090600160801b90046001600160401b03166110f18b84611947565b6110fb9190611900565b60655487549192506000916001600160801b039182169161111d911687611900565b6111279190611933565b60655485549192506000916001600160801b0391821691611149911685611900565b6111539190611933565b905060006111618284611947565b9554959f6001600160801b039096169e50949c50505050505050505050505050565b63ffffffff808416600090815260676020526040812080549192839283916111b391600160c01b90041687611900565b8254909150600090600160801b90046001600160401b03166111d58784611947565b6111df9190611900565b60655484549192506001600160801b03908116916111fe911683611900565b6112089190611933565b925492986001600160801b0390931697509195505050505050565b6000808080806112356175308961195a565b90508063ffffffff16606e148061125357508063ffffffff1661279f145b8061126557508063ffffffff16614eaf145b1561127f57611275818888610f26565b90955093506112c3565b8063ffffffff16606f148061129b57508063ffffffff16612794145b806112ad57508063ffffffff16614ea4145b156112c3576112bd818888611033565b90955093505b63ffffffff81166000908152606b602052604090205460ff1660028160028111156112f0576112f06115c7565b0361130a57611300828989611033565b909650945061133f565b600181600281111561131e5761131e6115c7565b0361132e57611300828989610f26565b611339828989611183565b90965094505b505060655460695494989397506001600160801b039081169650909316935090915050565b600054610100900460ff1661138b5760405162461bcd60e51b8152600401610b8b9061197d565b6108e9611529565b6001600160a01b0382166113ba576040516306b7a93160e41b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611407576040519150601f19603f3d011682016040523d82523d6000602084013e61140c565b606091505b505090508061082c57604051631196f20d60e21b81526001600160a01b038416600482015260248101839052604401610b8b565b60008061144f6175308461195a565b90508063ffffffff16606f036114685750606592915050565b8063ffffffff1661279403611481575061278992915050565b8063ffffffff16614ea40361149a5750614e9992915050565b600263ffffffff82166000908152606b602052604090205460ff1660028111156114c6576114c66115c7565b146114ec57604051633d0b0cf760e21b815263ffffffff84166004820152602401610b8b565b6127108163ffffffff1610156115055750606592915050565b614e208163ffffffff16101561151f57506127b192915050565b50614e9992915050565b600054610100900460ff166115505760405162461bcd60e51b8152600401610b8b9061197d565b6108e933610ed4565b803563ffffffff8116811461156d57600080fd5b919050565b60008060006060848603121561158757600080fd5b61159084611559565b95602085013595506040909401359392505050565b6000602082840312156115b757600080fd5b6115c082611559565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106115ff57634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160801b038116811461156d57600080fd5b60006020828403121561162e57600080fd5b6115c082611605565b6000806020838503121561164a57600080fd5b82356001600160401b038082111561166157600080fd5b818501915085601f83011261167557600080fd5b81358181111561168457600080fd5b8660208260071b850101111561169957600080fd5b60209290920196919550909350505050565b80356001600160a01b038116811461156d57600080fd5b600080604083850312156116d557600080fd5b6116de836116ab565b9150602083013580151581146116f357600080fd5b809150509250929050565b6000806020838503121561171157600080fd5b82356001600160401b038082111561172857600080fd5b818501915085601f83011261173c57600080fd5b81358181111561174b57600080fd5b8660208260061b850101111561169957600080fd5b803561ffff8116811461156d57600080fd5b60008060006060848603121561178757600080fd5b61159084611760565b600060c082840312156117a257600080fd5b50919050565b6000602082840312156117ba57600080fd5b6115c0826116ab565b6000602082840312156117d557600080fd5b6115c082611760565b600080604083850312156117f157600080fd5b6117fa836116ab565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b80356001600160401b038116811461156d57600080fd5b60006060828403121561184757600080fd5b604051606081018181106001600160401b038211171561187757634e487b7160e01b600052604160045260246000fd5b60405261188383611605565b81526118916020840161181e565b60208201526118a260408401611559565b60408201529392505050565b6000602082840312156118c057600080fd5b8135600381106115c057600080fd5b6000602082840312156118e157600080fd5b6115c08261181e565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611917576119176118ea565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826119425761194261191d565b500490565b80820180821115611917576119176118ea565b600063ffffffff808416806119715761197161191d565b92169190910692915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122004834225e7418a5ceaad336b075a62ac47ba66c6766856204640e08caeae392b64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c80638ca2fb08116100d1578063cd68b79b1161008a578063dbbb415511610064578063dbbb4155146105e0578063e0ad121a14610600578063f2fde38b14610689578063fd9be522146106a957600080fd5b8063cd68b79b146104d8578063d350ad25146104ff578063da26663a1461051f57600080fd5b80638ca2fb08146103f75780638da5cb5b1461043757806392807f5814610455578063c1723a1d14610487578063c18403271461049a578063c4d66de8146104b857600080fd5b80635d6d7ccb1161013e5780637760e22d116101185780637760e22d1461032b5780637bc3c9ab1461034b5780637dc438a41461038857806388a4124c146103a857600080fd5b80635d6d7ccb146102be5780635e280f11146102de578063715018a61461031657600080fd5b806311f2c34314610186578063223cf5b2146101bd5780632f7cb0b4146101fa5780633161b7f61461021c57806336a5beba1461023c57806352a725101461029e575b600080fd5b34801561019257600080fd5b506101aa6101a1366004611572565b60009392505050565b6040519081526020015b60405180910390f35b3480156101c957600080fd5b506101ed6101d83660046115a5565b606b6020526000908152604090205460ff1681565b6040516101b491906115dd565b34801561020657600080fd5b5061021a61021536600461161c565b6106c9565b005b34801561022857600080fd5b5061021a610237366004611637565b6106f0565b34801561024857600080fd5b506040805180820182526000808252602091820152815180830183526068546001600160401b03811680835263ffffffff600160401b9092048216928401928352845190815291511691810191909152016101b4565b3480156102aa57600080fd5b5061021a6102b93660046116c2565b610831565b3480156102ca57600080fd5b5061021a6102d936600461161c565b610864565b3480156102ea57600080fd5b50606a546102fe906001600160a01b031681565b6040516001600160a01b0390911681526020016101b4565b34801561032257600080fd5b5061021a6108d7565b34801561033757600080fd5b5061021a6103463660046116fe565b6108eb565b34801561035757600080fd5b5061036b610366366004611772565b610991565b604080519283526001600160801b039091166020830152016101b4565b34801561039457600080fd5b5061021a6103a3366004611790565b610a9d565b3480156103b457600080fd5b506103c86103c3366004611572565b610b5e565b604080519485526001600160801b039384166020860152918316918401919091521660608201526080016101b4565b34801561040357600080fd5b506104276104123660046117a8565b60666020526000908152604090205460ff1681565b60405190151581526020016101b4565b34801561044357600080fd5b506033546001600160a01b03166102fe565b34801561046157600080fd5b506069546001600160801b03165b6040516001600160801b0390911681526020016101b4565b6103c8610495366004611572565b610b80565b3480156104a657600080fd5b506065546001600160801b031661046f565b3480156104c457600080fd5b5061021a6104d33660046117a8565b610bb1565b3480156104e457600080fd5b5060695461046f90600160801b90046001600160801b031681565b34801561050b57600080fd5b5061021a61051a36600461161c565b610d97565b34801561052b57600080fd5b506105a661053a3660046115a5565b60408051606080820183526000808352602080840182905292840181905263ffffffff94851681526067835283902083519182018452546001600160801b0381168252600160801b81046001600160401b031692820192909252600160c01b9091049092169082015290565b6040805182516001600160801b031681526020808401516001600160401b0316908201529181015163ffffffff16908201526060016101b4565b3480156105ec57600080fd5b5061021a6105fb3660046117a8565b610dc1565b34801561060c57600080fd5b506105a661061b3660046117c3565b60408051606080820183526000808352602080840182905292840181905261ffff949094168452606782529282902082519384018352546001600160801b03811684526001600160401b03600160801b82041691840191909152600160c01b900463ffffffff169082015290565b34801561069557600080fd5b5061021a6106a43660046117a8565b610deb565b3480156106b557600080fd5b5061021a6106c43660046117de565b610e64565b6106d1610e7a565b606980546001600160801b03928316600160801b029216919091179055565b336107036033546001600160a01b031690565b6001600160a01b031614610741573360009081526066602052604090205460ff166107415760405163320ae52960e01b815260040160405180910390fd5b60005b8181101561082c573683838381811061075f5761075f611808565b608002919091019150610823905061077a60208301836115a5565b61078c36849003840160208501611835565b805160208083015160409384015184516060810186526001600160801b0394851681526001600160401b0392831681850190815263ffffffff9283168288019081529783166000908152606790955295909320925183549551965194166001600160c01b031990951694909417600160801b95909116949094029390931763ffffffff60c01b1916600160c01b9190921602179055565b50600101610744565b505050565b610839610e7a565b6001600160a01b03919091166000908152606660205260409020805460ff1916911515919091179055565b336108776033546001600160a01b031690565b6001600160a01b0316146108b5573360009081526066602052604090205460ff166108b55760405163320ae52960e01b815260040160405180910390fd5b606980546001600160801b0319166001600160801b0392909216919091179055565b6108df610e7a565b6108e96000610ed4565b565b6108f3610e7a565b60005b8181101561082c5782828281811061091057610910611808565b905060400201602001602081019061092891906118ae565b606b600085858581811061093e5761093e611808565b61095492602060409092020190810191506115a5565b63ffffffff1681526020810191909152604001600020805460ff19166001836002811115610984576109846115c7565b02179055506001016108f6565b6000808461ffff16606e14806109ac57508461ffff1661279f145b806109bc57508461ffff16614eaf145b156109d9576109d08561ffff168585610f26565b91509150610a95565b8461ffff16606f14806109f157508461ffff16612794145b80610a0157508461ffff16614ea4145b15610a15576109d08561ffff168585611033565b61ffff85166000908152606b602052604090205460ff166002816002811115610a4057610a406115c7565b03610a5e57610a548661ffff168686611033565b9250925050610a95565b6001816002811115610a7257610a726115c7565b03610a8657610a548661ffff168686610f26565b610a548661ffff168686611183565b935093915050565b33610ab06033546001600160a01b031690565b6001600160a01b031614610aee573360009081526066602052604090205460ff16610aee5760405163320ae52960e01b815260040160405180910390fd5b610afe61077a60208301836115a5565b6000610b1060a08301608084016118cf565b90506000610b2460c0840160a085016115a5565b6068805463ffffffff909216600160401b026bffffffffffffffffffffffff199092166001600160401b0390941693909317179091555050565b600080600080610b6f878787611223565b935093509350935093509350935093565b600080808080610b94565b60405180910390fd5b610b9f888888611223565b94509450945094505093509350935093565b6000610bdb7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610c1a576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c2f565b336001600160a01b03821614610c2f57600080fd5b600054610100900460ff1615808015610c4f5750600054600160ff909116105b80610c695750303b158015610c69575060005460ff166001145b610ccc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b8b565b6000805460ff191660011790558015610cef576000805461ff0019166101001790555b610cf7611364565b6001600160a01b0383166000908152606660205260409020805460ff19166001179055606580546001600160801b03191668056bc75e2d6310000017905560698054602f60801b6001600160801b0391909116179055801561082c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610d9f610e7a565b606580546001600160801b0319166001600160801b0392909216919091179055565b610dc9610e7a565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b610df3610e7a565b6001600160a01b038116610e585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b8b565b610e6181610ed4565b50565b610e6c610e7a565b610e768282611393565b5050565b6033546001600160a01b031633146108e95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b8b565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b63ffffffff8381166000908152606760205260408120606854606954929384938492600160401b900490911690606490610f7090600160801b90046001600160801b031689611900565b610f7a9190611933565b610f849190611900565b8254909150600090610fa390600160c01b900463ffffffff1688611900565b83546068549192506000916001600160401b03600160801b90920482169184918691610fd091168b611947565b610fda9190611947565b610fe49190611947565b610fee9190611900565b60655485549192506001600160801b039081169161100d911683611900565b6110179190611933565b935493996001600160801b039094169850929650505050505050565b600080600061104186611440565b63ffffffff8082166000908152606760205260408120805493945092909161107191600160c01b90041688611900565b61107d90610c74611947565b825490915060009061109f90600160801b90046001600160401b031683611900565b63ffffffff808b16600090815260676020526040812080549394509290916110cf91600160c01b9004168b611900565b8254909150600090600160801b90046001600160401b03166110f18b84611947565b6110fb9190611900565b60655487549192506000916001600160801b039182169161111d911687611900565b6111279190611933565b60655485549192506000916001600160801b0391821691611149911685611900565b6111539190611933565b905060006111618284611947565b9554959f6001600160801b039096169e50949c50505050505050505050505050565b63ffffffff808416600090815260676020526040812080549192839283916111b391600160c01b90041687611900565b8254909150600090600160801b90046001600160401b03166111d58784611947565b6111df9190611900565b60655484549192506001600160801b03908116916111fe911683611900565b6112089190611933565b925492986001600160801b0390931697509195505050505050565b6000808080806112356175308961195a565b90508063ffffffff16606e148061125357508063ffffffff1661279f145b8061126557508063ffffffff16614eaf145b1561127f57611275818888610f26565b90955093506112c3565b8063ffffffff16606f148061129b57508063ffffffff16612794145b806112ad57508063ffffffff16614ea4145b156112c3576112bd818888611033565b90955093505b63ffffffff81166000908152606b602052604090205460ff1660028160028111156112f0576112f06115c7565b0361130a57611300828989611033565b909650945061133f565b600181600281111561131e5761131e6115c7565b0361132e57611300828989610f26565b611339828989611183565b90965094505b505060655460695494989397506001600160801b039081169650909316935090915050565b600054610100900460ff1661138b5760405162461bcd60e51b8152600401610b8b9061197d565b6108e9611529565b6001600160a01b0382166113ba576040516306b7a93160e41b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611407576040519150601f19603f3d011682016040523d82523d6000602084013e61140c565b606091505b505090508061082c57604051631196f20d60e21b81526001600160a01b038416600482015260248101839052604401610b8b565b60008061144f6175308461195a565b90508063ffffffff16606f036114685750606592915050565b8063ffffffff1661279403611481575061278992915050565b8063ffffffff16614ea40361149a5750614e9992915050565b600263ffffffff82166000908152606b602052604090205460ff1660028111156114c6576114c66115c7565b146114ec57604051633d0b0cf760e21b815263ffffffff84166004820152602401610b8b565b6127108163ffffffff1610156115055750606592915050565b614e208163ffffffff16101561151f57506127b192915050565b50614e9992915050565b600054610100900460ff166115505760405162461bcd60e51b8152600401610b8b9061197d565b6108e933610ed4565b803563ffffffff8116811461156d57600080fd5b919050565b60008060006060848603121561158757600080fd5b61159084611559565b95602085013595506040909401359392505050565b6000602082840312156115b757600080fd5b6115c082611559565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106115ff57634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160801b038116811461156d57600080fd5b60006020828403121561162e57600080fd5b6115c082611605565b6000806020838503121561164a57600080fd5b82356001600160401b038082111561166157600080fd5b818501915085601f83011261167557600080fd5b81358181111561168457600080fd5b8660208260071b850101111561169957600080fd5b60209290920196919550909350505050565b80356001600160a01b038116811461156d57600080fd5b600080604083850312156116d557600080fd5b6116de836116ab565b9150602083013580151581146116f357600080fd5b809150509250929050565b6000806020838503121561171157600080fd5b82356001600160401b038082111561172857600080fd5b818501915085601f83011261173c57600080fd5b81358181111561174b57600080fd5b8660208260061b850101111561169957600080fd5b803561ffff8116811461156d57600080fd5b60008060006060848603121561178757600080fd5b61159084611760565b600060c082840312156117a257600080fd5b50919050565b6000602082840312156117ba57600080fd5b6115c0826116ab565b6000602082840312156117d557600080fd5b6115c082611760565b600080604083850312156117f157600080fd5b6117fa836116ab565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b80356001600160401b038116811461156d57600080fd5b60006060828403121561184757600080fd5b604051606081018181106001600160401b038211171561187757634e487b7160e01b600052604160045260246000fd5b60405261188383611605565b81526118916020840161181e565b60208201526118a260408401611559565b60408201529392505050565b6000602082840312156118c057600080fd5b8135600381106115c057600080fd5b6000602082840312156118e157600080fd5b6115c08261181e565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611917576119176118ea565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826119425761194261191d565b500490565b80820180821115611917576119176118ea565b600063ffffffff808416806119715761197161191d565b92169190910692915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122004834225e7418a5ceaad336b075a62ac47ba66c6766856204640e08caeae392b64736f6c63430008160033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5514,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5517,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6269,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5386,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5506,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14003,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "PRICE_RATIO_DENOMINATOR",
        "offset": 0,
        "slot": "101",
        "type": "t_uint128"
      },
      {
        "astId": 14007,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "priceUpdater",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14012,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "_defaultModelPrice",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint32,t_struct(Price)18404_storage)"
      },
      {
        "astId": 14015,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "_arbitrumPriceExt",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(ArbitrumPriceExt)18416_storage"
      },
      {
        "astId": 14017,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "_nativePriceUSD",
        "offset": 0,
        "slot": "105",
        "type": "t_uint128"
      },
      {
        "astId": 14019,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "ARBITRUM_COMPRESSION_PERCENT",
        "offset": 16,
        "slot": "105",
        "type": "t_uint128"
      },
      {
        "astId": 14022,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "endpoint",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ILayerZeroEndpointV2)2728"
      },
      {
        "astId": 14027,
        "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
        "label": "eidToModelType",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint32,t_enum(ModelType)13989)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILayerZeroEndpointV2)2728": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpointV2",
        "numberOfBytes": "20"
      },
      "t_enum(ModelType)13989": {
        "encoding": "inplace",
        "label": "enum ModelType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_enum(ModelType)13989)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => enum ModelType)",
        "numberOfBytes": "32",
        "value": "t_enum(ModelType)13989"
      },
      "t_mapping(t_uint32,t_struct(Price)18404_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct ILayerZeroPriceFeed.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)18404_storage"
      },
      "t_struct(ArbitrumPriceExt)18416_storage": {
        "encoding": "inplace",
        "label": "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
        "members": [
          {
            "astId": 18413,
            "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerL2Tx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 18415,
            "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerL1CallDataByte",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Price)18404_storage": {
        "encoding": "inplace",
        "label": "struct ILayerZeroPriceFeed.Price",
        "members": [
          {
            "astId": 18399,
            "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
            "label": "priceRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 18401,
            "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPriceInUnit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 18403,
            "contract": "contracts/messagelib/contracts/PriceFeed.sol:PriceFeed",
            "label": "gasPerByte",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}