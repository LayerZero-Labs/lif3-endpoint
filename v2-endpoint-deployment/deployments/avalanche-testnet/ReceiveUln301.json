{
  "address": "0xD4393F73658adbdaE9fF0279e4C162935a4d7356",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_localEid",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressCast_InvalidSizeForAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressSizeConfig_AddressSizeAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressSizeConfig_InvalidAddressSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_MessageLib_InvalidExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_MessageLib_OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_MessageLib_OnlyExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_AtLeastOneDVN",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "configType",
          "type": "uint256"
        }
      ],
      "name": "LZ_ULN_InvalidConfigType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidConfirmations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidEid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidOptionalDVNCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidOptionalDVNThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidPacketHeader",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidPacketVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_InvalidRequiredDVNCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_Unsorted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "LZ_ULN_UnsupportedEid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LZ_ULN_Verifying",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "eid",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "AddressSizeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct SetDefaultExecutorParam[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "DefaultExecutorsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "confirmations",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "requiredDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNThreshold",
                  "type": "uint8"
                },
                {
                  "internalType": "address[]",
                  "name": "requiredDVNs",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "optionalDVNs",
                  "type": "address[]"
                }
              ],
              "internalType": "struct UlnConfig",
              "name": "config",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct SetDefaultUlnConfigParam[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "DefaultUlnConfigsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "ExecutorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "srcAddress",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidDst",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "PacketDelivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dvn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        }
      ],
      "name": "PayloadVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "indexed": false,
          "internalType": "struct UlnConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "UlnConfigSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "addressSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_localEid",
          "type": "uint32"
        }
      ],
      "name": "assertHeader",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packet",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        }
      ],
      "name": "commitVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "defaultExecutors",
      "outputs": [
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "executors",
      "outputs": [
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        }
      ],
      "name": "getAppUlnConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        }
      ],
      "name": "getExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        }
      ],
      "name": "getUlnConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfig",
          "name": "rtnConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "dvn",
          "type": "address"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "submitted",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "confirmations",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setAddressSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "executor",
              "type": "address"
            }
          ],
          "internalType": "struct SetDefaultExecutorParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDefaultExecutors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "confirmations",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "requiredDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNCount",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "optionalDVNThreshold",
                  "type": "uint8"
                },
                {
                  "internalType": "address[]",
                  "name": "requiredDVNs",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "optionalDVNs",
                  "type": "address[]"
                }
              ],
              "internalType": "struct UlnConfig",
              "name": "config",
              "type": "tuple"
            }
          ],
          "internalType": "struct SetDefaultUlnConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDefaultUlnConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "requiredDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalDVNThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "requiredDVNs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalDVNs",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfig",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verifiable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endpointVersion",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dc9d53be34da32ba523b6db9d6f483399900ab2d5cc32f77e49b3176ab1a204",
  "receipt": {
    "to": null,
    "from": "0x462c2AE39B6B0bdB950Deb2BC82082308cF8cB10",
    "contractAddress": "0xD4393F73658adbdaE9fF0279e4C162935a4d7356",
    "transactionIndex": 0,
    "gasUsed": "2381709",
    "logsBloom": "0x
    "blockHash": "0xc528171fe405a004842bfea7bd415f10d1b02d71201c02f9cd2fbfb6881a05d2",
    "transactionHash": "0x3dc9d53be34da32ba523b6db9d6f483399900ab2d5cc32f77e49b3176ab1a204",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 35722496,
        "transactionHash": "0x3dc9d53be34da32ba523b6db9d6f483399900ab2d5cc32f77e49b3176ab1a204",
        "address": "0xD4393F73658adbdaE9fF0279e4C162935a4d7356",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000462c2ae39b6b0bdb950deb2bc82082308cf8cb10"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc528171fe405a004842bfea7bd415f10d1b02d71201c02f9cd2fbfb6881a05d2"
      }
    ],
    "blockNumber": 35722496,
    "cumulativeGasUsed": "2381709",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000001",
    10106
  ],
  "numDeployments": 1,
  "solcInputHash": "df45c5d73ee7212b45689d2cdbb787f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_localEid\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressCast_InvalidSizeForAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressSizeConfig_AddressSizeAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressSizeConfig_InvalidAddressSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_MessageLib_InvalidExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_MessageLib_OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_MessageLib_OnlyExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_AtLeastOneDVN\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configType\",\"type\":\"uint256\"}],\"name\":\"LZ_ULN_InvalidConfigType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidConfirmations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidEid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidOptionalDVNCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidOptionalDVNThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidPacketHeader\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidPacketVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_InvalidRequiredDVNCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_Unsorted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"LZ_ULN_UnsupportedEid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LZ_ULN_Verifying\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"eid\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"AddressSizeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct SetDefaultExecutorParam[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"DefaultExecutorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct SetDefaultUlnConfigParam[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"DefaultUlnConfigsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidDst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PacketDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dvn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"}],\"name\":\"PayloadVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct UlnConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"UlnConfigSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"addressSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_localEid\",\"type\":\"uint32\"}],\"name\":\"assertHeader\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packet\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"commitVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"defaultExecutors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"executors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"}],\"name\":\"getAppUlnConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"}],\"name\":\"getExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"}],\"name\":\"getUlnConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"rtnConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"dvn\",\"type\":\"address\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"submitted\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setAddressSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"internalType\":\"struct SetDefaultExecutorParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDefaultExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct SetDefaultUlnConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDefaultUlnConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"requiredDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalDVNThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"requiredDVNs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalDVNs\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verifiable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endpointVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ULN301 will be deployed on EndpointV1 and is for backward compatibility with ULN302 on EndpointV2. 301 can talk to both 301 and 302This is a gluing contract. It simply parses the requests and forward to the super.impl() accordingly.In this case, it combines the logic of ReceiveUlnBase and ReceiveLibBaseE1\",\"kind\":\"dev\",\"methods\":{\"commitVerification(bytes,uint256)\":{\"details\":\"in 301, this is equivalent to execution as in Endpoint V2dont need to check endpoint verifiable here to save gas, as it will reverts if not verifiable.\"},\"getAppUlnConfig(address,uint32)\":{\"details\":\"Get the uln config without the default config for the given remoteEid.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])\":{\"details\":\"about the DEFAULT ULN config 1) its values are all LITERAL (e.g. 0 is 0). whereas in the oapp ULN config, 0 (default value) points to the default ULN config     this design enables the oapp to point to DEFAULT config without explicitly setting the config 2) its configuration is more restrictive than the oapp ULN config that     a) it must not use NIL value, where NIL is used only by oapps to indicate the LITERAL 0     b) it must have at least one DVN\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol\":\"ReceiveUln301\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Packet } from \\\"../../interfaces/ISendLib.sol\\\";\\nimport { AddressCast } from \\\"../../libs/AddressCast.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    uint8 internal constant PACKET_VERSION = 1;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint256 private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint256 private constant SRC_EID_OFFSET = 9;\\n    uint256 private constant SENDER_OFFSET = 13;\\n    uint256 private constant DST_EID_OFFSET = 45;\\n    uint256 private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint256 private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            PACKET_VERSION,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                PACKET_VERSION,\\n                _packet.nonce,\\n                _packet.srcEid,\\n                _packet.sender.toBytes32(),\\n                _packet.dstEid,\\n                _packet.receiver\\n            );\\n    }\\n\\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_packet.guid, _packet.message);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0xc84cf1bf785977fe1fbe7566eef902c2db68d0e163813ebe6c34921754802680\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xb6a446c0b622566f8c2e2ae4c32208bcc3f815c5f5657a27fa48d583e31f7b7d\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/MessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\n/// @dev simply a container of endpoint address and local eid\\nabstract contract MessageLibBase {\\n    address internal immutable endpoint;\\n    uint32 internal immutable localEid;\\n\\n    error LZ_MessageLib_OnlyEndpoint();\\n\\n    modifier onlyEndpoint() {\\n        if (endpoint != msg.sender) revert LZ_MessageLib_OnlyEndpoint();\\n        _;\\n    }\\n\\n    constructor(address _endpoint, uint32 _localEid) {\\n        endpoint = _endpoint;\\n        localEid = _localEid;\\n    }\\n}\\n\",\"keccak256\":\"0x14899a4398251439938d6ef8a15ea8c6acdddc98a7b0066d7e63676192dea0d1\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/ReceiveUlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport { UlnBase, UlnConfig } from \\\"./UlnBase.sol\\\";\\n\\nstruct Verification {\\n    bool submitted;\\n    uint64 confirmations;\\n}\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\nabstract contract ReceiveUlnBase is UlnBase {\\n    using PacketV1Codec for bytes;\\n\\n    mapping(bytes32 headerHash => mapping(bytes32 payloadHash => mapping(address dvn => Verification)))\\n        public hashLookup;\\n\\n    event PayloadVerified(address dvn, bytes header, uint256 confirmations, bytes32 proofHash);\\n\\n    error LZ_ULN_InvalidPacketHeader();\\n    error LZ_ULN_InvalidPacketVersion();\\n    error LZ_ULN_InvalidEid();\\n    error LZ_ULN_Verifying();\\n\\n    // ============================ External ===================================\\n    function verifiable(\\n        UlnConfig memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) external view returns (bool) {\\n        return _checkVerifiable(_config, _headerHash, _payloadHash);\\n    }\\n\\n    function assertHeader(bytes calldata _packetHeader, uint32 _localEid) external pure {\\n        _assertHeader(_packetHeader, _localEid);\\n    }\\n\\n    // ============================ Internal ===================================\\n    /// @dev per DVN signing function\\n    function _verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) internal {\\n        hashLookup[keccak256(_packetHeader)][_payloadHash][msg.sender] = Verification(true, _confirmations);\\n        emit PayloadVerified(msg.sender, _packetHeader, _confirmations, _payloadHash);\\n    }\\n\\n    function _verified(\\n        address _dvn,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash,\\n        uint64 _requiredConfirmation\\n    ) internal view returns (bool verified) {\\n        Verification memory verification = hashLookup[_headerHash][_payloadHash][_dvn];\\n        // return true if the dvn has signed enough confirmations\\n        verified = verification.submitted && verification.confirmations >= _requiredConfirmation;\\n    }\\n\\n    function _verifyAndReclaimStorage(UlnConfig memory _config, bytes32 _headerHash, bytes32 _payloadHash) internal {\\n        if (!_checkVerifiable(_config, _headerHash, _payloadHash)) {\\n            revert LZ_ULN_Verifying();\\n        }\\n\\n        // iterate the required DVNs\\n        if (_config.requiredDVNCount > 0) {\\n            for (uint8 i = 0; i < _config.requiredDVNCount; ++i) {\\n                delete hashLookup[_headerHash][_payloadHash][_config.requiredDVNs[i]];\\n            }\\n        }\\n\\n        // iterate the optional DVNs\\n        if (_config.optionalDVNCount > 0) {\\n            for (uint8 i = 0; i < _config.optionalDVNCount; ++i) {\\n                delete hashLookup[_headerHash][_payloadHash][_config.optionalDVNs[i]];\\n            }\\n        }\\n    }\\n\\n    function _assertHeader(bytes calldata _packetHeader, uint32 _localEid) internal pure {\\n        // assert packet header is of right size 81\\n        if (_packetHeader.length != 81) revert LZ_ULN_InvalidPacketHeader();\\n        // assert packet header version is the same as ULN\\n        if (_packetHeader.version() != PacketV1Codec.PACKET_VERSION) revert LZ_ULN_InvalidPacketVersion();\\n        // assert the packet is for this endpoint\\n        if (_packetHeader.dstEid() != _localEid) revert LZ_ULN_InvalidEid();\\n    }\\n\\n    /// @dev for verifiable view function\\n    /// @dev checks if this verification is ready to be committed to the endpoint\\n    function _checkVerifiable(\\n        UlnConfig memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) internal view returns (bool) {\\n        // iterate the required DVNs\\n        if (_config.requiredDVNCount > 0) {\\n            for (uint8 i = 0; i < _config.requiredDVNCount; ++i) {\\n                if (!_verified(_config.requiredDVNs[i], _headerHash, _payloadHash, _config.confirmations)) {\\n                    // return if any of the required DVNs haven't signed\\n                    return false;\\n                }\\n            }\\n            if (_config.optionalDVNCount == 0) {\\n                // returns early if all required DVNs have signed and there are no optional DVNs\\n                return true;\\n            }\\n        }\\n\\n        // then it must require optional validations\\n        uint8 threshold = _config.optionalDVNThreshold;\\n        for (uint8 i = 0; i < _config.optionalDVNCount; ++i) {\\n            if (_verified(_config.optionalDVNs[i], _headerHash, _payloadHash, _config.confirmations)) {\\n                // increment the optional count if the optional DVN has signed\\n                threshold--;\\n                if (threshold == 0) {\\n                    // early return if the optional threshold has hit\\n                    return true;\\n                }\\n            }\\n        }\\n\\n        // return false as a catch-all\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x36c93de122bbb74ae31e3eacf567c0a3bc649ed3ebb2766c76dfa93aebcace44\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/UlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// the formal properties are documented in the setter functions\\nstruct UlnConfig {\\n    uint64 confirmations;\\n    // we store the length of required DVNs and optional DVNs instead of using DVN.length directly to save gas\\n    uint8 requiredDVNCount; // 0 indicate DEFAULT, NIL_DVN_COUNT indicate NONE (to override the value of default)\\n    uint8 optionalDVNCount; // 0 indicate DEFAULT, NIL_DVN_COUNT indicate NONE (to override the value of default)\\n    uint8 optionalDVNThreshold; // (0, optionalDVNCount]\\n    address[] requiredDVNs; // no duplicates. sorted an an ascending order. allowed overlap with optionalDVNs\\n    address[] optionalDVNs; // no duplicates. sorted an an ascending order. allowed overlap with requiredDVNs\\n}\\n\\nstruct SetDefaultUlnConfigParam {\\n    uint32 eid;\\n    UlnConfig config;\\n}\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\nabstract contract UlnBase is Ownable {\\n    address private constant DEFAULT_CONFIG = address(0);\\n    // reserved values for\\n    uint8 internal constant DEFAULT = 0;\\n    uint8 internal constant NIL_DVN_COUNT = type(uint8).max;\\n    uint64 internal constant NIL_CONFIRMATIONS = type(uint64).max;\\n    // 127 to prevent total number of DVNs (127 * 2) exceeding uint8.max (255)\\n    // by limiting the total size, it would help constraint the design of DVNOptions\\n    uint8 private constant MAX_COUNT = (type(uint8).max - 1) / 2;\\n\\n    mapping(address oapp => mapping(uint32 eid => UlnConfig)) internal ulnConfigs;\\n\\n    error LZ_ULN_Unsorted();\\n    error LZ_ULN_InvalidRequiredDVNCount();\\n    error LZ_ULN_InvalidOptionalDVNCount();\\n    error LZ_ULN_AtLeastOneDVN();\\n    error LZ_ULN_InvalidOptionalDVNThreshold();\\n    error LZ_ULN_InvalidConfirmations();\\n    error LZ_ULN_UnsupportedEid(uint32 eid);\\n\\n    event DefaultUlnConfigsSet(SetDefaultUlnConfigParam[] params);\\n    event UlnConfigSet(address oapp, uint32 eid, UlnConfig config);\\n\\n    // ============================ OnlyOwner ===================================\\n\\n    /// @dev about the DEFAULT ULN config\\n    /// 1) its values are all LITERAL (e.g. 0 is 0). whereas in the oapp ULN config, 0 (default value) points to the default ULN config\\n    ///     this design enables the oapp to point to DEFAULT config without explicitly setting the config\\n    /// 2) its configuration is more restrictive than the oapp ULN config that\\n    ///     a) it must not use NIL value, where NIL is used only by oapps to indicate the LITERAL 0\\n    ///     b) it must have at least one DVN\\n    function setDefaultUlnConfigs(SetDefaultUlnConfigParam[] calldata _params) external onlyOwner {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            SetDefaultUlnConfigParam calldata param = _params[i];\\n\\n            // 2.a must not use NIL\\n            if (param.config.requiredDVNCount == NIL_DVN_COUNT) revert LZ_ULN_InvalidRequiredDVNCount();\\n            if (param.config.optionalDVNCount == NIL_DVN_COUNT) revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (param.config.confirmations == NIL_CONFIRMATIONS) revert LZ_ULN_InvalidConfirmations();\\n\\n            // 2.b must have at least one dvn\\n            _assertAtLeastOneDVN(param.config);\\n\\n            _setConfig(DEFAULT_CONFIG, param.eid, param.config);\\n        }\\n        emit DefaultUlnConfigsSet(_params);\\n    }\\n\\n    // ============================ View ===================================\\n    // @dev assuming most oapps use default, we get default as memory and custom as storage to save gas\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) public view returns (UlnConfig memory rtnConfig) {\\n        UlnConfig storage defaultConfig = ulnConfigs[DEFAULT_CONFIG][_remoteEid];\\n        UlnConfig storage customConfig = ulnConfigs[_oapp][_remoteEid];\\n\\n        // if confirmations is 0, use default\\n        uint64 confirmations = customConfig.confirmations;\\n        if (confirmations == DEFAULT) {\\n            rtnConfig.confirmations = defaultConfig.confirmations;\\n        } else if (confirmations != NIL_CONFIRMATIONS) {\\n            // if confirmations is uint64.max, no block confirmations required\\n            rtnConfig.confirmations = confirmations;\\n        } // else do nothing, rtnConfig.confirmation is 0\\n\\n        if (customConfig.requiredDVNCount == DEFAULT) {\\n            if (defaultConfig.requiredDVNCount > 0) {\\n                // copy only if count > 0. save gas\\n                rtnConfig.requiredDVNs = defaultConfig.requiredDVNs;\\n                rtnConfig.requiredDVNCount = defaultConfig.requiredDVNCount;\\n            } // else, do nothing\\n        } else {\\n            if (customConfig.requiredDVNCount != NIL_DVN_COUNT) {\\n                rtnConfig.requiredDVNs = customConfig.requiredDVNs;\\n                rtnConfig.requiredDVNCount = customConfig.requiredDVNCount;\\n            } // else, do nothing\\n        }\\n\\n        if (customConfig.optionalDVNCount == DEFAULT) {\\n            if (defaultConfig.optionalDVNCount > 0) {\\n                // copy only if count > 0. save gas\\n                rtnConfig.optionalDVNs = defaultConfig.optionalDVNs;\\n                rtnConfig.optionalDVNCount = defaultConfig.optionalDVNCount;\\n                rtnConfig.optionalDVNThreshold = defaultConfig.optionalDVNThreshold;\\n            }\\n        } else {\\n            if (customConfig.optionalDVNCount != NIL_DVN_COUNT) {\\n                rtnConfig.optionalDVNs = customConfig.optionalDVNs;\\n                rtnConfig.optionalDVNCount = customConfig.optionalDVNCount;\\n                rtnConfig.optionalDVNThreshold = customConfig.optionalDVNThreshold;\\n            }\\n        }\\n\\n        // the final value must have at least one dvn\\n        // it is possible that some default config result into 0 dvns\\n        _assertAtLeastOneDVN(rtnConfig);\\n    }\\n\\n    /// @dev Get the uln config without the default config for the given remoteEid.\\n    function getAppUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfig memory) {\\n        return ulnConfigs[_oapp][_remoteEid];\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _setUlnConfig(uint32 _remoteEid, address _oapp, UlnConfig memory _param) internal {\\n        _setConfig(_oapp, _remoteEid, _param);\\n\\n        // get ULN config again as a catch all to ensure the config is valid\\n        getUlnConfig(_oapp, _remoteEid);\\n        emit UlnConfigSet(_oapp, _remoteEid, _param);\\n    }\\n\\n    /// @dev a supported Eid must have a valid default uln config, which has at least one dvn\\n    function _isSupportedEid(uint32 _remoteEid) internal view returns (bool) {\\n        UlnConfig storage defaultConfig = ulnConfigs[DEFAULT_CONFIG][_remoteEid];\\n        return defaultConfig.requiredDVNCount > 0 || defaultConfig.optionalDVNThreshold > 0;\\n    }\\n\\n    function _assertSupportedEid(uint32 _remoteEid) internal view {\\n        if (!_isSupportedEid(_remoteEid)) revert LZ_ULN_UnsupportedEid(_remoteEid);\\n    }\\n\\n    // ============================ Private ===================================\\n\\n    function _assertAtLeastOneDVN(UlnConfig memory _config) private pure {\\n        if (_config.requiredDVNCount == 0 && _config.optionalDVNThreshold == 0) revert LZ_ULN_AtLeastOneDVN();\\n    }\\n\\n    /// @dev this private function is used in both setDefaultUlnConfigs and setUlnConfig\\n    function _setConfig(address _oapp, uint32 _eid, UlnConfig memory _param) private {\\n        // @dev required dvns\\n        // if dvnCount == NONE, dvns list must be empty\\n        // if dvnCount == DEFAULT, dvn list must be empty\\n        // otherwise, dvnList.length == dvnCount and assert the list is valid\\n        if (_param.requiredDVNCount == NIL_DVN_COUNT || _param.requiredDVNCount == DEFAULT) {\\n            if (_param.requiredDVNs.length != 0) revert LZ_ULN_InvalidRequiredDVNCount();\\n        } else {\\n            if (_param.requiredDVNs.length != _param.requiredDVNCount || _param.requiredDVNCount > MAX_COUNT)\\n                revert LZ_ULN_InvalidRequiredDVNCount();\\n            _assertNoDuplicates(_param.requiredDVNs);\\n        }\\n\\n        // @dev optional dvns\\n        // if optionalDVNCount == NONE, optionalDVNs list must be empty and threshold must be 0\\n        // if optionalDVNCount == DEFAULT, optionalDVNs list must be empty and threshold must be 0\\n        // otherwise, optionalDVNs.length == optionalDVNCount, threshold > 0 && threshold <= optionalDVNCount and assert the list is valid\\n\\n        // example use case: an oapp uses the DEFAULT 'required' but\\n        //     a) use a custom 1/1 dvn (practically a required dvn), or\\n        //     b) use a custom 2/3 dvn\\n        if (_param.optionalDVNCount == NIL_DVN_COUNT || _param.optionalDVNCount == DEFAULT) {\\n            if (_param.optionalDVNs.length != 0) revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (_param.optionalDVNThreshold != 0) revert LZ_ULN_InvalidOptionalDVNThreshold();\\n        } else {\\n            if (_param.optionalDVNs.length != _param.optionalDVNCount || _param.optionalDVNCount > MAX_COUNT)\\n                revert LZ_ULN_InvalidOptionalDVNCount();\\n            if (_param.optionalDVNThreshold == 0 || _param.optionalDVNThreshold > _param.optionalDVNCount)\\n                revert LZ_ULN_InvalidOptionalDVNThreshold();\\n            _assertNoDuplicates(_param.optionalDVNs);\\n        }\\n        // don't assert valid count here, as it needs to be validated along side default config\\n\\n        ulnConfigs[_oapp][_eid] = _param;\\n    }\\n\\n    function _assertNoDuplicates(address[] memory _dvns) private pure {\\n        address lastDVN = address(0);\\n        for (uint256 i = 0; i < _dvns.length; i++) {\\n            address dvn = _dvns[i];\\n            if (dvn <= lastDVN) revert LZ_ULN_Unsorted(); // to ensure no duplicates\\n            lastDVN = dvn;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdb1d04f4996c0a9d35abfbfcf10d978da638885eb77d0a9dc35cea5993074e3\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/uln301/AddressSizeConfig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract AddressSizeConfig is Ownable {\\n    // EndpointV1 is using bytes as address. this map is for address length assertion\\n    mapping(uint32 dstEid => uint256 size) public addressSizes;\\n\\n    event AddressSizeSet(uint16 eid, uint256 size);\\n\\n    error AddressSizeConfig_InvalidAddressSize();\\n    error AddressSizeConfig_AddressSizeAlreadySet();\\n\\n    function setAddressSize(uint16 _eid, uint256 _size) external onlyOwner {\\n        if (_size > 32) revert AddressSizeConfig_InvalidAddressSize();\\n        if (addressSizes[_eid] != 0) revert AddressSizeConfig_AddressSizeAlreadySet();\\n        addressSizes[_eid] = _size;\\n        emit AddressSizeSet(_eid, _size);\\n    }\\n}\\n\",\"keccak256\":\"0x29ceae48f3d54336909faf8c3534552bc787b76d1acd60d22f1ed79afeb328a5\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/uln301/ReceiveLibBaseE1.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { ILayerZeroEndpoint } from \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { AddressSizeConfig } from \\\"./AddressSizeConfig.sol\\\";\\nimport { MessageLibBase } from \\\"../../MessageLibBase.sol\\\";\\n\\n// only receiver function from \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroMessagingLibrary.sol\\\"\\n// because we are separating the send and receive libraries\\ninterface ILayerZeroReceiveLibrary {\\n    // setConfig / getConfig are User Application (UA) functions to specify Oracle, Relayer, blockConfirmations, libraryVersion\\n    function setConfig(uint16 _chainId, address _userApplication, uint256 _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint256 _configType\\n    ) external view returns (bytes memory);\\n}\\n\\nstruct SetDefaultExecutorParam {\\n    uint32 eid;\\n    address executor;\\n}\\n\\n/// @dev receive-side message library base contract on endpoint v1.\\n/// design:\\n/// 1/ it provides an internal execute function that calls the endpoint. It enforces the path definition on V1.\\n/// 2/ it provides interfaces to configure executors that is whitelisted to execute the msg to prevent grieving\\nabstract contract ReceiveLibBaseE1 is MessageLibBase, AddressSizeConfig, ILayerZeroReceiveLibrary {\\n    using AddressCast for bytes32;\\n\\n    mapping(address oapp => mapping(uint32 eid => address executor)) public executors;\\n    mapping(uint32 eid => address executor) public defaultExecutors;\\n\\n    // this event is the same as the PacketDelivered event on EndpointV2\\n    event PacketDelivered(Origin origin, address receiver);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes32 srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event DefaultExecutorsSet(SetDefaultExecutorParam[] params);\\n    event ExecutorSet(address oapp, uint32 eid, address executor);\\n\\n    error LZ_MessageLib_InvalidExecutor();\\n    error LZ_MessageLib_OnlyExecutor();\\n\\n    constructor(address _endpoint, uint32 _localEid) MessageLibBase(_endpoint, _localEid) {}\\n\\n    function setDefaultExecutors(SetDefaultExecutorParam[] calldata _params) external onlyOwner {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            SetDefaultExecutorParam calldata param = _params[i];\\n            if (param.executor == address(0x0)) revert LZ_MessageLib_InvalidExecutor();\\n            defaultExecutors[param.eid] = param.executor;\\n        }\\n        emit DefaultExecutorsSet(_params);\\n    }\\n\\n    function getExecutor(address _oapp, uint32 _remoteEid) public view returns (address) {\\n        address executor = executors[_oapp][_remoteEid];\\n        return executor != address(0x0) ? executor : defaultExecutors[_remoteEid];\\n    }\\n\\n    function _setExecutor(uint32 _remoteEid, address _oapp, address _executor) internal {\\n        executors[_oapp][_remoteEid] = _executor;\\n        emit ExecutorSet(_oapp, _remoteEid, _executor);\\n    }\\n\\n    /// @dev this function change pack the path as required for EndpointV1\\n    function _execute(\\n        uint16 _srcEid,\\n        bytes32 _sender,\\n        address _receiver,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        uint256 _gasLimit\\n    ) internal {\\n        // if the executor is malicious, it can make the msg as a storedPayload or fail in the nonBlockingApp\\n        // which might result in unintended behaviour and risks, like grieving.\\n        // to err on the safe side, we should assert the executor here.\\n        if (msg.sender != getExecutor(_receiver, _srcEid)) revert LZ_MessageLib_OnlyExecutor();\\n\\n        if (_receiver.code.length == 0) {\\n            /// on chains where EOA has no codes, it will early return and emit InvalidDst event\\n            // on chains where all address have codes, this will be skipped\\n            emit InvalidDst(_srcEid, _sender, _receiver, _nonce, keccak256(_message));\\n            return;\\n        }\\n\\n        bytes memory pathData = abi.encodePacked(_sender.toBytes(addressSizes[_srcEid]), _receiver);\\n        ILayerZeroEndpoint(endpoint).receivePayload(_srcEid, pathData, _receiver, _nonce, _gasLimit, _message);\\n\\n        Origin memory origin = Origin(_srcEid, _sender, _nonce);\\n        emit PacketDelivered(origin, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0x674ad94e14af7eb7725eb19f822c5737c089f7cfd40b8c9f8b680b9a9a3f3a69\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { PacketV1Codec } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport { IUltraLightNode301 } from \\\"./interfaces/IUltraLightNode301.sol\\\";\\nimport { ReceiveLibBaseE1 } from \\\"./ReceiveLibBaseE1.sol\\\";\\nimport { ReceiveUlnBase } from \\\"../ReceiveUlnBase.sol\\\";\\nimport { UlnConfig } from \\\"../UlnBase.sol\\\";\\n\\n/// @dev ULN301 will be deployed on EndpointV1 and is for backward compatibility with ULN302 on EndpointV2. 301 can talk to both 301 and 302\\n/// @dev This is a gluing contract. It simply parses the requests and forward to the super.impl() accordingly.\\n/// @dev In this case, it combines the logic of ReceiveUlnBase and ReceiveLibBaseE1\\ncontract ReceiveUln301 is IUltraLightNode301, ReceiveUlnBase, ReceiveLibBaseE1 {\\n    using PacketV1Codec for bytes;\\n    using SafeCast for uint32; // for chain ID uint32 to uint16 conversion\\n\\n    uint256 internal constant CONFIG_TYPE_EXECUTOR = 1;\\n    uint256 internal constant CONFIG_TYPE_ULN = 2;\\n\\n    error LZ_ULN_InvalidConfigType(uint256 configType);\\n\\n    constructor(address _endpoint, uint32 _localEid) ReceiveLibBaseE1(_endpoint, _localEid) {}\\n\\n    // ============================ OnlyEndpoint ===================================\\n\\n    function setConfig(\\n        uint16 _eid,\\n        address _oapp,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external override onlyEndpoint {\\n        _assertSupportedEid(_eid);\\n        if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            _setExecutor(_eid, _oapp, abi.decode(_config, (address)));\\n        } else if (_configType == CONFIG_TYPE_ULN) {\\n            _setUlnConfig(_eid, _oapp, abi.decode(_config, (UlnConfig)));\\n        } else {\\n            revert LZ_ULN_InvalidConfigType(_configType);\\n        }\\n    }\\n\\n    // ============================ External ===================================\\n\\n    /// @dev in 301, this is equivalent to execution as in Endpoint V2\\n    /// @dev dont need to check endpoint verifiable here to save gas, as it will reverts if not verifiable.\\n    function commitVerification(bytes calldata _packet, uint256 _gasLimit) external {\\n        bytes calldata header = _packet.header();\\n        _assertHeader(header, localEid);\\n\\n        // cache these values to save gas\\n        address receiver = _packet.receiverB20();\\n        uint16 srcEid = _packet.srcEid().toUint16();\\n\\n        UlnConfig memory config = getUlnConfig(receiver, srcEid);\\n        _verifyAndReclaimStorage(config, keccak256(header), _packet.payloadHash());\\n\\n        // endpoint will revert if nonce != ++inboundNonce\\n        _execute(srcEid, _packet.sender(), receiver, _packet.nonce(), _packet.message(), _gasLimit);\\n    }\\n\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external {\\n        _verify(_packetHeader, _payloadHash, _confirmations);\\n    }\\n\\n    // ============================ View ===================================\\n\\n    function getConfig(uint16 _eid, address _oapp, uint256 _configType) external view override returns (bytes memory) {\\n        if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            return abi.encode(getExecutor(_oapp, _eid));\\n        } else if (_configType == CONFIG_TYPE_ULN) {\\n            return abi.encode(getUlnConfig(_oapp, _eid));\\n        } else {\\n            revert LZ_ULN_InvalidConfigType(_configType);\\n        }\\n    }\\n\\n    function version() external pure returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (3, 0, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x3075046cfd3bf29626b8c34d905a3e864105ea0772c4115878d2d72eaa1d5a9c\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/uln301/interfaces/IUltraLightNode301.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IUltraLightNode301 {\\n    function commitVerification(bytes calldata _packet, uint256 _gasLimit) external;\\n}\\n\",\"keccak256\":\"0x47f8ebeaa7d96a6f337a18c46e3c532da578c7cb0a13fb6e6f014286b991902f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002acd38038062002acd8339810160408190526200003491620000b2565b6001600160a01b03821660805263ffffffff811660a0528181620000583362000062565b5050505062000104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000c657600080fd5b82516001600160a01b0381168114620000de57600080fd5b602084015190925063ffffffff81168114620000f957600080fd5b809150509250929050565b60805160a05161299c620001316000396000610c70015260008181610ddf0152611823015261299c6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636d26e5d0116100ad578063c40ff83511610071578063c40ff83514610329578063e084d9521461033c578063e65106f81461035f578063f2fde38b14610372578063f8e1734c1461038557600080fd5b80636d26e5d0146102b6578063715018a6146102c95780638da5cb5b146102d15780639653a704146102e257806398678a11146102f557600080fd5b806339e928a8116100f457806339e928a8146101ed5780633c782a521461020057806343ea4fa91461026357806352d2871f1461027657806354fd4d501461029657600080fd5b80630223536e146101315780630f8355c01461014657806329460b0b146101795780632fed39ae1461018c57806339e3f938146101cd575b600080fd5b61014461013f366004611d4a565b610398565b005b610166610154366004611dba565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b610144610187366004611dd5565b6103aa565b6101b561019a366004611dba565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610170565b6101e06101db366004611e5e565b610542565b6040516101709190611f49565b6101446101fb366004611f5c565b61067e565b61024461020e366004611fbe565b600260209081526000938452604080852082529284528284209052825290205460ff81169061010090046001600160401b031682565b6040805192151583526001600160401b03909116602083015201610170565b6101e0610271366004611e5e565b610781565b610289610284366004612009565b610a8d565b6040516101709190612098565b604080516003815260006020820152600191810191909152606001610170565b6101446102c43660046120ab565b610b1f565b610144610bc6565b6000546001600160a01b03166101b5565b6101b56102f0366004611e5e565b610bda565b6101b5610303366004611e5e565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6101446103373660046120d5565b610c3b565b61034f61034a3660046122cf565b610c4b565b6040519015158152602001610170565b61014461036d36600461231c565b610c58565b610144610380366004612367565b610d64565b610144610393366004612384565b610ddd565b6103a484848484610e9f565b50505050565b6103b2610f85565b60005b8181101561050457368383838181106103d0576103d06123f4565b90506020028101906103e2919061240a565b905060ff6103f3602083018361242a565b610404906040810190602001612440565b60ff1603610425576040516341d50bed60e11b815260040160405180910390fd5b60ff610434602083018361242a565b610445906060810190604001612440565b60ff16036104665760405163211089b360e11b815260040160405180910390fd5b6001600160401b0361047b602083018361242a565b61048990602081019061245b565b6001600160401b0316036104b05760405163281b33d760e11b815260040160405180910390fd5b6104ce6104c0602083018361242a565b6104c990612476565b610fdf565b6104fb60006104e06020840184611dba565b6104ed602085018561242a565b6104f690612476565b611017565b506001016103b5565b507faaf3aaa0c11056e86ac56eb653e25b005ca1a7d4dcd21ba24647f7ab63f3b5608282604051610536929190612508565b60405180910390a15050565b61054a611c34565b6001600160a01b038316600090815260016020818152604080842063ffffffff87168552825292839020835160c08101855281546001600160401b038116825260ff600160401b8204811683860152600160481b8204811683880152600160501b909104166060820152928101805485518185028101850190965280865293949193608086019383018282801561060a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105ec575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561066c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161064e575b50505050508152505090505b92915050565b610686610f85565b60005b8181101561074f57368383838181106106a4576106a46123f4565b905060400201905060006001600160a01b03168160200160208101906106ca9190612367565b6001600160a01b0316036106f157604051631074e82d60e11b815260040160405180910390fd5b6107016040820160208301612367565b600560006107126020850185611dba565b63ffffffff168152602081019190915260400160002080546001600160a01b0319166001600160a01b039290921691909117905550600101610689565b507f2a2676897ce6724d11fb8016f9bcdfe9fe564bc3524411d5df7914aac78aeeb3828260405161053692919061264a565b610789611c34565b63ffffffff821660008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260408083206001600160a01b03881684526001835281842094845293909152902080546001600160401b0316806107fe5782546001600160401b0316845261081b565b6001600160401b038181161461081b576001600160401b03811684525b8154600160401b900460ff166108b5578254600160401b900460ff16156108b0578260010180548060200260200160405190810160405280929190818152602001828054801561089457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610876575b505050505060808501528254600160401b900460ff1660208501525b61093c565b8154600160401b900460ff9081161461093c578160010180548060200260200160405190810160405280929190818152602001828054801561092057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610902575b505050505060808501528154600160401b900460ff1660208501525b8154600160481b900460ff166109e5578254600160481b900460ff16156109e057826002018054806020026020016040519081016040528092919081815260200182805480156109b557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610997575b505050505060a0850152825460ff600160481b820481166040870152600160501b9091041660608501525b610a7b565b8154600160481b900460ff90811614610a7b5781600201805480602002602001604051908101604052809291908181526020018280548015610a5057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a32575b505050505060a0850152815460ff600160481b820481166040870152600160501b9091041660608501525b610a8484610fdf565b50505092915050565b606060018203610ad157610aa5838561ffff16610bda565b604080516001600160a01b039092166020830152015b6040516020818303038152906040529050610b18565b60028203610af757610ae7838561ffff16610781565b604051602001610abb9190611f49565b604051630c509b5b60e01b8152600481018390526024015b60405180910390fd5b9392505050565b610b27610f85565b6020811115610b4957604051636f85e1b760e01b815260040160405180910390fd5b61ffff821660009081526003602052604090205415610b7b5760405163e4df7bef60e01b815260040160405180910390fd5b61ffff8216600081815260036020908152604091829020849055815192835282018390527ee9ab3709e58edd0db46318d63673d8ae4681fa3e51d9f9dc07cde5109ff7489101610536565b610bce610f85565b610bd860006112b0565b565b6001600160a01b03808316600090815260046020908152604080832063ffffffff8616845290915281205490911680610c315763ffffffff83166000908152600560205260409020546001600160a01b0316610c33565b805b949350505050565b610c46838383611300565b505050565b6000610c33848484611383565b366000610c65858561148c565b91509150610c9482827f0000000000000000000000000000000000000000000000000000000000000000611300565b6000610ca086866114a8565b90506000610cbc610cb188886114ba565b63ffffffff166114dd565b90506000610cce838361ffff16610781565b9050610cfb818686604051610ce49291906126b0565b6040518091039020610cf68b8b611544565b61156e565b610d5a82610d098a8a6116be565b85610d148c8c6116d7565b610d1e8d8d6116fa565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e925061170a915050565b5050505050505050565b610d6c610f85565b6001600160a01b038116610dd15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b0f565b610dda816112b0565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610e265760405163467409c360e01b815260040160405180910390fd5b610e338561ffff1661191d565b60018303610e5a57610e5561ffff861685610e5084860186612367565b61194b565b610e98565b60028303610e7c57610e5561ffff861685610e77848601866126c0565b6119d1565b604051630c509b5b60e01b815260048101849052602401610b0f565b5050505050565b604080518082018252600181526001600160401b03831660208201529051600290600090610ed090889088906126b0565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352908452908290208451815495909401516001600160401b03166101000268ffffffffffffffff00199415159490941668ffffffffffffffffff19909516949094179290921790925590517f2cb0eed7538baeae4c6fde038c0fd0384d27de0dd55a228c65847bda6aa1ab5691610f779187908790869088906126f4565b60405180910390a150505050565b6000546001600160a01b03163314610bd85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0f565b602081015160ff16158015610ff95750606081015160ff16155b15610dda5760405163ce2c375160e01b815260040160405180910390fd5b602081015160ff90811614806110325750602081015160ff16155b15611060576080810151511561105b576040516341d50bed60e11b815260040160405180910390fd5b6110c6565b806020015160ff1681608001515114158061109b57506002611084600160ff612764565b61108e919061277d565b60ff16816020015160ff16115b156110b9576040516341d50bed60e11b815260040160405180910390fd5b6110c68160800151611a1a565b604081015160ff90811614806110e15750604081015160ff16155b156111355760a0810151511561110a5760405163211089b360e11b815260040160405180910390fd5b606081015160ff1615611130576040516338682fa960e01b815260040160405180910390fd5b6111da565b806040015160ff168160a001515114158061117057506002611159600160ff612764565b611163919061277d565b60ff16816040015160ff16115b1561118e5760405163211089b360e11b815260040160405180910390fd5b606081015160ff1615806111af5750806040015160ff16816060015160ff16115b156111cd576040516338682fa960e01b815260040160405180910390fd5b6111da8160a00151611a1a565b6001600160a01b038316600090815260016020818152604080842063ffffffff8716855282529283902084518154868401519587015160608801516001600160401b0390931668ffffffffffffffffff1990921691909117600160401b60ff97881602176affff0000000000000000001916600160481b9187169190910260ff60501b191617600160501b95909116949094029390931783556080840151805185949361128c93908501920190611c7c565b5060a082015180516112a8916002840191602090910190611c7c565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b605182146113215760405163c9bf37b760e01b815260040160405180910390fd5b600161132d8484611a81565b60ff161461134e57604051633a9ae7b960e01b815260040160405180910390fd5b8063ffffffff1661135f8484611aa3565b63ffffffff1614610c465760405163216964bf60e11b815260040160405180910390fd5b602083015160009060ff16156114065760005b846020015160ff168160ff1610156113ee576113d885608001518260ff16815181106113c4576113c46123f4565b602002602001015185858860000151611ab3565b6113e6576000915050610b18565b600101611396565b50836040015160ff1660000361140657506001610b18565b606084015160005b856040015160ff168160ff161015611480576114508660a001518260ff168151811061143c5761143c6123f4565b602002602001015186868960000151611ab3565b15611478578161145f816127ad565b9250508160ff1660000361147857600192505050610b18565b60010161140e565b50600095945050505050565b36600061149c60518285876127ca565b915091505b9250929050565b6000610b186114b78484611b32565b90565b60006114ca600d600984866127ca565b6114d3916127f4565b60e01c9392505050565b600061ffff8211156115405760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b6064820152608401610b0f565b5090565b60006115508383611b42565b60405161155e9291906126b0565b6040518091039020905092915050565b611579838383611383565b6115965760405163130c463560e21b815260040160405180910390fd5b602083015160ff161561162b5760005b836020015160ff168160ff16101561162957600083815260026020908152604080832085845290915281206080860151805191929160ff85169081106115ee576115ee6123f4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805468ffffffffffffffffff191690556001016115a6565b505b604083015160ff1615610c465760005b836040015160ff168160ff1610156103a4576000838152600260209081526040808320858452909152812060a0860151805191929160ff8516908110611683576116836123f4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805468ffffffffffffffffff1916905560010161163b565b60006116ce602d600d84866127ca565b610b1891612824565b60006116e76009600184866127ca565b6116f091612842565b60c01c9392505050565b36600061149c83607181876127ca565b611718848761ffff16610bda565b6001600160a01b0316336001600160a01b03161461174957604051635b9c369960e11b815260040160405180910390fd5b836001600160a01b03163b6000036117cb57836001600160a01b03168661ffff167feca5e9e3d49c3ee9d9362efa82baa91c668a7f032b3a403638ae65e273680136878686805190602001206040516117be939291909283526001600160401b03919091166020830152604082015260600190565b60405180910390a36112a8565b61ffff86166000908152600360205260408120546117ea908790611b52565b856040516020016117fc929190612870565b60408051601f198184030181529082905263c2fa481360e01b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c2fa481390611862908a9085908a908a9089908b906004016128a7565b600060405180830381600087803b15801561187c57600080fd5b505af1158015611890573d6000803e3d6000fd5b5050604080516060808201835261ffff8c1680835260208084018d81526001600160401b038c811686880190815287519485529151928401929092525116938101939093526001600160a01b038a169083015292507f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca04915060800160405180910390a15050505050505050565b61192681611bd9565b610dda57604051633c30434160e21b815263ffffffff82166004820152602401610b0f565b6001600160a01b03828116600081815260046020908152604080832063ffffffff89168085529083529281902080546001600160a01b03191695871695861790558051938452908301919091528101919091527f2bef5fe6b6383925f8e9893d464521c5fcd4f9d4dc14d32d900849c5ae0af710906060015b60405180910390a1505050565b6119dc828483611017565b6119e68284610781565b507f82118522aa536ac0e96cc5c689407ae42b89d592aa133890a01f1509842f50818284836040516119c493929190612908565b6000805b8251811015610c46576000838281518110611a3b57611a3b6123f4565b60200260200101519050826001600160a01b0316816001600160a01b031611611a775760405163447516e160e01b815260040160405180910390fd5b9150600101611a1e565b6000611a9060018284866127ca565b611a9991612938565b60f81c9392505050565b60006114ca6031602d84866127ca565b600083815260026020908152604080832085845282528083206001600160a01b0388168452825280832081518083019092525460ff81161580158084526101009092046001600160401b0316938301939093529091611b285750826001600160401b031681602001516001600160401b031610155b9695505050505050565b60006116ce6051603184866127ca565b36600061149c83605181876127ca565b6060811580611b615750602082115b15611b7f576040516318456c9b60e01b815260040160405180910390fd5b816001600160401b03811115611b9757611b97612128565b6040519080825280601f01601f191660200182016040528015611bc1576020820181803683370190505b506008909202610100039290921b6020820152919050565b63ffffffff811660009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604081208054600160401b900460ff16151580610b18575054600160501b900460ff16151592915050565b6040518060c0016040528060006001600160401b03168152602001600060ff168152602001600060ff168152602001600060ff16815260200160608152602001606081525090565b828054828255906000526020600020908101928215611cd1579160200282015b82811115611cd157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611c9c565b506115409291505b808211156115405760008155600101611cd9565b60008083601f840112611cff57600080fd5b5081356001600160401b03811115611d1657600080fd5b6020830191508360208285010111156114a157600080fd5b80356001600160401b0381168114611d4557600080fd5b919050565b60008060008060608587031215611d6057600080fd5b84356001600160401b03811115611d7657600080fd5b611d8287828801611ced565b90955093505060208501359150611d9b60408601611d2e565b905092959194509250565b803563ffffffff81168114611d4557600080fd5b600060208284031215611dcc57600080fd5b610b1882611da6565b60008060208385031215611de857600080fd5b82356001600160401b0380821115611dff57600080fd5b818501915085601f830112611e1357600080fd5b813581811115611e2257600080fd5b8660208260051b8501011115611e3757600080fd5b60209290920196919550909350505050565b6001600160a01b0381168114610dda57600080fd5b60008060408385031215611e7157600080fd5b8235611e7c81611e49565b9150611e8a60208401611da6565b90509250929050565b60008151808452602080850194506020840160005b83811015611ecd5781516001600160a01b031687529582019590820190600101611ea8565b509495945050505050565b6001600160401b03815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301526000608082015160c06080850152611f2760c0850182611e93565b905060a083015184820360a0860152611f408282611e93565b95945050505050565b602081526000610b186020830184611ed8565b60008060208385031215611f6f57600080fd5b82356001600160401b0380821115611f8657600080fd5b818501915085601f830112611f9a57600080fd5b813581811115611fa957600080fd5b8660208260061b8501011115611e3757600080fd5b600080600060608486031215611fd357600080fd5b83359250602084013591506040840135611fec81611e49565b809150509250925092565b803561ffff81168114611d4557600080fd5b60008060006060848603121561201e57600080fd5b61202784611ff7565b9250602084013561203781611e49565b929592945050506040919091013590565b60005b8381101561206357818101518382015260200161204b565b50506000910152565b60008151808452612084816020860160208601612048565b601f01601f19169290920160200192915050565b602081526000610b18602083018461206c565b600080604083850312156120be57600080fd5b6120c783611ff7565b946020939093013593505050565b6000806000604084860312156120ea57600080fd5b83356001600160401b0381111561210057600080fd5b61210c86828701611ced565b909450925061211f905060208501611da6565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b038111828210171561216057612160612128565b60405290565b803560ff81168114611d4557600080fd5b600082601f83011261218857600080fd5b813560206001600160401b03808311156121a4576121a4612128565b8260051b604051601f19603f830116810181811084821117156121c9576121c9612128565b60405293845260208187018101949081019250878511156121e957600080fd5b6020870191505b8482101561221257813561220381611e49565b835291830191908301906121f0565b979650505050505050565b600060c0828403121561222f57600080fd5b61223761213e565b905061224282611d2e565b815261225060208301612166565b602082015261226160408301612166565b604082015261227260608301612166565b606082015260808201356001600160401b038082111561229157600080fd5b61229d85838601612177565b608084015260a08401359150808211156122b657600080fd5b506122c384828501612177565b60a08301525092915050565b6000806000606084860312156122e457600080fd5b83356001600160401b038111156122fa57600080fd5b6123068682870161221d565b9660208601359650604090950135949350505050565b60008060006040848603121561233157600080fd5b83356001600160401b0381111561234757600080fd5b61235386828701611ced565b909790965060209590950135949350505050565b60006020828403121561237957600080fd5b8135610c3181611e49565b60008060008060006080868803121561239c57600080fd5b6123a586611ff7565b945060208601356123b581611e49565b93506040860135925060608601356001600160401b038111156123d757600080fd5b6123e388828901611ced565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261242057600080fd5b9190910192915050565b6000823560be1983360301811261242057600080fd5b60006020828403121561245257600080fd5b610b1882612166565b60006020828403121561246d57600080fd5b610b1882611d2e565b6000610678368361221d565b6000808335601e1984360301811261249957600080fd5b83016020810192503590506001600160401b038111156124b857600080fd5b8060051b36038213156114a157600080fd5b8183526000602080850194508260005b85811015611ecd5781356124ed81611e49565b6001600160a01b0316875295820195908201906001016124da565b60208082528181018390526000906040808401600586901b8501820187855b8881101561263c57603f19808985030185528235603e198c360301811261254d57600080fd5b8b0163ffffffff61255d82611da6565b1685528781013560be1982360301811261257657600080fd5b858901889052016001600160401b0361258e82611d2e565b168786015261259e888201612166565b606060ff808316828901526125b48a8501612166565b92506080818416818a01526125ca838601612166565b935060a09250818416838a01526125e381860186612482565b60c08b810152945091506125fe9050610100890184836124ca565b92505061260d81840184612482565b93509050838783030160e08801526126268284836124ca565b978a019796505050928701925050600101612527565b509098975050505050505050565b6020808252818101839052600090604080840186845b878110156126a35763ffffffff61267683611da6565b1683528482013561268681611e49565b6001600160a01b0316838601529183019190830190600101612660565b5090979650505050505050565b8183823760009101908152919050565b6000602082840312156126d257600080fd5b81356001600160401b038111156126e857600080fd5b610c338482850161221d565b6001600160a01b03861681526080602082018190528101849052838560a0830137600060a08583010152600060a0601f19601f87011683010190506001600160401b03841660408301528260608301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156106785761067861274e565b600060ff83168061279e57634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b600060ff8216806127c0576127c061274e565b6000190192915050565b600080858511156127da57600080fd5b838611156127e757600080fd5b5050820193919092039150565b6001600160e01b0319813581811691600485101561281c5780818660040360031b1b83161692505b505092915050565b8035602083101561067857600019602084900360031b1b1692915050565b6001600160c01b0319813581811691600885101561281c5760089490940360031b84901b1690921692915050565b60008351612882818460208801612048565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61ffff8716815260c0602082015260006128c460c083018861206c565b6001600160a01b03871660408401526001600160401b03861660608401526080830185905282810360a08401526128fb818561206c565b9998505050505050505050565b6001600160a01b038416815263ffffffff83166020820152606060408201819052600090611f4090830184611ed8565b6001600160f81b0319813581811691600185101561281c5760019490940360031b84901b169092169291505056fea26469706673582212206dbb6248d92f745c52013632c77e1f19030ac2c60c2dadefc3887859efc1ecf464736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636d26e5d0116100ad578063c40ff83511610071578063c40ff83514610329578063e084d9521461033c578063e65106f81461035f578063f2fde38b14610372578063f8e1734c1461038557600080fd5b80636d26e5d0146102b6578063715018a6146102c95780638da5cb5b146102d15780639653a704146102e257806398678a11146102f557600080fd5b806339e928a8116100f457806339e928a8146101ed5780633c782a521461020057806343ea4fa91461026357806352d2871f1461027657806354fd4d501461029657600080fd5b80630223536e146101315780630f8355c01461014657806329460b0b146101795780632fed39ae1461018c57806339e3f938146101cd575b600080fd5b61014461013f366004611d4a565b610398565b005b610166610154366004611dba565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b610144610187366004611dd5565b6103aa565b6101b561019a366004611dba565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610170565b6101e06101db366004611e5e565b610542565b6040516101709190611f49565b6101446101fb366004611f5c565b61067e565b61024461020e366004611fbe565b600260209081526000938452604080852082529284528284209052825290205460ff81169061010090046001600160401b031682565b6040805192151583526001600160401b03909116602083015201610170565b6101e0610271366004611e5e565b610781565b610289610284366004612009565b610a8d565b6040516101709190612098565b604080516003815260006020820152600191810191909152606001610170565b6101446102c43660046120ab565b610b1f565b610144610bc6565b6000546001600160a01b03166101b5565b6101b56102f0366004611e5e565b610bda565b6101b5610303366004611e5e565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6101446103373660046120d5565b610c3b565b61034f61034a3660046122cf565b610c4b565b6040519015158152602001610170565b61014461036d36600461231c565b610c58565b610144610380366004612367565b610d64565b610144610393366004612384565b610ddd565b6103a484848484610e9f565b50505050565b6103b2610f85565b60005b8181101561050457368383838181106103d0576103d06123f4565b90506020028101906103e2919061240a565b905060ff6103f3602083018361242a565b610404906040810190602001612440565b60ff1603610425576040516341d50bed60e11b815260040160405180910390fd5b60ff610434602083018361242a565b610445906060810190604001612440565b60ff16036104665760405163211089b360e11b815260040160405180910390fd5b6001600160401b0361047b602083018361242a565b61048990602081019061245b565b6001600160401b0316036104b05760405163281b33d760e11b815260040160405180910390fd5b6104ce6104c0602083018361242a565b6104c990612476565b610fdf565b6104fb60006104e06020840184611dba565b6104ed602085018561242a565b6104f690612476565b611017565b506001016103b5565b507faaf3aaa0c11056e86ac56eb653e25b005ca1a7d4dcd21ba24647f7ab63f3b5608282604051610536929190612508565b60405180910390a15050565b61054a611c34565b6001600160a01b038316600090815260016020818152604080842063ffffffff87168552825292839020835160c08101855281546001600160401b038116825260ff600160401b8204811683860152600160481b8204811683880152600160501b909104166060820152928101805485518185028101850190965280865293949193608086019383018282801561060a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105ec575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561066c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161064e575b50505050508152505090505b92915050565b610686610f85565b60005b8181101561074f57368383838181106106a4576106a46123f4565b905060400201905060006001600160a01b03168160200160208101906106ca9190612367565b6001600160a01b0316036106f157604051631074e82d60e11b815260040160405180910390fd5b6107016040820160208301612367565b600560006107126020850185611dba565b63ffffffff168152602081019190915260400160002080546001600160a01b0319166001600160a01b039290921691909117905550600101610689565b507f2a2676897ce6724d11fb8016f9bcdfe9fe564bc3524411d5df7914aac78aeeb3828260405161053692919061264a565b610789611c34565b63ffffffff821660008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260408083206001600160a01b03881684526001835281842094845293909152902080546001600160401b0316806107fe5782546001600160401b0316845261081b565b6001600160401b038181161461081b576001600160401b03811684525b8154600160401b900460ff166108b5578254600160401b900460ff16156108b0578260010180548060200260200160405190810160405280929190818152602001828054801561089457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610876575b505050505060808501528254600160401b900460ff1660208501525b61093c565b8154600160401b900460ff9081161461093c578160010180548060200260200160405190810160405280929190818152602001828054801561092057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610902575b505050505060808501528154600160401b900460ff1660208501525b8154600160481b900460ff166109e5578254600160481b900460ff16156109e057826002018054806020026020016040519081016040528092919081815260200182805480156109b557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610997575b505050505060a0850152825460ff600160481b820481166040870152600160501b9091041660608501525b610a7b565b8154600160481b900460ff90811614610a7b5781600201805480602002602001604051908101604052809291908181526020018280548015610a5057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a32575b505050505060a0850152815460ff600160481b820481166040870152600160501b9091041660608501525b610a8484610fdf565b50505092915050565b606060018203610ad157610aa5838561ffff16610bda565b604080516001600160a01b039092166020830152015b6040516020818303038152906040529050610b18565b60028203610af757610ae7838561ffff16610781565b604051602001610abb9190611f49565b604051630c509b5b60e01b8152600481018390526024015b60405180910390fd5b9392505050565b610b27610f85565b6020811115610b4957604051636f85e1b760e01b815260040160405180910390fd5b61ffff821660009081526003602052604090205415610b7b5760405163e4df7bef60e01b815260040160405180910390fd5b61ffff8216600081815260036020908152604091829020849055815192835282018390527ee9ab3709e58edd0db46318d63673d8ae4681fa3e51d9f9dc07cde5109ff7489101610536565b610bce610f85565b610bd860006112b0565b565b6001600160a01b03808316600090815260046020908152604080832063ffffffff8616845290915281205490911680610c315763ffffffff83166000908152600560205260409020546001600160a01b0316610c33565b805b949350505050565b610c46838383611300565b505050565b6000610c33848484611383565b366000610c65858561148c565b91509150610c9482827f0000000000000000000000000000000000000000000000000000000000000000611300565b6000610ca086866114a8565b90506000610cbc610cb188886114ba565b63ffffffff166114dd565b90506000610cce838361ffff16610781565b9050610cfb818686604051610ce49291906126b0565b6040518091039020610cf68b8b611544565b61156e565b610d5a82610d098a8a6116be565b85610d148c8c6116d7565b610d1e8d8d6116fa565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508e925061170a915050565b5050505050505050565b610d6c610f85565b6001600160a01b038116610dd15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b0f565b610dda816112b0565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610e265760405163467409c360e01b815260040160405180910390fd5b610e338561ffff1661191d565b60018303610e5a57610e5561ffff861685610e5084860186612367565b61194b565b610e98565b60028303610e7c57610e5561ffff861685610e77848601866126c0565b6119d1565b604051630c509b5b60e01b815260048101849052602401610b0f565b5050505050565b604080518082018252600181526001600160401b03831660208201529051600290600090610ed090889088906126b0565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352908452908290208451815495909401516001600160401b03166101000268ffffffffffffffff00199415159490941668ffffffffffffffffff19909516949094179290921790925590517f2cb0eed7538baeae4c6fde038c0fd0384d27de0dd55a228c65847bda6aa1ab5691610f779187908790869088906126f4565b60405180910390a150505050565b6000546001600160a01b03163314610bd85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0f565b602081015160ff16158015610ff95750606081015160ff16155b15610dda5760405163ce2c375160e01b815260040160405180910390fd5b602081015160ff90811614806110325750602081015160ff16155b15611060576080810151511561105b576040516341d50bed60e11b815260040160405180910390fd5b6110c6565b806020015160ff1681608001515114158061109b57506002611084600160ff612764565b61108e919061277d565b60ff16816020015160ff16115b156110b9576040516341d50bed60e11b815260040160405180910390fd5b6110c68160800151611a1a565b604081015160ff90811614806110e15750604081015160ff16155b156111355760a0810151511561110a5760405163211089b360e11b815260040160405180910390fd5b606081015160ff1615611130576040516338682fa960e01b815260040160405180910390fd5b6111da565b806040015160ff168160a001515114158061117057506002611159600160ff612764565b611163919061277d565b60ff16816040015160ff16115b1561118e5760405163211089b360e11b815260040160405180910390fd5b606081015160ff1615806111af5750806040015160ff16816060015160ff16115b156111cd576040516338682fa960e01b815260040160405180910390fd5b6111da8160a00151611a1a565b6001600160a01b038316600090815260016020818152604080842063ffffffff8716855282529283902084518154868401519587015160608801516001600160401b0390931668ffffffffffffffffff1990921691909117600160401b60ff97881602176affff0000000000000000001916600160481b9187169190910260ff60501b191617600160501b95909116949094029390931783556080840151805185949361128c93908501920190611c7c565b5060a082015180516112a8916002840191602090910190611c7c565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b605182146113215760405163c9bf37b760e01b815260040160405180910390fd5b600161132d8484611a81565b60ff161461134e57604051633a9ae7b960e01b815260040160405180910390fd5b8063ffffffff1661135f8484611aa3565b63ffffffff1614610c465760405163216964bf60e11b815260040160405180910390fd5b602083015160009060ff16156114065760005b846020015160ff168160ff1610156113ee576113d885608001518260ff16815181106113c4576113c46123f4565b602002602001015185858860000151611ab3565b6113e6576000915050610b18565b600101611396565b50836040015160ff1660000361140657506001610b18565b606084015160005b856040015160ff168160ff161015611480576114508660a001518260ff168151811061143c5761143c6123f4565b602002602001015186868960000151611ab3565b15611478578161145f816127ad565b9250508160ff1660000361147857600192505050610b18565b60010161140e565b50600095945050505050565b36600061149c60518285876127ca565b915091505b9250929050565b6000610b186114b78484611b32565b90565b60006114ca600d600984866127ca565b6114d3916127f4565b60e01c9392505050565b600061ffff8211156115405760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201526536206269747360d01b6064820152608401610b0f565b5090565b60006115508383611b42565b60405161155e9291906126b0565b6040518091039020905092915050565b611579838383611383565b6115965760405163130c463560e21b815260040160405180910390fd5b602083015160ff161561162b5760005b836020015160ff168160ff16101561162957600083815260026020908152604080832085845290915281206080860151805191929160ff85169081106115ee576115ee6123f4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805468ffffffffffffffffff191690556001016115a6565b505b604083015160ff1615610c465760005b836040015160ff168160ff1610156103a4576000838152600260209081526040808320858452909152812060a0860151805191929160ff8516908110611683576116836123f4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805468ffffffffffffffffff1916905560010161163b565b60006116ce602d600d84866127ca565b610b1891612824565b60006116e76009600184866127ca565b6116f091612842565b60c01c9392505050565b36600061149c83607181876127ca565b611718848761ffff16610bda565b6001600160a01b0316336001600160a01b03161461174957604051635b9c369960e11b815260040160405180910390fd5b836001600160a01b03163b6000036117cb57836001600160a01b03168661ffff167feca5e9e3d49c3ee9d9362efa82baa91c668a7f032b3a403638ae65e273680136878686805190602001206040516117be939291909283526001600160401b03919091166020830152604082015260600190565b60405180910390a36112a8565b61ffff86166000908152600360205260408120546117ea908790611b52565b856040516020016117fc929190612870565b60408051601f198184030181529082905263c2fa481360e01b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c2fa481390611862908a9085908a908a9089908b906004016128a7565b600060405180830381600087803b15801561187c57600080fd5b505af1158015611890573d6000803e3d6000fd5b5050604080516060808201835261ffff8c1680835260208084018d81526001600160401b038c811686880190815287519485529151928401929092525116938101939093526001600160a01b038a169083015292507f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca04915060800160405180910390a15050505050505050565b61192681611bd9565b610dda57604051633c30434160e21b815263ffffffff82166004820152602401610b0f565b6001600160a01b03828116600081815260046020908152604080832063ffffffff89168085529083529281902080546001600160a01b03191695871695861790558051938452908301919091528101919091527f2bef5fe6b6383925f8e9893d464521c5fcd4f9d4dc14d32d900849c5ae0af710906060015b60405180910390a1505050565b6119dc828483611017565b6119e68284610781565b507f82118522aa536ac0e96cc5c689407ae42b89d592aa133890a01f1509842f50818284836040516119c493929190612908565b6000805b8251811015610c46576000838281518110611a3b57611a3b6123f4565b60200260200101519050826001600160a01b0316816001600160a01b031611611a775760405163447516e160e01b815260040160405180910390fd5b9150600101611a1e565b6000611a9060018284866127ca565b611a9991612938565b60f81c9392505050565b60006114ca6031602d84866127ca565b600083815260026020908152604080832085845282528083206001600160a01b0388168452825280832081518083019092525460ff81161580158084526101009092046001600160401b0316938301939093529091611b285750826001600160401b031681602001516001600160401b031610155b9695505050505050565b60006116ce6051603184866127ca565b36600061149c83605181876127ca565b6060811580611b615750602082115b15611b7f576040516318456c9b60e01b815260040160405180910390fd5b816001600160401b03811115611b9757611b97612128565b6040519080825280601f01601f191660200182016040528015611bc1576020820181803683370190505b506008909202610100039290921b6020820152919050565b63ffffffff811660009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604081208054600160401b900460ff16151580610b18575054600160501b900460ff16151592915050565b6040518060c0016040528060006001600160401b03168152602001600060ff168152602001600060ff168152602001600060ff16815260200160608152602001606081525090565b828054828255906000526020600020908101928215611cd1579160200282015b82811115611cd157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611c9c565b506115409291505b808211156115405760008155600101611cd9565b60008083601f840112611cff57600080fd5b5081356001600160401b03811115611d1657600080fd5b6020830191508360208285010111156114a157600080fd5b80356001600160401b0381168114611d4557600080fd5b919050565b60008060008060608587031215611d6057600080fd5b84356001600160401b03811115611d7657600080fd5b611d8287828801611ced565b90955093505060208501359150611d9b60408601611d2e565b905092959194509250565b803563ffffffff81168114611d4557600080fd5b600060208284031215611dcc57600080fd5b610b1882611da6565b60008060208385031215611de857600080fd5b82356001600160401b0380821115611dff57600080fd5b818501915085601f830112611e1357600080fd5b813581811115611e2257600080fd5b8660208260051b8501011115611e3757600080fd5b60209290920196919550909350505050565b6001600160a01b0381168114610dda57600080fd5b60008060408385031215611e7157600080fd5b8235611e7c81611e49565b9150611e8a60208401611da6565b90509250929050565b60008151808452602080850194506020840160005b83811015611ecd5781516001600160a01b031687529582019590820190600101611ea8565b509495945050505050565b6001600160401b03815116825260ff602082015116602083015260ff604082015116604083015260ff60608201511660608301526000608082015160c06080850152611f2760c0850182611e93565b905060a083015184820360a0860152611f408282611e93565b95945050505050565b602081526000610b186020830184611ed8565b60008060208385031215611f6f57600080fd5b82356001600160401b0380821115611f8657600080fd5b818501915085601f830112611f9a57600080fd5b813581811115611fa957600080fd5b8660208260061b8501011115611e3757600080fd5b600080600060608486031215611fd357600080fd5b83359250602084013591506040840135611fec81611e49565b809150509250925092565b803561ffff81168114611d4557600080fd5b60008060006060848603121561201e57600080fd5b61202784611ff7565b9250602084013561203781611e49565b929592945050506040919091013590565b60005b8381101561206357818101518382015260200161204b565b50506000910152565b60008151808452612084816020860160208601612048565b601f01601f19169290920160200192915050565b602081526000610b18602083018461206c565b600080604083850312156120be57600080fd5b6120c783611ff7565b946020939093013593505050565b6000806000604084860312156120ea57600080fd5b83356001600160401b0381111561210057600080fd5b61210c86828701611ced565b909450925061211f905060208501611da6565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b038111828210171561216057612160612128565b60405290565b803560ff81168114611d4557600080fd5b600082601f83011261218857600080fd5b813560206001600160401b03808311156121a4576121a4612128565b8260051b604051601f19603f830116810181811084821117156121c9576121c9612128565b60405293845260208187018101949081019250878511156121e957600080fd5b6020870191505b8482101561221257813561220381611e49565b835291830191908301906121f0565b979650505050505050565b600060c0828403121561222f57600080fd5b61223761213e565b905061224282611d2e565b815261225060208301612166565b602082015261226160408301612166565b604082015261227260608301612166565b606082015260808201356001600160401b038082111561229157600080fd5b61229d85838601612177565b608084015260a08401359150808211156122b657600080fd5b506122c384828501612177565b60a08301525092915050565b6000806000606084860312156122e457600080fd5b83356001600160401b038111156122fa57600080fd5b6123068682870161221d565b9660208601359650604090950135949350505050565b60008060006040848603121561233157600080fd5b83356001600160401b0381111561234757600080fd5b61235386828701611ced565b909790965060209590950135949350505050565b60006020828403121561237957600080fd5b8135610c3181611e49565b60008060008060006080868803121561239c57600080fd5b6123a586611ff7565b945060208601356123b581611e49565b93506040860135925060608601356001600160401b038111156123d757600080fd5b6123e388828901611ced565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261242057600080fd5b9190910192915050565b6000823560be1983360301811261242057600080fd5b60006020828403121561245257600080fd5b610b1882612166565b60006020828403121561246d57600080fd5b610b1882611d2e565b6000610678368361221d565b6000808335601e1984360301811261249957600080fd5b83016020810192503590506001600160401b038111156124b857600080fd5b8060051b36038213156114a157600080fd5b8183526000602080850194508260005b85811015611ecd5781356124ed81611e49565b6001600160a01b0316875295820195908201906001016124da565b60208082528181018390526000906040808401600586901b8501820187855b8881101561263c57603f19808985030185528235603e198c360301811261254d57600080fd5b8b0163ffffffff61255d82611da6565b1685528781013560be1982360301811261257657600080fd5b858901889052016001600160401b0361258e82611d2e565b168786015261259e888201612166565b606060ff808316828901526125b48a8501612166565b92506080818416818a01526125ca838601612166565b935060a09250818416838a01526125e381860186612482565b60c08b810152945091506125fe9050610100890184836124ca565b92505061260d81840184612482565b93509050838783030160e08801526126268284836124ca565b978a019796505050928701925050600101612527565b509098975050505050505050565b6020808252818101839052600090604080840186845b878110156126a35763ffffffff61267683611da6565b1683528482013561268681611e49565b6001600160a01b0316838601529183019190830190600101612660565b5090979650505050505050565b8183823760009101908152919050565b6000602082840312156126d257600080fd5b81356001600160401b038111156126e857600080fd5b610c338482850161221d565b6001600160a01b03861681526080602082018190528101849052838560a0830137600060a08583010152600060a0601f19601f87011683010190506001600160401b03841660408301528260608301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156106785761067861274e565b600060ff83168061279e57634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b600060ff8216806127c0576127c061274e565b6000190192915050565b600080858511156127da57600080fd5b838611156127e757600080fd5b5050820193919092039150565b6001600160e01b0319813581811691600485101561281c5780818660040360031b1b83161692505b505092915050565b8035602083101561067857600019602084900360031b1b1692915050565b6001600160c01b0319813581811691600885101561281c5760089490940360031b84901b1690921692915050565b60008351612882818460208801612048565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61ffff8716815260c0602082015260006128c460c083018861206c565b6001600160a01b03871660408401526001600160401b03861660608401526080830185905282810360a08401526128fb818561206c565b9998505050505050505050565b6001600160a01b038416815263ffffffff83166020820152606060408201819052600090611f4090830184611ed8565b6001600160f81b0319813581811691600185101561281c5760019490940360031b84901b169092169291505056fea26469706673582212206dbb6248d92f745c52013632c77e1f19030ac2c60c2dadefc3887859efc1ecf464736f6c63430008160033",
  "devdoc": {
    "details": "ULN301 will be deployed on EndpointV1 and is for backward compatibility with ULN302 on EndpointV2. 301 can talk to both 301 and 302This is a gluing contract. It simply parses the requests and forward to the super.impl() accordingly.In this case, it combines the logic of ReceiveUlnBase and ReceiveLibBaseE1",
    "kind": "dev",
    "methods": {
      "commitVerification(bytes,uint256)": {
        "details": "in 301, this is equivalent to execution as in Endpoint V2dont need to check endpoint verifiable here to save gas, as it will reverts if not verifiable."
      },
      "getAppUlnConfig(address,uint32)": {
        "details": "Get the uln config without the default config for the given remoteEid."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])": {
        "details": "about the DEFAULT ULN config 1) its values are all LITERAL (e.g. 0 is 0). whereas in the oapp ULN config, 0 (default value) points to the default ULN config     this design enables the oapp to point to DEFAULT config without explicitly setting the config 2) its configuration is more restrictive than the oapp ULN config that     a) it must not use NIL value, where NIL is used only by oapps to indicate the LITERAL 0     b) it must have at least one DVN"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7924,
        "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20352,
        "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
        "label": "ulnConfigs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(UlnConfig)20301_storage))"
      },
      {
        "astId": 19426,
        "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
        "label": "hashLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage)))"
      },
      {
        "astId": 26573,
        "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
        "label": "addressSizes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 26677,
        "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
        "label": "executors",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_address))"
      },
      {
        "astId": 26681,
        "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
        "label": "defaultExecutors",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(UlnConfig)20301_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct UlnConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(UlnConfig)20301_storage)"
      },
      "t_mapping(t_address,t_struct(Verification)19411_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Verification)",
        "numberOfBytes": "32",
        "value": "t_struct(Verification)19411_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct Verification))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Verification)19411_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(address => struct Verification)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Verification)19411_storage))"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_struct(UlnConfig)20301_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct UlnConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(UlnConfig)20301_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UlnConfig)20301_storage": {
        "encoding": "inplace",
        "label": "struct UlnConfig",
        "members": [
          {
            "astId": 20288,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "confirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 20290,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "requiredDVNCount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20292,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "optionalDVNCount",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20294,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "optionalDVNThreshold",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20297,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "requiredDVNs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 20300,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "optionalDVNs",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Verification)19411_storage": {
        "encoding": "inplace",
        "label": "struct Verification",
        "members": [
          {
            "astId": 19408,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "submitted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 19410,
            "contract": "contracts/messagelib/contracts/uln/uln301/ReceiveUln301.sol:ReceiveUln301",
            "label": "confirmations",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}