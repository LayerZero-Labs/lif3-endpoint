{
  "address": "0x89dA85A27Fab76b5AcacBeDDD21B9b4370F99EDb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_vid",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "_messageLibs",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint64",
          "name": "_quorum",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "executableHash",
          "type": "bytes32"
        }
      ],
      "name": "DVN_DuplicatedHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DVN_InstructionExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "DVN_InvalidRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DVN_InvalidSignatures",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "DVN_InvalidTarget",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "vid",
          "type": "uint32"
        }
      ],
      "name": "DVN_InvalidVid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DVN_OnlySelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig_OnlySigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig_QuorumIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "signersSize",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "quorum",
          "type": "uint64"
        }
      ],
      "name": "MultiSig_SignersSizeIsLessThanQuorum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "MultiSig_StateAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiSig_UnorderedSigners",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer_NativeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Transfer_ToAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Worker_NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Worker_OnlyMessageLib",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Worker_RoleRenouncingDisabled",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ExecuteFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "vid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signatures",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct ExecuteParam",
          "name": "param",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "HashAlreadyUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "multiplierBps",
          "type": "uint16"
        }
      ],
      "name": "SetDefaultMultiplierBps",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct IDVN.DstConfigParam[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "SetDstConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "SetPriceFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "optionTypes",
          "type": "uint8[]"
        }
      ],
      "name": "SetSupportedOptionTypes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "workerLib",
          "type": "address"
        }
      ],
      "name": "SetWorkerLib",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_quorum",
          "type": "uint64"
        }
      ],
      "name": "UpdateQuorum",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "UpdateSigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "VerifierFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "VerifySignaturesFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "packetHeader",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "payloadHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "internalType": "struct ILayerZeroDVN.AssignJobParam",
          "name": "_param",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultMultiplierBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "dstConfig",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "gas",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "multiplierBps",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "floorMarginUSD",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "vid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signatures",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExecuteParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "getSupportedOptionTypes",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasAcl",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_vid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "hashCallData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "vid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signatures",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExecuteParam",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "quorumChangeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_multiplierBps",
          "type": "uint16"
        }
      ],
      "name": "setDefaultMultiplierBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            }
          ],
          "internalType": "struct IDVN.DstConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDstConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quorum",
          "type": "uint64"
        }
      ],
      "name": "setQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8[]",
          "name": "_optionTypes",
          "type": "uint8[]"
        }
      ],
      "name": "setSupportedOptionTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_workerFeeLib",
          "type": "address"
        }
      ],
      "name": "setWorkerFeeLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "executableHash",
          "type": "bytes32"
        }
      ],
      "name": "usedHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "used",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "verifySignatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "enum MultiSig.Errors",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFeeFromUlnV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workerFeeLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98bc4624255cfa8cb8d904c68196242c2eee45dc7f6cd8f5a5c9d471a0c08da0",
  "receipt": {
    "to": null,
    "from": "0x462c2AE39B6B0bdB950Deb2BC82082308cF8cB10",
    "contractAddress": "0x89dA85A27Fab76b5AcacBeDDD21B9b4370F99EDb",
    "transactionIndex": 0,
    "gasUsed": "3299661",
    "logsBloom": "0x
    "blockHash": "0xebed2ab9c4f7099807b0bef694ebfd90b917a236f97fcbb4b8eabb43e05b8492",
    "transactionHash": "0x98bc4624255cfa8cb8d904c68196242c2eee45dc7f6cd8f5a5c9d471a0c08da0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 35723372,
        "transactionHash": "0x98bc4624255cfa8cb8d904c68196242c2eee45dc7f6cd8f5a5c9d471a0c08da0",
        "address": "0x89dA85A27Fab76b5AcacBeDDD21B9b4370F99EDb",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de",
          "0x000000000000000000000000c2e94ba47fee71a926ad70799480b72c22d30f44",
          "0x000000000000000000000000462c2ae39b6b0bdb950deb2bc82082308cf8cb10"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xebed2ab9c4f7099807b0bef694ebfd90b917a236f97fcbb4b8eabb43e05b8492"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 35723372,
        "transactionHash": "0x98bc4624255cfa8cb8d904c68196242c2eee45dc7f6cd8f5a5c9d471a0c08da0",
        "address": "0x89dA85A27Fab76b5AcacBeDDD21B9b4370F99EDb",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de",
          "0x00000000000000000000000047636b3188774a3e7273d85a537b9ba4ee7b2535",
          "0x000000000000000000000000462c2ae39b6b0bdb950deb2bc82082308cf8cb10"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xebed2ab9c4f7099807b0bef694ebfd90b917a236f97fcbb4b8eabb43e05b8492"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 35723372,
        "transactionHash": "0x98bc4624255cfa8cb8d904c68196242c2eee45dc7f6cd8f5a5c9d471a0c08da0",
        "address": "0x89dA85A27Fab76b5AcacBeDDD21B9b4370F99EDb",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000009f403140bc0574d7d36ea472b82daa1bbd4ef327",
          "0x000000000000000000000000462c2ae39b6b0bdb950deb2bc82082308cf8cb10"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xebed2ab9c4f7099807b0bef694ebfd90b917a236f97fcbb4b8eabb43e05b8492"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 35723372,
        "transactionHash": "0x98bc4624255cfa8cb8d904c68196242c2eee45dc7f6cd8f5a5c9d471a0c08da0",
        "address": "0x89dA85A27Fab76b5AcacBeDDD21B9b4370F99EDb",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000b8ff877ed78ba520ece21b1de7843a8a57ca47cb",
          "0x000000000000000000000000462c2ae39b6b0bdb950deb2bc82082308cf8cb10"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xebed2ab9c4f7099807b0bef694ebfd90b917a236f97fcbb4b8eabb43e05b8492"
      }
    ],
    "blockNumber": 35723372,
    "cumulativeGasUsed": "3299661",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10106,
    [
      "0xC2E94Ba47fEe71A926AD70799480b72C22d30F44",
      "0x47636b3188774a3E7273D85A537b9bA4Ee7b2535"
    ],
    "0xD351c120907029c56ec2422796dA13AE94C61994",
    [
      "0x5AB40527AA622960E26a171c58011de58DFA5bE9",
      "0x7e1879A1Fba74d8107E2E3EE42f5fea5E6500f5B",
      "0xE4059e1B02d8d74Fc82d27BD5006Ecc3605D9CEc"
    ],
    2,
    [
      "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327",
      "0xB8FF877ed78Ba520Ece21B1de7843A8a57cA47Cb"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "df45c5d73ee7212b45689d2cdbb787f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_vid\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_messageLibs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"_quorum\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"executableHash\",\"type\":\"bytes32\"}],\"name\":\"DVN_DuplicatedHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DVN_InstructionExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"DVN_InvalidRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DVN_InvalidSignatures\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"DVN_InvalidTarget\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"vid\",\"type\":\"uint32\"}],\"name\":\"DVN_InvalidVid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DVN_OnlySelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig_OnlySigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig_QuorumIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"signersSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"quorum\",\"type\":\"uint64\"}],\"name\":\"MultiSig_SignersSizeIsLessThanQuorum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"MultiSig_StateAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiSig_UnorderedSigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer_NativeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Transfer_ToAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Worker_NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Worker_OnlyMessageLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Worker_RoleRenouncingDisabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ExecuteFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"vid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct ExecuteParam\",\"name\":\"param\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"HashAlreadyUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"}],\"name\":\"SetDefaultMultiplierBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct IDVN.DstConfigParam[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"SetDstConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"SetPriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"optionTypes\",\"type\":\"uint8[]\"}],\"name\":\"SetSupportedOptionTypes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workerLib\",\"type\":\"address\"}],\"name\":\"SetWorkerLib\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_quorum\",\"type\":\"uint64\"}],\"name\":\"UpdateQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"UpdateSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"VerifierFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"VerifySignaturesFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"struct ILayerZeroDVN.AssignJobParam\",\"name\":\"_param\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMultiplierBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"dstConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"vid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecuteParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"getSupportedOptionTypes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasAcl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_vid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"hashCallData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"vid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecuteParam\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"quorumChangeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_multiplierBps\",\"type\":\"uint16\"}],\"name\":\"setDefaultMultiplierBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"internalType\":\"struct IDVN.DstConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDstConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quorum\",\"type\":\"uint64\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8[]\",\"name\":\"_optionTypes\",\"type\":\"uint8[]\"}],\"name\":\"setSupportedOptionTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerFeeLib\",\"type\":\"address\"}],\"name\":\"setWorkerFeeLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"executableHash\",\"type\":\"bytes32\"}],\"name\":\"usedHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"enum MultiSig.Errors\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFeeFromUlnV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workerFeeLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"assignJob((uint32,bytes,bytes32,uint64,address),bytes)\":{\"details\":\"for ULN301, ULN302 and more to assign jobdvn network can reject job from _sender by adding/removing them from allowlist/denylist\",\"params\":{\"_options\":\"dvn options\",\"_param\":\"assign job param\"}},\"assignJob(uint16,uint16,uint64,address)\":{\"details\":\"to support ULNv2dvn network can reject job from _sender by adding/removing them from allowlist/denylist\",\"params\":{\"\":\"//_outboundProofType outbound proof type\",\"_confirmations\":\"block confirmations\",\"_dstEid\":\"destination EndpointId\",\"_sender\":\"message sender address\"}},\"constructor\":{\"details\":\"DVN doesn't have a roleAdmin (address(0x0))Supports all of ULNv2, ULN301, ULN302 and more\",\"params\":{\"_admins\":\"array of admin addresses that are granted the ADMIN_ROLE\",\"_messageLibs\":\"array of message lib addresses that are granted the MESSAGE_LIB_ROLE\",\"_priceFeed\":\"price feed address\",\"_quorum\":\"quorum for multisig\",\"_signers\":\"array of signer addresses for multisig\",\"_vid\":\"unique identifier for this DVN instance\"}},\"execute((uint32,address,bytes,uint256,bytes)[])\":{\"details\":\"takes a list of instructions and executes them in orderif any of the instructions fail, it will emit an error event and continue to execute the rest of the instructions\",\"params\":{\"_params\":\"array of ExecuteParam, includes target, callData, expiration, signatures\"}},\"getFee(uint16,uint16,uint64,address)\":{\"details\":\"to support ULNv2getFee can revert if _sender doesn't pass ACL\",\"params\":{\"\":\"//_outboundProofType outbound proof type\",\"_confirmations\":\"block confirmations\",\"_dstEid\":\"destination EndpointId\",\"_sender\":\"message sender address\"}},\"getFee(uint32,uint64,address,bytes)\":{\"details\":\"getFee can revert if _sender doesn't pass ACL\",\"params\":{\"_confirmations\":\"block confirmations\",\"_dstEid\":\"destination EndpointId\",\"_options\":\"dvn options\",\"_sender\":\"message sender address\"},\"returns\":{\"fee\":\"fee in native amount\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"overrides AccessControl to allow self/admin to grant role'function sig 0x2f2ff15d\",\"params\":{\"_account\":\"account to grant role to\",\"_role\":\"role to grant\"}},\"hasAcl(address)\":{\"details\":\"Access control list using allowlist and denylist1) if one address is in the denylist -> deny2) else if address in the allowlist OR allowlist is empty (allows everyone)-> allow3) else deny\",\"params\":{\"_sender\":\"address to check\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hashCallData(uint32,address,bytes,uint256)\":{\"params\":{\"_callData\":\"call data\",\"_expiration\":\"expiration timestamp\",\"_target\":\"target address\"},\"returns\":{\"_0\":\"hash of above\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quorumChangeAdmin((uint32,address,bytes,uint256,bytes))\":{\"details\":\"calldata in the case is abi.encode new admin address\"},\"renounceRole(bytes32,address)\":{\"details\":\"overrides AccessControl to disable renouncing of roles\"},\"revokeRole(bytes32,address)\":{\"details\":\"overrides AccessControl to allow self/admin to revoke rolefunction sig 0xd547741f\",\"params\":{\"_account\":\"account to revoke role from\",\"_role\":\"role to revoke\"}},\"setDefaultMultiplierBps(uint16)\":{\"params\":{\"_multiplierBps\":\"default multiplier for worker fee\"}},\"setDstConfig((uint32,uint64,uint16,uint128)[])\":{\"params\":{\"_params\":\"array of DstConfigParam\"}},\"setPaused(bool)\":{\"details\":\"flag to pause execution of workers (if used with whenNotPaused modifier)\",\"params\":{\"_paused\":\"true to pause, false to unpause\"}},\"setPriceFeed(address)\":{\"params\":{\"_priceFeed\":\"price feed address\"}},\"setQuorum(uint64)\":{\"details\":\"set quorum for multisigfunction sig 0x8585c945\",\"params\":{\"_quorum\":\"to set\"}},\"setSigner(address,bool)\":{\"details\":\"set signers for multisigfunction sig 0x31cb6105\",\"params\":{\"_active\":\"true to add, false to remove\",\"_signer\":\"signer address\"}},\"setWorkerFeeLib(address)\":{\"params\":{\"_workerFeeLib\":\"worker fee lib address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawFee(address,address,uint256)\":{\"details\":\"supports withdrawing fee from ULN301, ULN302 and more\",\"params\":{\"_amount\":\"amount to withdraw\",\"_lib\":\"message lib address\",\"_to\":\"address to withdraw fee to\"}},\"withdrawFeeFromUlnV2(address,address,uint256)\":{\"details\":\"to support ULNv2the withdrawFee function for ULN30X is built in the Worker contract\",\"params\":{\"_amount\":\"amount to withdraw\",\"_lib\":\"message lib address\",\"_to\":\"address to withdraw to\"}},\"withdrawToken(address,address,uint256)\":{\"details\":\"supports withdrawing token from the contract\",\"params\":{\"_amount\":\"amount to withdraw\",\"_to\":\"address to withdraw token to\",\"_token\":\"token address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quorumChangeAdmin((uint32,address,bytes,uint256,bytes))\":{\"notice\":\"function for quorum to change admin without going through execute function\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messagelib/contracts/uln/dvn/DVN.sol\":\"DVN\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { SetConfigParam } from \\\"./IMessageLibManager.sol\\\";\\n\\nenum MessageLibType {\\n    Send,\\n    Receive,\\n    SendAndReceive\\n}\\n\\ninterface IMessageLib is IERC165 {\\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\\n\\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n\\n    function messageLibType() external view returns (MessageLibType);\\n}\\n\",\"keccak256\":\"0x5cf5f24751b4e3ea1c9c5ded07cedfdfd62566b6daaffcc0144733859c9dba0c\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { MessagingFee } from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport { IMessageLib } from \\\"./IMessageLib.sol\\\";\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\ninterface ISendLib is IMessageLib {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\\n\\n    function quote(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function withdrawFee(address _to, uint256 _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf1c07bc61e7b1dce195ed12d50f87980fbf2d63cac1326fd28287f55fe0ba625\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ADDRESS_ZERO = address(0);\\n\\n    error Transfer_NativeFailed(address _to, uint256 _value);\\n    error Transfer_ToAddressIsZero();\\n\\n    function native(address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        (bool success, ) = _to.call{ value: _value }(\\\"\\\");\\n        if (!success) revert Transfer_NativeFailed(_to, _value);\\n    }\\n\\n    function token(address _token, address _to, uint256 _value) internal {\\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\\n        IERC20(_token).safeTransfer(_to, _value);\\n    }\\n\\n    function nativeOrToken(address _token, address _to, uint256 _value) internal {\\n        if (_token == ADDRESS_ZERO) {\\n            native(_to, _value);\\n        } else {\\n            token(_token, _to, _value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x621d6dd5b8b7e827351459fff4ac87c16ba4656757592cf67de8b199aea4cf9a\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroUltraLightNodeV2 {\\n    // Relayer functions\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes32 _blockData,\\n        bytes calldata _transactionProof\\n    ) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function getAppConfig(\\n        uint16 _remoteChainId,\\n        address _userApplicationAddress\\n    ) external view returns (ApplicationConfiguration memory);\\n\\n    function accruedNativeFee(address _address) external view returns (uint);\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    event HashReceived(\\n        uint16 indexed srcChainId,\\n        address indexed oracle,\\n        bytes32 lookupHash,\\n        bytes32 blockData,\\n        uint confirmations\\n    );\\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\\n    event Packet(bytes payload);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event PacketReceived(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\\n    event SetDefaultConfigForChainId(\\n        uint16 indexed chainId,\\n        uint16 inboundProofLib,\\n        uint64 inboundBlockConfirm,\\n        address relayer,\\n        uint16 outboundProofType,\\n        uint64 outboundBlockConfirm,\\n        address oracle\\n    );\\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address indexed tokenAddress);\\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\\n    event SetTreasury(address indexed treasuryAddress);\\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\\n}\\n\",\"keccak256\":\"0xf1f36bbbc40d03b96affa151affb47da75a1b69dc79f4b311841a072d12fdd22\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/Worker.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport { ISendLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\\\";\\nimport { Transfer } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\\\";\\n\\nimport { IWorker } from \\\"./interfaces/IWorker.sol\\\";\\n\\nabstract contract Worker is AccessControl, Pausable, IWorker {\\n    bytes32 internal constant MESSAGE_LIB_ROLE = keccak256(\\\"MESSAGE_LIB_ROLE\\\");\\n    bytes32 internal constant ALLOWLIST = keccak256(\\\"ALLOWLIST\\\");\\n    bytes32 internal constant DENYLIST = keccak256(\\\"DENYLIST\\\");\\n    bytes32 internal constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    address public workerFeeLib;\\n\\n    uint64 public allowlistSize;\\n    uint16 public defaultMultiplierBps;\\n    address public priceFeed;\\n\\n    mapping(uint32 eid => uint8[] optionTypes) internal supportedOptionTypes;\\n\\n    // ========================= Constructor =========================\\n\\n    /// @param _messageLibs array of message lib addresses that are granted the MESSAGE_LIB_ROLE\\n    /// @param _priceFeed price feed address\\n    /// @param _defaultMultiplierBps default multiplier for worker fee\\n    /// @param _roleAdmin address that is granted the DEFAULT_ADMIN_ROLE (can grant and revoke all roles)\\n    /// @param _admins array of admin addresses that are granted the ADMIN_ROLE\\n    constructor(\\n        address[] memory _messageLibs,\\n        address _priceFeed,\\n        uint16 _defaultMultiplierBps,\\n        address _roleAdmin,\\n        address[] memory _admins\\n    ) {\\n        defaultMultiplierBps = _defaultMultiplierBps;\\n        priceFeed = _priceFeed;\\n\\n        if (_roleAdmin != address(0x0)) {\\n            _grantRole(DEFAULT_ADMIN_ROLE, _roleAdmin); // _roleAdmin can grant and revoke all roles\\n        }\\n\\n        for (uint256 i = 0; i < _messageLibs.length; ++i) {\\n            _grantRole(MESSAGE_LIB_ROLE, _messageLibs[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _admins.length; ++i) {\\n            _grantRole(ADMIN_ROLE, _admins[i]);\\n        }\\n    }\\n\\n    // ========================= Modifier =========================\\n\\n    modifier onlyAcl(address _sender) {\\n        if (!hasAcl(_sender)) {\\n            revert Worker_NotAllowed();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Access control list using allowlist and denylist\\n    /// @dev 1) if one address is in the denylist -> deny\\n    /// @dev 2) else if address in the allowlist OR allowlist is empty (allows everyone)-> allow\\n    /// @dev 3) else deny\\n    /// @param _sender address to check\\n    function hasAcl(address _sender) public view returns (bool) {\\n        if (hasRole(DENYLIST, _sender)) {\\n            return false;\\n        } else if (allowlistSize == 0 || hasRole(ALLOWLIST, _sender)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // ========================= OnyDefaultAdmin =========================\\n\\n    /// @dev flag to pause execution of workers (if used with whenNotPaused modifier)\\n    /// @param _paused true to pause, false to unpause\\n    function setPaused(bool _paused) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_paused) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    // ========================= OnlyAdmin =========================\\n\\n    /// @param _priceFeed price feed address\\n    function setPriceFeed(address _priceFeed) external onlyRole(ADMIN_ROLE) {\\n        priceFeed = _priceFeed;\\n        emit SetPriceFeed(_priceFeed);\\n    }\\n\\n    /// @param _workerFeeLib worker fee lib address\\n    function setWorkerFeeLib(address _workerFeeLib) external onlyRole(ADMIN_ROLE) {\\n        workerFeeLib = _workerFeeLib;\\n        emit SetWorkerLib(_workerFeeLib);\\n    }\\n\\n    /// @param _multiplierBps default multiplier for worker fee\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external onlyRole(ADMIN_ROLE) {\\n        defaultMultiplierBps = _multiplierBps;\\n        emit SetDefaultMultiplierBps(_multiplierBps);\\n    }\\n\\n    /// @dev supports withdrawing fee from ULN301, ULN302 and more\\n    /// @param _lib message lib address\\n    /// @param _to address to withdraw fee to\\n    /// @param _amount amount to withdraw\\n    function withdrawFee(address _lib, address _to, uint256 _amount) external onlyRole(ADMIN_ROLE) {\\n        if (!hasRole(MESSAGE_LIB_ROLE, _lib)) revert Worker_OnlyMessageLib();\\n        ISendLib(_lib).withdrawFee(_to, _amount);\\n        emit Withdraw(_lib, _to, _amount);\\n    }\\n\\n    /// @dev supports withdrawing token from the contract\\n    /// @param _token token address\\n    /// @param _to address to withdraw token to\\n    /// @param _amount amount to withdraw\\n    function withdrawToken(address _token, address _to, uint256 _amount) external onlyRole(ADMIN_ROLE) {\\n        // transfers native if _token is address(0x0)\\n        Transfer.nativeOrToken(_token, _to, _amount);\\n    }\\n\\n    function setSupportedOptionTypes(uint32 _eid, uint8[] calldata _optionTypes) external onlyRole(ADMIN_ROLE) {\\n        supportedOptionTypes[_eid] = _optionTypes;\\n    }\\n\\n    // ========================= View Functions =========================\\n    function getSupportedOptionTypes(uint32 _eid) external view returns (uint8[] memory) {\\n        return supportedOptionTypes[_eid];\\n    }\\n\\n    // ========================= Internal Functions =========================\\n\\n    /// @dev overrides AccessControl to allow for counting of allowlistSize\\n    /// @param _role role to grant\\n    /// @param _account address to grant role to\\n    function _grantRole(bytes32 _role, address _account) internal override {\\n        if (_role == ALLOWLIST && !hasRole(_role, _account)) {\\n            ++allowlistSize;\\n        }\\n        super._grantRole(_role, _account);\\n    }\\n\\n    /// @dev overrides AccessControl to allow for counting of allowlistSize\\n    /// @param _role role to revoke\\n    /// @param _account address to revoke role from\\n    function _revokeRole(bytes32 _role, address _account) internal override {\\n        if (_role == ALLOWLIST && hasRole(_role, _account)) {\\n            --allowlistSize;\\n        }\\n        super._revokeRole(_role, _account);\\n    }\\n\\n    /// @dev overrides AccessControl to disable renouncing of roles\\n    function renounceRole(bytes32 /*role*/, address /*account*/) public pure override {\\n        revert Worker_RoleRenouncingDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0xa1354eff2f04560409908cd3dd25ff6828598f4228e0d9cd20a9468df32a2bd6\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/interfaces/IWorker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWorker {\\n    event SetWorkerLib(address workerLib);\\n    event SetPriceFeed(address priceFeed);\\n    event SetDefaultMultiplierBps(uint16 multiplierBps);\\n    event SetSupportedOptionTypes(uint32 dstEid, uint8[] optionTypes);\\n    event Withdraw(address lib, address to, uint256 amount);\\n\\n    error Worker_NotAllowed();\\n    error Worker_OnlyMessageLib();\\n    error Worker_RoleRenouncingDisabled();\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function priceFeed() external view returns (address);\\n\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external;\\n\\n    function defaultMultiplierBps() external view returns (uint16);\\n\\n    function withdrawFee(address _lib, address _to, uint256 _amount) external;\\n\\n    function setSupportedOptionTypes(uint32 _eid, uint8[] calldata _optionTypes) external;\\n\\n    function getSupportedOptionTypes(uint32 _eid) external view returns (uint8[] memory);\\n}\\n\",\"keccak256\":\"0xa6b61913767305227576cc6da5067de4208f09a4f58bfbfe32beafdfae9869b1\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/uln/dvn/DVN.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroUltraLightNodeV2 } from \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\\\";\\n\\nimport { Worker } from \\\"../../Worker.sol\\\";\\nimport { MultiSig } from \\\"./MultiSig.sol\\\";\\nimport { IDVN } from \\\"../interfaces/IDVN.sol\\\";\\nimport { IDVNFeeLib } from \\\"../interfaces/IDVNFeeLib.sol\\\";\\nimport { IReceiveUlnE2 } from \\\"../interfaces/IReceiveUlnE2.sol\\\";\\n\\nstruct ExecuteParam {\\n    uint32 vid;\\n    address target;\\n    bytes callData;\\n    uint256 expiration;\\n    bytes signatures;\\n}\\n\\ncontract DVN is Worker, MultiSig, IDVN {\\n    // to uniquely identify this DVN instance\\n    // set to endpoint v1 eid if available OR endpoint v2 eid % 30_000\\n    uint32 public immutable vid;\\n\\n    mapping(uint32 dstEid => DstConfig) public dstConfig;\\n    mapping(bytes32 executableHash => bool used) public usedHashes;\\n\\n    error DVN_OnlySelf();\\n    error DVN_InvalidRole(bytes32 role);\\n    error DVN_InstructionExpired();\\n    error DVN_InvalidTarget(address target);\\n    error DVN_InvalidVid(uint32 vid);\\n    error DVN_InvalidSignatures();\\n    error DVN_DuplicatedHash(bytes32 executableHash);\\n\\n    event VerifySignaturesFailed(uint256 idx);\\n    event ExecuteFailed(uint256 _index, bytes _data);\\n    event HashAlreadyUsed(ExecuteParam param, bytes32 _hash);\\n    // same as DVNFeePaid, but for ULNv2\\n    event VerifierFeePaid(uint256 fee);\\n\\n    // ========================= Constructor =========================\\n\\n    /// @dev DVN doesn't have a roleAdmin (address(0x0))\\n    /// @dev Supports all of ULNv2, ULN301, ULN302 and more\\n    /// @param _vid unique identifier for this DVN instance\\n    /// @param _messageLibs array of message lib addresses that are granted the MESSAGE_LIB_ROLE\\n    /// @param _priceFeed price feed address\\n    /// @param _signers array of signer addresses for multisig\\n    /// @param _quorum quorum for multisig\\n    /// @param _admins array of admin addresses that are granted the ADMIN_ROLE\\n    constructor(\\n        uint32 _vid,\\n        address[] memory _messageLibs,\\n        address _priceFeed,\\n        address[] memory _signers,\\n        uint64 _quorum,\\n        address[] memory _admins\\n    ) Worker(_messageLibs, _priceFeed, 12000, address(0x0), _admins) MultiSig(_signers, _quorum) {\\n        vid = _vid;\\n    }\\n\\n    // ========================= Modifier =========================\\n\\n    /// @dev depending on role, restrict access to only self or admin\\n    /// @dev ALLOWLIST, DENYLIST, MESSAGE_LIB_ROLE can only be granted/revoked by self\\n    /// @dev ADMIN_ROLE can only be granted/revoked by admin\\n    /// @dev reverts if not one of the above roles\\n    /// @param _role role to check\\n    modifier onlySelfOrAdmin(bytes32 _role) {\\n        if (_role == ALLOWLIST || _role == DENYLIST || _role == MESSAGE_LIB_ROLE) {\\n            // self required\\n            if (address(this) != msg.sender) {\\n                revert DVN_OnlySelf();\\n            }\\n        } else if (_role == ADMIN_ROLE) {\\n            // admin required\\n            _checkRole(ADMIN_ROLE);\\n        } else {\\n            revert DVN_InvalidRole(_role);\\n        }\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        if (address(this) != msg.sender) {\\n            revert DVN_OnlySelf();\\n        }\\n        _;\\n    }\\n\\n    // ========================= OnlySelf =========================\\n\\n    /// @dev set signers for multisig\\n    /// @dev function sig 0x31cb6105\\n    /// @param _signer signer address\\n    /// @param _active true to add, false to remove\\n    function setSigner(address _signer, bool _active) external onlySelf {\\n        _setSigner(_signer, _active);\\n    }\\n\\n    /// @dev set quorum for multisig\\n    /// @dev function sig 0x8585c945\\n    /// @param _quorum to set\\n    function setQuorum(uint64 _quorum) external onlySelf {\\n        _setQuorum(_quorum);\\n    }\\n\\n    // ========================= OnlySelf / OnlyAdmin =========================\\n\\n    /// @dev overrides AccessControl to allow self/admin to grant role'\\n    /// @dev function sig 0x2f2ff15d\\n    /// @param _role role to grant\\n    /// @param _account account to grant role to\\n    function grantRole(bytes32 _role, address _account) public override onlySelfOrAdmin(_role) {\\n        _grantRole(_role, _account);\\n    }\\n\\n    /// @dev overrides AccessControl to allow self/admin to revoke role\\n    /// @dev function sig 0xd547741f\\n    /// @param _role role to revoke\\n    /// @param _account account to revoke role from\\n    function revokeRole(bytes32 _role, address _account) public override onlySelfOrAdmin(_role) {\\n        _revokeRole(_role, _account);\\n    }\\n\\n    // ========================= OnlyQuorum =========================\\n\\n    /// @notice function for quorum to change admin without going through execute function\\n    /// @dev calldata in the case is abi.encode new admin address\\n    function quorumChangeAdmin(ExecuteParam calldata _param) external {\\n        if (_param.expiration <= block.timestamp) {\\n            revert DVN_InstructionExpired();\\n        }\\n        if (_param.target != address(this)) {\\n            revert DVN_InvalidTarget(_param.target);\\n        }\\n        if (_param.vid != vid) {\\n            revert DVN_InvalidVid(_param.vid);\\n        }\\n\\n        // generate and validate hash\\n        bytes32 hash = hashCallData(_param.vid, _param.target, _param.callData, _param.expiration);\\n        (bool sigsValid, ) = verifySignatures(hash, _param.signatures);\\n        if (!sigsValid) {\\n            revert DVN_InvalidSignatures();\\n        }\\n        if (usedHashes[hash]) {\\n            revert DVN_DuplicatedHash(hash);\\n        }\\n\\n        usedHashes[hash] = true;\\n        _grantRole(ADMIN_ROLE, abi.decode(_param.callData, (address)));\\n    }\\n\\n    // ========================= OnlyAdmin =========================\\n\\n    /// @param _params array of DstConfigParam\\n    function setDstConfig(DstConfigParam[] calldata _params) external onlyRole(ADMIN_ROLE) {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            DstConfigParam calldata param = _params[i];\\n            dstConfig[param.dstEid] = DstConfig(param.gas, param.multiplierBps, param.floorMarginUSD);\\n        }\\n        emit SetDstConfig(_params);\\n    }\\n\\n    /// @dev takes a list of instructions and executes them in order\\n    /// @dev if any of the instructions fail, it will emit an error event and continue to execute the rest of the instructions\\n    /// @param _params array of ExecuteParam, includes target, callData, expiration, signatures\\n    function execute(ExecuteParam[] calldata _params) external onlyRole(ADMIN_ROLE) {\\n        for (uint256 i = 0; i < _params.length; ++i) {\\n            ExecuteParam calldata param = _params[i];\\n            // 1. skip if invalid vid\\n            if (param.vid != vid) {\\n                continue;\\n            }\\n\\n            // 2. skip if expired\\n            if (param.expiration <= block.timestamp) {\\n                continue;\\n            }\\n\\n            // generate and validate hash\\n            bytes32 hash = hashCallData(param.vid, param.target, param.callData, param.expiration);\\n\\n            // 3. check signatures\\n            (bool sigsValid, ) = verifySignatures(hash, param.signatures);\\n            if (!sigsValid) {\\n                emit VerifySignaturesFailed(i);\\n                continue;\\n            }\\n\\n            // 4. should check hash\\n            bool shouldCheckHash = _shouldCheckHash(bytes4(param.callData));\\n            if (shouldCheckHash) {\\n                if (usedHashes[hash]) {\\n                    emit HashAlreadyUsed(param, hash);\\n                    continue;\\n                } else {\\n                    usedHashes[hash] = true; // prevent reentry and replay attack\\n                }\\n            }\\n\\n            (bool success, bytes memory rtnData) = param.target.call(param.callData);\\n            if (!success) {\\n                if (shouldCheckHash) {\\n                    // need to unset the usedHash otherwise it cant be used\\n                    usedHashes[hash] = false;\\n                }\\n                // emit an event in any case\\n                emit ExecuteFailed(i, rtnData);\\n            }\\n        }\\n    }\\n\\n    /// @dev to support ULNv2\\n    /// @dev the withdrawFee function for ULN30X is built in the Worker contract\\n    /// @param _lib message lib address\\n    /// @param _to address to withdraw to\\n    /// @param _amount amount to withdraw\\n    function withdrawFeeFromUlnV2(address _lib, address payable _to, uint256 _amount) external onlyRole(ADMIN_ROLE) {\\n        if (!hasRole(MESSAGE_LIB_ROLE, _lib)) {\\n            revert Worker_OnlyMessageLib();\\n        }\\n        ILayerZeroUltraLightNodeV2(_lib).withdrawNative(_to, _amount);\\n    }\\n\\n    // ========================= OnlyMessageLib =========================\\n\\n    /// @dev for ULN301, ULN302 and more to assign job\\n    /// @dev dvn network can reject job from _sender by adding/removing them from allowlist/denylist\\n    /// @param _param assign job param\\n    /// @param _options dvn options\\n    function assignJob(\\n        AssignJobParam calldata _param,\\n        bytes calldata _options\\n    ) external payable onlyRole(MESSAGE_LIB_ROLE) onlyAcl(_param.sender) returns (uint256 totalFee) {\\n        IDVNFeeLib.FeeParams memory feeParams = IDVNFeeLib.FeeParams(\\n            priceFeed,\\n            _param.dstEid,\\n            _param.confirmations,\\n            _param.sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        totalFee = IDVNFeeLib(workerFeeLib).getFeeOnSend(feeParams, dstConfig[_param.dstEid], _options);\\n    }\\n\\n    /// @dev to support ULNv2\\n    /// @dev dvn network can reject job from _sender by adding/removing them from allowlist/denylist\\n    /// @param _dstEid destination EndpointId\\n    /// @param //_outboundProofType outbound proof type\\n    /// @param _confirmations block confirmations\\n    /// @param _sender message sender address\\n    function assignJob(\\n        uint16 _dstEid,\\n        uint16 /*_outboundProofType*/,\\n        uint64 _confirmations,\\n        address _sender\\n    ) external onlyRole(MESSAGE_LIB_ROLE) onlyAcl(_sender) returns (uint256 totalFee) {\\n        IDVNFeeLib.FeeParams memory params = IDVNFeeLib.FeeParams(\\n            priceFeed,\\n            _dstEid,\\n            _confirmations,\\n            _sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        // ULNV2 does not have dvn options\\n        totalFee = IDVNFeeLib(workerFeeLib).getFeeOnSend(params, dstConfig[_dstEid], bytes(\\\"\\\"));\\n        emit VerifierFeePaid(totalFee);\\n    }\\n\\n    // ========================= View =========================\\n\\n    /// @dev getFee can revert if _sender doesn't pass ACL\\n    /// @param _dstEid destination EndpointId\\n    /// @param _confirmations block confirmations\\n    /// @param _sender message sender address\\n    /// @param _options dvn options\\n    /// @return fee fee in native amount\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view onlyAcl(_sender) returns (uint256 fee) {\\n        IDVNFeeLib.FeeParams memory params = IDVNFeeLib.FeeParams(\\n            priceFeed,\\n            _dstEid,\\n            _confirmations,\\n            _sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        return IDVNFeeLib(workerFeeLib).getFee(params, dstConfig[_dstEid], _options);\\n    }\\n\\n    /// @dev to support ULNv2\\n    /// @dev getFee can revert if _sender doesn't pass ACL\\n    /// @param _dstEid destination EndpointId\\n    /// @param //_outboundProofType outbound proof type\\n    /// @param _confirmations block confirmations\\n    /// @param _sender message sender address\\n    function getFee(\\n        uint16 _dstEid,\\n        uint16 /*_outboundProofType*/,\\n        uint64 _confirmations,\\n        address _sender\\n    ) public view onlyAcl(_sender) returns (uint256 fee) {\\n        IDVNFeeLib.FeeParams memory params = IDVNFeeLib.FeeParams(\\n            priceFeed,\\n            _dstEid,\\n            _confirmations,\\n            _sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        return IDVNFeeLib(workerFeeLib).getFee(params, dstConfig[_dstEid], bytes(\\\"\\\"));\\n    }\\n\\n    /// @param _target target address\\n    /// @param _callData call data\\n    /// @param _expiration expiration timestamp\\n    /// @return hash of above\\n    function hashCallData(\\n        uint32 _vid,\\n        address _target,\\n        bytes calldata _callData,\\n        uint256 _expiration\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_vid, _target, _expiration, _callData));\\n    }\\n\\n    // ========================= Internal =========================\\n\\n    /// @dev to save gas, we don't check hash for some functions (where replaying won't change the state)\\n    /// @dev for example, some administrative functions like changing signers, the contract should check hash to double spending\\n    /// @dev should ensure that all onlySelf functions have unique functionSig\\n    /// @param _functionSig function signature\\n    /// @return true if should check hash\\n    function _shouldCheckHash(bytes4 _functionSig) internal pure returns (bool) {\\n        // never check for these selectors to save gas\\n        return\\n            _functionSig != IReceiveUlnE2.verify.selector && // 0x0223536e, replaying won't change the state\\n            _functionSig != ILayerZeroUltraLightNodeV2.updateHash.selector; // 0x704316e5, replaying will be revert at uln\\n    }\\n}\\n\",\"keccak256\":\"0xf462b9b4145dc346c18f17b7fc735a5b32cbfbfa3028a92d213904593145a6b8\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/dvn/MultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract MultiSig {\\n    enum Errors {\\n        NoError,\\n        SignatureError,\\n        DuplicatedSigner,\\n        SignerNotInCommittee\\n    }\\n\\n    mapping(address signer => bool active) public signers;\\n    uint64 public signerSize;\\n    uint64 public quorum;\\n\\n    error MultiSig_OnlySigner();\\n    error MultiSig_QuorumIsZero();\\n    error MultiSig_SignersSizeIsLessThanQuorum(uint64 signersSize, uint64 quorum);\\n    error MultiSig_UnorderedSigners();\\n    error MultiSig_StateAlreadySet(address signer, bool active);\\n\\n    event UpdateSigner(address _signer, bool _active);\\n    event UpdateQuorum(uint64 _quorum);\\n\\n    modifier onlySigner() {\\n        if (!signers[msg.sender]) {\\n            revert MultiSig_OnlySigner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address[] memory _signers, uint64 _quorum) {\\n        if (_quorum == 0) {\\n            revert MultiSig_QuorumIsZero();\\n        }\\n        if (_signers.length < _quorum) {\\n            revert MultiSig_SignersSizeIsLessThanQuorum(uint64(_signers.length), _quorum);\\n        }\\n        address lastSigner = address(0);\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n            if (signer <= lastSigner) {\\n                revert MultiSig_UnorderedSigners();\\n            }\\n            signers[signer] = true;\\n            lastSigner = signer;\\n        }\\n        signerSize = uint64(_signers.length);\\n        quorum = _quorum;\\n    }\\n\\n    function _setSigner(address _signer, bool _active) internal {\\n        if (signers[_signer] == _active) {\\n            revert MultiSig_StateAlreadySet(_signer, _active);\\n        }\\n        signers[_signer] = _active;\\n        uint64 _signerSize = _active ? signerSize + 1 : signerSize - 1;\\n        uint64 _quorum = quorum;\\n        if (_signerSize < _quorum) {\\n            revert MultiSig_SignersSizeIsLessThanQuorum(_signerSize, _quorum);\\n        }\\n        signerSize = _signerSize;\\n        emit UpdateSigner(_signer, _active);\\n    }\\n\\n    function _setQuorum(uint64 _quorum) internal {\\n        if (_quorum == 0) {\\n            revert MultiSig_QuorumIsZero();\\n        }\\n        uint64 _signerSize = signerSize;\\n        if (_signerSize < _quorum) {\\n            revert MultiSig_SignersSizeIsLessThanQuorum(_signerSize, _quorum);\\n        }\\n        quorum = _quorum;\\n        emit UpdateQuorum(_quorum);\\n    }\\n\\n    function verifySignatures(bytes32 _hash, bytes calldata _signatures) public view returns (bool, Errors) {\\n        if (_signatures.length != uint256(quorum) * 65) {\\n            return (false, Errors.SignatureError);\\n        }\\n\\n        bytes32 messageDigest = _getEthSignedMessageHash(_hash);\\n\\n        address lastSigner = address(0); // There cannot be a signer with address 0.\\n        for (uint256 i = 0; i < quorum; i++) {\\n            bytes calldata signature = _signatures[i * 65:(i + 1) * 65];\\n            (address currentSigner, ECDSA.RecoverError error) = ECDSA.tryRecover(messageDigest, signature);\\n\\n            if (error != ECDSA.RecoverError.NoError) return (false, Errors.SignatureError);\\n            if (currentSigner <= lastSigner) return (false, Errors.DuplicatedSigner); // prevent duplicate signatures\\n            if (!signers[currentSigner]) return (false, Errors.SignerNotInCommittee); // signature is not in committee\\n            lastSigner = currentSigner;\\n        }\\n        return (true, Errors.NoError);\\n    }\\n\\n    function _getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n}\\n\",\"keccak256\":\"0x18318f5cbe681d1d466971314bcdb23b9f8b9aa0466b3760395534fe934949c5\",\"license\":\"LZBL-1.2\"},\"contracts/messagelib/contracts/uln/interfaces/IDVN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IWorker } from \\\"../../interfaces/IWorker.sol\\\";\\nimport { ILayerZeroDVN } from \\\"./ILayerZeroDVN.sol\\\";\\n\\ninterface IDVN is IWorker, ILayerZeroDVN {\\n    struct DstConfigParam {\\n        uint32 dstEid;\\n        uint64 gas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD;\\n    }\\n\\n    struct DstConfig {\\n        uint64 gas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD; // uses priceFeed PRICE_RATIO_DENOMINATOR\\n    }\\n\\n    event SetDstConfig(DstConfigParam[] params);\\n\\n    function dstConfig(uint32 _dstEid) external view returns (uint64, uint16, uint128);\\n}\\n\",\"keccak256\":\"0xa7fbe84ee6a646a09577f409b6c4c5ad05467e6896f9da6db91510801d6eaa4f\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/uln/interfaces/IDVNFeeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IDVN } from \\\"./IDVN.sol\\\";\\n\\ninterface IDVNFeeLib {\\n    struct FeeParams {\\n        address priceFeed;\\n        uint32 dstEid;\\n        uint64 confirmations;\\n        address sender;\\n        uint64 quorum;\\n        uint16 defaultMultiplierBps;\\n    }\\n\\n    error DVN_UnsupportedOptionType(uint8 optionType);\\n    error DVN_EidNotSupported(uint32 eid);\\n\\n    function getFeeOnSend(\\n        FeeParams calldata _params,\\n        IDVN.DstConfig calldata _dstConfig,\\n        bytes calldata _options\\n    ) external payable returns (uint256 fee);\\n\\n    function getFee(\\n        FeeParams calldata _params,\\n        IDVN.DstConfig calldata _dstConfig,\\n        bytes calldata _options\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0x7edb42d1580a08e77d5cc48d83087f7d8c35138605456a5c82a583df3a7cbd73\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/uln/interfaces/ILayerZeroDVN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroDVN {\\n    struct AssignJobParam {\\n        uint32 dstEid;\\n        bytes packetHeader;\\n        bytes32 payloadHash;\\n        uint64 confirmations;\\n        address sender;\\n    }\\n\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _packetHeader - version + nonce + path\\n    // @param _payloadHash - hash of guid + message\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function assignJob(AssignJobParam calldata _param, bytes calldata _options) external payable returns (uint256 fee);\\n\\n    // @notice query the dvn fee for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0x308e77078242fd5c5746ec29c12e618249134f9e4377c0028ab8f59c07a6014b\",\"license\":\"MIT\"},\"contracts/messagelib/contracts/uln/interfaces/IReceiveUlnE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @dev should be implemented by the ReceiveUln302 contract and future ReceiveUln contracts on EndpointV2\\ninterface IReceiveUlnE2 {\\n    /// @notice for each dvn to verify the payload\\n    /// @dev this function signature 0x0223536e\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external;\\n\\n    /// @notice verify the payload at endpoint, will check if all DVNs verified\\n    function commitVerification(bytes calldata _packetHeader, bytes32 _payloadHash) external;\\n}\\n\",\"keccak256\":\"0xcdf7e690e5d5c0a3ec26a0d7b1a7fe49c7d16a3634721c3944f77d13ff5d4a91\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003c1038038062003c108339810160408190526200003491620004c4565b6001805460ff61ffff60e81b01191661017760ed1b179055600280546001600160a01b0319166001600160a01b03861617905582828686612ee060008660005b8551811015620000d557620000cc7f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110620000b857620000b862000597565b60200260200101516200027b60201b60201c565b60010162000074565b5060005b815181101562000126576200011d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110620000b857620000b862000597565b600101620000d9565b505050505050806001600160401b03166000036200015757604051635f86e17760e01b815260040160405180910390fd5b806001600160401b0316825110156200019d5781516040516378e2c15760e11b81526001600160401b039182166004820152908216602482015260440160405180910390fd5b6000805b83518110156200022f576000848281518110620001c257620001c262000597565b60200260200101519050826001600160a01b0316816001600160a01b031611620001ff576040516305fa937f60e11b815260040160405180910390fd5b6001600160a01b0381166000908152600460205260409020805460ff1916600190811790915590925001620001a1565b50509051600580546001600160401b0393841668010000000000000000026001600160801b0319909116939092169290921717905550505063ffffffff90921660805250620005ea9050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015620002cc57506000828152602081815260408083206001600160a01b038516845290915290205460ff16155b15620003195760018054601590620002f490600160a81b90046001600160401b0316620005ad565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b62000325828262000329565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000325576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003f757600080fd5b919050565b600082601f8301126200040e57600080fd5b815160206001600160401b03808311156200042d576200042d620003c9565b8260051b604051601f19603f83011681018181108482111715620004555762000455620003c9565b60405293845260208187018101949081019250878511156200047657600080fd5b6020870191505b84821015620004a1576200049182620003df565b835291830191908301906200047d565b979650505050505050565b80516001600160401b0381168114620003f757600080fd5b60008060008060008060c08789031215620004de57600080fd5b865163ffffffff81168114620004f357600080fd5b60208801519096506001600160401b03808211156200051157600080fd5b6200051f8a838b01620003fc565b96506200052f60408a01620003df565b955060608901519150808211156200054657600080fd5b620005548a838b01620003fc565b94506200056460808a01620004ac565b935060a08901519150808211156200057b57600080fd5b506200058a89828a01620003fc565b9150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b038281166002600160401b03198101620005e057634e487b7160e01b600052601160045260246000fd5b6001019392505050565b6080516135fc620006146000396000818161074c0152818161122d0152611b1401526135fc6000f3fe60806040526004361061022f5760003560e01c80638585c9451161012e578063c7a823e0116100ab578063d547741f1161006f578063d547741f146107aa578063dafe0ccc146107ca578063f010cb23146107ea578063f3b4ebd01461080a578063fd62e7501461082a57600080fd5b8063c7a823e0146106cc578063c7b2370b146106fa578063cd88b9031461071a578063cf34c7681461073a578063d2ae21041461078357600080fd5b8063aef18bf7116100f2578063aef18bf714610617578063b143044b14610647578063c358de0a14610667578063c416aa5114610687578063c5e193cd146106ac57600080fd5b80638585c9451461052a57806391d148541461054a57806395d376d71461056a5780639e9449651461057d578063a217fddf1461060257600080fd5b80632f2ff15d116101bc5780635553fb8e116101805780635553fb8e1461046a5780635c975abb1461048a578063724e78da146104a2578063736c0d5b146104c2578063741bef1a146104f257600080fd5b80632f2ff15d146103ca57806330bb3aac146103ea57806331cb61051461040a57806336568abe1461042a57806352d3b8711461044a57600080fd5b806316c38b3c1161020357806316c38b3c146102e05780631703a01814610300578063248a9ca31461033f57806326e67a371461037d5780632de11376146103aa57600080fd5b8062bf2e801461023457806301e336671461026e57806301ffc9a7146102905780631095b6d7146102c0575b600080fd5b34801561024057600080fd5b5060015461025690600160e81b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561027a57600080fd5b5061028e610289366004612928565b61084a565b005b34801561029c57600080fd5b506102b06102ab366004612969565b610873565b6040519015158152602001610265565b3480156102cc57600080fd5b5061028e6102db366004612928565b6108aa565b3480156102ec57600080fd5b5061028e6102fb3660046129a1565b6109ac565b34801561030c57600080fd5b5060055461032790600160401b90046001600160401b031681565b6040516001600160401b039091168152602001610265565b34801561034b57600080fd5b5061036f61035a3660046129be565b60009081526020819052604090206001015490565b604051908152602001610265565b34801561038957600080fd5b5061039d6103983660046129eb565b6109d1565b6040516102659190612a06565b3480156103b657600080fd5b506102b06103c5366004612a4d565b610a58565b3480156103d657600080fd5b5061028e6103e5366004612a6a565b610add565b3480156103f657600080fd5b5061036f610405366004612af2565b610bb7565b34801561041657600080fd5b5061028e610425366004612b69565b610ccf565b34801561043657600080fd5b5061028e610445366004612a6a565b610cf9565b34801561045657600080fd5b5061028e610465366004612b97565b610d12565b34801561047657600080fd5b5061036f610485366004612c1d565b610e8b565b34801561049657600080fd5b5060015460ff166102b0565b3480156104ae57600080fd5b5061028e6104bd366004612a4d565b610fa3565b3480156104ce57600080fd5b506102b06104dd366004612a4d565b60046020526000908152604090205460ff1681565b3480156104fe57600080fd5b50600254610512906001600160a01b031681565b6040516001600160a01b039091168152602001610265565b34801561053657600080fd5b5061028e610545366004612c73565b611011565b34801561055657600080fd5b506102b0610565366004612a6a565b61103d565b61036f610578366004612ca6565b611066565b34801561058957600080fd5b506105d16105983660046129eb565b6006602052600090815260409020546001600160401b03811690600160401b810461ffff1690600160501b90046001600160801b031683565b604080516001600160401b03909416845261ffff90921660208401526001600160801b031690820152606001610265565b34801561060e57600080fd5b5061036f600081565b34801561062357600080fd5b506102b06106323660046129be565b60076020526000908152604090205460ff1681565b34801561065357600080fd5b5061028e610662366004612d52565b6111dc565b34801561067357600080fd5b5061028e610682366004612d93565b611491565b34801561069357600080fd5b506001546105129061010090046001600160a01b031681565b3480156106b857600080fd5b5061036f6106c7366004612c1d565b6114f9565b3480156106d857600080fd5b506106ec6106e7366004612dae565b611666565b604051610265929190612e02565b34801561070657600080fd5b5061028e610715366004612a4d565b611843565b34801561072657600080fd5b5061028e610735366004612e36565b6118b1565b34801561074657600080fd5b5061076e7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610265565b34801561078f57600080fd5b5060015461032790600160a81b90046001600160401b031681565b3480156107b657600080fd5b5061028e6107c5366004612a6a565b6118f0565b3480156107d657600080fd5b5061028e6107e5366004612928565b6119a4565b3480156107f657600080fd5b5061036f610805366004612e7b565b611a59565b34801561081657600080fd5b5061028e610825366004612ee5565b611a95565b34801561083657600080fd5b50600554610327906001600160401b031681565b60008051602061358783398151915261086281611c43565b61086d848484611c4d565b50505050565b60006001600160e01b03198216637965db0b60e01b14806108a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206135878339815191526108c281611c43565b6108da6000805160206135678339815191528561103d565b6108f757604051635ee08b9760e01b815260040160405180910390fd5b604051637ecdf29160e11b81526001600160a01b0384811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b5050604080516001600160a01b038089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb925060600190505b60405180910390a150505050565b60006109b781611c43565b81156109c9576109c5611c70565b5050565b6109c5611cc4565b63ffffffff8116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610a4c57602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610a1d5790505b50505050509050919050565b6000610a847f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e48361103d565b15610a9157506000919050565b600154600160a81b90046001600160401b03161580610ac35750610ac36000805160206135a78339815191528361103d565b15610ad057506001919050565b506000919050565b919050565b816000805160206135a7833981519152811480610b1957507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b80610b31575060008051602061356783398151915281145b15610b5b57303314610b5657604051637d5d391d60e11b815260040160405180910390fd5b610ba8565b6000805160206135878339815191528103610b8757610b56600080516020613587833981519152611c43565b604051634a7ee1b960e11b8152600481018290526024015b60405180910390fd5b610bb28383611cfd565b505050565b600083610bc381610a58565b610be057604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c0810182526002546001600160a01b03908116825263ffffffff8a1660208084018290526001600160401b03808c16858701528a84166060860152600554600160401b900416608085015260015461ffff600160e81b82041660a086015260009283526006909152908490209351637bfa20a960e01b8152929361010090910490911691637bfa20a991610c82918591908a908a90600401612fa1565b602060405180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190612ffb565b98975050505050505050565b303314610cef57604051637d5d391d60e11b815260040160405180910390fd5b6109c58282611d75565b60405163dec9f03160e01b815260040160405180910390fd5b600080516020613587833981519152610d2a81611c43565b60005b82811015610e4c5736848483818110610d4857610d48613014565b90506080020190506040518060600160405280826020016020810190610d6e9190612c73565b6001600160401b03168152602001610d8c6060840160408501612d93565b61ffff168152602001610da56080840160608501613041565b6001600160801b0316905260066000610dc160208501856129eb565b63ffffffff1681526020808201929092526040908101600020835181549385015194909201516001600160801b0316600160501b026fffffffffffffffffffffffffffffffff60501b1961ffff909516600160401b0269ffffffffffffffffffff199094166001600160401b0390931692909217929092179290921691909117905550600101610d2d565b507f7dd21e42791b013d1929e86f0c59085e4fca24251f0f1aa81917b3b1611766e08383604051610e7e92919061305c565b60405180910390a1505050565b600081610e9781610a58565b610eb457604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c0810182526002546001600160a01b03908116825261ffff808a1660208085018290526001600160401b03808b16868801528985166060870152600554600160401b9004166080860152600154600160e81b810490931660a0860152600091825260068152858220865191820187529181529451637bfa20a960e01b8152939461010090920490921692637bfa20a992610f57928692600401613140565b602060405180830381865afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190612ffb565b979650505050505050565b600080516020613587833981519152610fbb81611c43565b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b30331461103157604051637d5d391d60e11b815260040160405180910390fd5b61103a81611ed0565b50565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600060008051602061356783398151915261108081611c43565b61109060a0860160808701612a4d565b61109981610a58565b6110b657604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c081019091526002546001600160a01b031681526000906020808201906110e4908a018a6129eb565b63ffffffff1681526020016110ff60808a0160608b01612c73565b6001600160401b0316815260200161111d60a08a0160808b01612a4d565b6001600160a01b039081168252600554600160401b90046001600160401b0316602080840191909152600154600160e81b810461ffff16604090940193909352929350610100909104169063df2b057e908390600690600090611182908d018d6129eb565b63ffffffff1663ffffffff16815260200190815260200160002089896040518563ffffffff1660e01b81526004016111bd9493929190612fa1565b6020604051808303816000875af1158015610f74573d6000803e3d6000fd5b6000805160206135878339815191526111f481611c43565b60005b8281101561086d573684848381811061121257611212613014565b905060200281019061122491906131a3565b905063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661125a60208301836129eb565b63ffffffff161461126b5750611489565b4281606001351161127c5750611489565b60006112b561128e60208401846129eb565b61129e6040850160208601612a4d565b6112ab60408601866131c3565b8660600135611a59565b905060006112ca826106e760808601866131c3565b5090508061130d576040518481527fd6d90193101048cc1b6edcdc2348f5acf7a4a4a97d3e7b668b74cb7602ab3ebc9060200160405180910390a1505050611489565b600061132d61131f60408601866131c3565b61132891613209565b611f9e565b905080156113a85760008381526007602052604090205460ff161561138e577f9bb9bddbdf537a2104255307230b323d7982f4512ee8e5bd15df62ddca50ab97848460405161137d92919061327e565b60405180910390a150505050611489565b6000838152600760205260409020805460ff191660011790555b6000806113bb6040870160208801612a4d565b6001600160a01b03166113d160408801886131c3565b6040516113df929190613319565b6000604051808303816000865af19150503d806000811461141c576040519150601f19603f3d011682016040523d82523d6000602084013e611421565b606091505b509150915081611482578215611448576000858152600760205260409020805460ff191690555b7fdc8cdd96296241bbefda4a8e18ad2e0985a8da6495b34d409cfc4c886ee3b0cf8782604051611479929190613329565b60405180910390a15b5050505050505b6001016111f7565b6000805160206135878339815191526114a981611c43565b6001805461ffff60e81b1916600160e81b61ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001611005565b600060008051602061356783398151915261151381611c43565b8261151d81610a58565b61153a57604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c0810182526002546001600160a01b03908116825261ffff808b1660208085018290526001600160401b03808c16868801528a85166060870152600554600160401b9004166080860152600154600160e81b810490931660a0860152600091825260068152858220865191820187529181529451636f9582bf60e11b815293946101009092049092169263df2b057e926115dd928692600401613140565b6020604051808303816000875af11580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116209190612ffb565b93507f87e46b0a6199bc734632187269a103c05714ee0adae5b28f30723955724f37ef8460405161165391815260200190565b60405180910390a1505050949350505050565b600554600090819061168990600160401b90046001600160401b03166041613358565b831461169b575060009050600161183b565b60006116f4866040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506000805b600554600160401b90046001600160401b031681101561182f573660008888611724856041613358565b9061173086600161336f565b61173b906041613358565b9261174893929190613382565b9150915060008061178f8785858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd792505050565b909250905060008160048111156117a8576117a8612dec565b146117c15760006001985098505050505050505061183b565b856001600160a01b0316826001600160a01b0316116117ee5760006002985098505050505050505061183b565b6001600160a01b03821660009081526004602052604090205460ff166118225760006003985098505050505050505061183b565b50935050506001016116fa565b50600160009350935050505b935093915050565b60008051602061358783398151915261185b81611c43565b60018054610100600160a81b0319166101006001600160a01b038516908102919091179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001611005565b6000805160206135878339815191526118c981611c43565b63ffffffff841660009081526003602052604090206118e9908484612855565b5050505050565b816000805160206135a783398151915281148061192c57507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b80611944575060008051602061356783398151915281145b1561196e5730331461196957604051637d5d391d60e11b815260040160405180910390fd5b61199a565b6000805160206135878339815191528103610b8757611969600080516020613587833981519152611c43565b610bb2838361201c565b6000805160206135878339815191526119bc81611c43565b6119d46000805160206135678339815191528561103d565b6119f157604051635ee08b9760e01b815260040160405180910390fd5b6040516303d8c5ef60e11b81526001600160a01b038481166004830152602482018490528516906307b18bde90604401600060405180830381600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b5050505050505050565b60008585838686604051602001611a749594939291906133ac565b60405160208183030381529060405280519060200120905095945050505050565b42816060013511611ab957604051630bbaf26360e01b815260040160405180910390fd5b30611aca6040830160208401612a4d565b6001600160a01b031614611b0d57611ae86040820160208301612a4d565b604051631ce0bfcd60e01b81526001600160a01b039091166004820152602401610b9f565b63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016611b4160208301836129eb565b63ffffffff1614611b7b57611b5960208201826129eb565b60405163134bf0e160e11b815263ffffffff9091166004820152602401610b9f565b6000611b8d61128e60208401846129eb565b90506000611ba2826106e760808601866131c3565b50905080611bc357604051630af656f760e11b815260040160405180910390fd5b60008281526007602052604090205460ff1615611bf657604051634eb522d360e11b815260048101839052602401610b9f565b60008281526007602052604090819020805460ff19166001179055610bb29060008051602061358783398151915290611c31908601866131c3565b810190611c3e9190612a4d565b611cfd565b61103a8133612092565b6001600160a01b038316611c6557610bb282826120eb565b610bb2838383612198565b611c786121d3565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b6040516001600160a01b03909116815260200160405180910390a1565b611ccc61221b565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611ca7565b6000805160206135a783398151915282148015611d215750611d1f828261103d565b155b15611d6b5760018054601590611d4690600160a81b90046001600160401b03166133f2565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6109c58282612264565b6001600160a01b03821660009081526004602052604090205481151560ff909116151503611dc9576040516302c6469560e51b81526001600160a01b03831660048201528115156024820152604401610b9f565b6001600160a01b0382166000908152600460205260408120805460ff191683151517905581611e0f57600554611e0a906001906001600160401b0316613418565b611e26565b600554611e26906001600160401b0316600161343f565b6005549091506001600160401b03600160401b9091048116908216811115611e74576040516378e2c15760e11b81526001600160401b03808416600483015282166024820152604401610b9f565b6005805467ffffffffffffffff19166001600160401b038416179055604080516001600160a01b038616815284151560208201527f863d338cad74814b108a06288ad5e0e80d56495e0332238b1d2cdcfa0ca8e5ce910161099e565b806001600160401b0316600003611efa57604051635f86e17760e01b815260040160405180910390fd5b6005546001600160401b03908116908216811015611f3e576040516378e2c15760e11b81526001600160401b03808316600483015283166024820152604401610b9f565b600580546fffffffffffffffff00000000000000001916600160401b6001600160401b038516908102919091179091556040519081527fb600f3cf7f38a4b49bb0c75f722ef69f7e3e39ef3bb4aa8207fd86e724a2324990602001611005565b60006001600160e01b03198216630111a9b760e11b148015906108a457506001600160e01b0319821663704316e560e01b141592915050565b600080825160410361200d5760208301516040840151606085015160001a612001878285856122e8565b94509450505050612015565b506000905060025b9250929050565b6000805160206135a78339815191528214801561203e575061203e828261103d565b15612088576001805460159061206390600160a81b90046001600160401b031661345f565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6109c582826123ac565b61209c828261103d565b6109c5576120a981612411565b6120b4836020612423565b6040516020016120c5929190613482565b60408051601f198184030181529082905262461bcd60e51b8252610b9f916004016134f7565b6001600160a01b038216612112576040516306b7a93160e41b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461215f576040519150601f19603f3d011682016040523d82523d6000602084013e612164565b606091505b5050905080610bb257604051631196f20d60e21b81526001600160a01b038416600482015260248101839052604401610b9f565b6001600160a01b0382166121bf576040516306b7a93160e41b815260040160405180910390fd5b610bb26001600160a01b03841683836125c5565b60015460ff16156122195760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b9f565b565b60015460ff166122195760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b9f565b61226e828261103d565b6109c5576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556122a43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561231f57506000905060036123a3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612373573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661239c576000600192509250506123a3565b9150600090505b94509492505050565b6123b6828261103d565b156109c5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606108a46001600160a01b03831660145b60606000612432836002613358565b61243d90600261336f565b6001600160401b038111156124545761245461350a565b6040519080825280601f01601f19166020018201604052801561247e576020820181803683370190505b509050600360fc1b8160008151811061249957612499613014565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124c8576124c8613014565b60200101906001600160f81b031916908160001a90535060006124ec846002613358565b6124f790600161336f565b90505b600181111561256f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061252b5761252b613014565b1a60f81b82828151811061254157612541613014565b60200101906001600160f81b031916908160001a90535060049490941c9361256881613520565b90506124fa565b5083156125be5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b9f565b9392505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610bb2928692916000916126559185169084906126d5565b90508051600014806126765750808060200190518101906126769190613537565b610bb25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b9f565b60606126e484846000856126ec565b949350505050565b60608247101561274d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b9f565b600080866001600160a01b031685876040516127699190613554565b60006040518083038185875af1925050503d80600081146127a6576040519150601f19603f3d011682016040523d82523d6000602084013e6127ab565b606091505b5091509150610f98878383876060831561282657825160000361281f576001600160a01b0385163b61281f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b9f565b50816126e4565b6126e4838381511561283b5781518083602001fd5b8060405162461bcd60e51b8152600401610b9f91906134f7565b82805482825590600052602060002090601f016020900481019282156128ee5791602002820160005b838211156128bf57833560ff1683826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261287e565b80156128ec5782816101000a81549060ff02191690556001016020816000010492830192600103026128bf565b505b506128fa9291506128fe565b5090565b5b808211156128fa57600081556001016128ff565b6001600160a01b038116811461103a57600080fd5b60008060006060848603121561293d57600080fd5b833561294881612913565b9250602084013561295881612913565b929592945050506040919091013590565b60006020828403121561297b57600080fd5b81356001600160e01b0319811681146125be57600080fd5b801515811461103a57600080fd5b6000602082840312156129b357600080fd5b81356125be81612993565b6000602082840312156129d057600080fd5b5035919050565b803563ffffffff81168114610ad857600080fd5b6000602082840312156129fd57600080fd5b6125be826129d7565b6020808252825182820181905260009190848201906040850190845b81811015612a4157835160ff1683529284019291840191600101612a22565b50909695505050505050565b600060208284031215612a5f57600080fd5b81356125be81612913565b60008060408385031215612a7d57600080fd5b823591506020830135612a8f81612913565b809150509250929050565b80356001600160401b0381168114610ad857600080fd5b60008083601f840112612ac357600080fd5b5081356001600160401b03811115612ada57600080fd5b60208301915083602082850101111561201557600080fd5b600080600080600060808688031215612b0a57600080fd5b612b13866129d7565b9450612b2160208701612a9a565b93506040860135612b3181612913565b925060608601356001600160401b03811115612b4c57600080fd5b612b5888828901612ab1565b969995985093965092949392505050565b60008060408385031215612b7c57600080fd5b8235612b8781612913565b91506020830135612a8f81612993565b60008060208385031215612baa57600080fd5b82356001600160401b0380821115612bc157600080fd5b818501915085601f830112612bd557600080fd5b813581811115612be457600080fd5b8660208260071b8501011115612bf957600080fd5b60209290920196919550909350505050565b803561ffff81168114610ad857600080fd5b60008060008060808587031215612c3357600080fd5b612c3c85612c0b565b9350612c4a60208601612c0b565b9250612c5860408601612a9a565b91506060850135612c6881612913565b939692955090935050565b600060208284031215612c8557600080fd5b6125be82612a9a565b600060a08284031215612ca057600080fd5b50919050565b600080600060408486031215612cbb57600080fd5b83356001600160401b0380821115612cd257600080fd5b612cde87838801612c8e565b94506020860135915080821115612cf457600080fd5b50612d0186828701612ab1565b9497909650939450505050565b60008083601f840112612d2057600080fd5b5081356001600160401b03811115612d3757600080fd5b6020830191508360208260051b850101111561201557600080fd5b60008060208385031215612d6557600080fd5b82356001600160401b03811115612d7b57600080fd5b612d8785828601612d0e565b90969095509350505050565b600060208284031215612da557600080fd5b6125be82612c0b565b600080600060408486031215612dc357600080fd5b8335925060208401356001600160401b03811115612de057600080fd5b612d0186828701612ab1565b634e487b7160e01b600052602160045260246000fd5b82151581526040810160048310612e2957634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600080600060408486031215612e4b57600080fd5b612e54846129d7565b925060208401356001600160401b03811115612e6f57600080fd5b612d0186828701612d0e565b600080600080600060808688031215612e9357600080fd5b612e9c866129d7565b94506020860135612eac81612913565b935060408601356001600160401b03811115612ec757600080fd5b612ed388828901612ab1565b96999598509660600135949350505050565b600060208284031215612ef757600080fd5b81356001600160401b03811115612f0d57600080fd5b6126e484828501612c8e565b60018060a01b0380825116835263ffffffff602083015116602084015260408201516001600160401b03808216604086015282606085015116606086015280608085015116608086015250505061ffff60a08201511660a08301525050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000610140612fb08388612f19565b612fe760c0840187546001600160401b0381168252604081811c61ffff16602084015260509190911c6001600160801b0316910152565b80610120840152610f988184018587612f78565b60006020828403121561300d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b80356001600160801b0381168114610ad857600080fd5b60006020828403121561305357600080fd5b6125be8261302a565b6020808252818101839052600090604080840186845b878110156130e35763ffffffff613088836129d7565b1683526001600160401b0361309e868401612a9a565b168584015261ffff6130b1858401612c0b565b168484015260606001600160801b036130cb82850161302a565b16908401526080928301929190910190600101613072565b5090979650505050505050565b60005b8381101561310b5781810151838201526020016130f3565b50506000910152565b6000815180845261312c8160208601602086016130f0565b601f01601f19169290920160200192915050565b600061014061314f8387612f19565b61318660c0840186546001600160401b0381168252604081811c61ffff16602084015260509190911c6001600160801b0316910152565b8061012084015261319981840185613114565b9695505050505050565b60008235609e198336030181126131b957600080fd5b9190910192915050565b6000808335601e198436030181126131da57600080fd5b8301803591506001600160401b038211156131f457600080fd5b60200191503681900382131561201557600080fd5b6001600160e01b031981358181169160048510156132315780818660040360031b1b83161692505b505092915050565b6000808335601e1984360301811261325057600080fd5b83016020810192503590506001600160401b0381111561326f57600080fd5b80360382131561201557600080fd5b6040815263ffffffff613290846129d7565b166040820152600060208401356132a681612913565b6001600160a01b031660608301526132c16040850185613239565b60a060808501526132d660e085018284612f78565b915050606085013560a08401526132f06080860186613239565b848303603f190160c0860152613307838284612f78565b93505050508260208301529392505050565b8183823760009101908152919050565b8281526040602082015260006126e46040830184613114565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108a4576108a4613342565b808201808211156108a4576108a4613342565b6000808585111561339257600080fd5b8386111561339f57600080fd5b5050820193919092039150565b63ffffffff60e01b8660e01b1681526bffffffffffffffffffffffff198560601b1660048201528360188201528183603883013760009101603801908152949350505050565b60006001600160401b0380831681810361340e5761340e613342565b6001019392505050565b6001600160401b0382811682821603908082111561343857613438613342565b5092915050565b6001600160401b0381811683821601908082111561343857613438613342565b60006001600160401b0382168061347857613478613342565b6000190192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516134ba8160178501602088016130f0565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516134eb8160288401602088016130f0565b01602801949350505050565b6020815260006125be6020830184613114565b634e487b7160e01b600052604160045260246000fd5b60008161352f5761352f613342565b506000190190565b60006020828403121561354957600080fd5b81516125be81612993565b600082516131b98184602087016130f056fe724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19dea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177574845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bcaa2646970667358221220a11bda39b5eba36307b8c386e2dd33add9354815dcbbf35b0509937940a05b9164736f6c63430008160033",
  "deployedBytecode": "0x60806040526004361061022f5760003560e01c80638585c9451161012e578063c7a823e0116100ab578063d547741f1161006f578063d547741f146107aa578063dafe0ccc146107ca578063f010cb23146107ea578063f3b4ebd01461080a578063fd62e7501461082a57600080fd5b8063c7a823e0146106cc578063c7b2370b146106fa578063cd88b9031461071a578063cf34c7681461073a578063d2ae21041461078357600080fd5b8063aef18bf7116100f2578063aef18bf714610617578063b143044b14610647578063c358de0a14610667578063c416aa5114610687578063c5e193cd146106ac57600080fd5b80638585c9451461052a57806391d148541461054a57806395d376d71461056a5780639e9449651461057d578063a217fddf1461060257600080fd5b80632f2ff15d116101bc5780635553fb8e116101805780635553fb8e1461046a5780635c975abb1461048a578063724e78da146104a2578063736c0d5b146104c2578063741bef1a146104f257600080fd5b80632f2ff15d146103ca57806330bb3aac146103ea57806331cb61051461040a57806336568abe1461042a57806352d3b8711461044a57600080fd5b806316c38b3c1161020357806316c38b3c146102e05780631703a01814610300578063248a9ca31461033f57806326e67a371461037d5780632de11376146103aa57600080fd5b8062bf2e801461023457806301e336671461026e57806301ffc9a7146102905780631095b6d7146102c0575b600080fd5b34801561024057600080fd5b5060015461025690600160e81b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561027a57600080fd5b5061028e610289366004612928565b61084a565b005b34801561029c57600080fd5b506102b06102ab366004612969565b610873565b6040519015158152602001610265565b3480156102cc57600080fd5b5061028e6102db366004612928565b6108aa565b3480156102ec57600080fd5b5061028e6102fb3660046129a1565b6109ac565b34801561030c57600080fd5b5060055461032790600160401b90046001600160401b031681565b6040516001600160401b039091168152602001610265565b34801561034b57600080fd5b5061036f61035a3660046129be565b60009081526020819052604090206001015490565b604051908152602001610265565b34801561038957600080fd5b5061039d6103983660046129eb565b6109d1565b6040516102659190612a06565b3480156103b657600080fd5b506102b06103c5366004612a4d565b610a58565b3480156103d657600080fd5b5061028e6103e5366004612a6a565b610add565b3480156103f657600080fd5b5061036f610405366004612af2565b610bb7565b34801561041657600080fd5b5061028e610425366004612b69565b610ccf565b34801561043657600080fd5b5061028e610445366004612a6a565b610cf9565b34801561045657600080fd5b5061028e610465366004612b97565b610d12565b34801561047657600080fd5b5061036f610485366004612c1d565b610e8b565b34801561049657600080fd5b5060015460ff166102b0565b3480156104ae57600080fd5b5061028e6104bd366004612a4d565b610fa3565b3480156104ce57600080fd5b506102b06104dd366004612a4d565b60046020526000908152604090205460ff1681565b3480156104fe57600080fd5b50600254610512906001600160a01b031681565b6040516001600160a01b039091168152602001610265565b34801561053657600080fd5b5061028e610545366004612c73565b611011565b34801561055657600080fd5b506102b0610565366004612a6a565b61103d565b61036f610578366004612ca6565b611066565b34801561058957600080fd5b506105d16105983660046129eb565b6006602052600090815260409020546001600160401b03811690600160401b810461ffff1690600160501b90046001600160801b031683565b604080516001600160401b03909416845261ffff90921660208401526001600160801b031690820152606001610265565b34801561060e57600080fd5b5061036f600081565b34801561062357600080fd5b506102b06106323660046129be565b60076020526000908152604090205460ff1681565b34801561065357600080fd5b5061028e610662366004612d52565b6111dc565b34801561067357600080fd5b5061028e610682366004612d93565b611491565b34801561069357600080fd5b506001546105129061010090046001600160a01b031681565b3480156106b857600080fd5b5061036f6106c7366004612c1d565b6114f9565b3480156106d857600080fd5b506106ec6106e7366004612dae565b611666565b604051610265929190612e02565b34801561070657600080fd5b5061028e610715366004612a4d565b611843565b34801561072657600080fd5b5061028e610735366004612e36565b6118b1565b34801561074657600080fd5b5061076e7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610265565b34801561078f57600080fd5b5060015461032790600160a81b90046001600160401b031681565b3480156107b657600080fd5b5061028e6107c5366004612a6a565b6118f0565b3480156107d657600080fd5b5061028e6107e5366004612928565b6119a4565b3480156107f657600080fd5b5061036f610805366004612e7b565b611a59565b34801561081657600080fd5b5061028e610825366004612ee5565b611a95565b34801561083657600080fd5b50600554610327906001600160401b031681565b60008051602061358783398151915261086281611c43565b61086d848484611c4d565b50505050565b60006001600160e01b03198216637965db0b60e01b14806108a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206135878339815191526108c281611c43565b6108da6000805160206135678339815191528561103d565b6108f757604051635ee08b9760e01b815260040160405180910390fd5b604051637ecdf29160e11b81526001600160a01b0384811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b5050604080516001600160a01b038089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb925060600190505b60405180910390a150505050565b60006109b781611c43565b81156109c9576109c5611c70565b5050565b6109c5611cc4565b63ffffffff8116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610a4c57602002820191906000526020600020906000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610a1d5790505b50505050509050919050565b6000610a847f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e48361103d565b15610a9157506000919050565b600154600160a81b90046001600160401b03161580610ac35750610ac36000805160206135a78339815191528361103d565b15610ad057506001919050565b506000919050565b919050565b816000805160206135a7833981519152811480610b1957507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b80610b31575060008051602061356783398151915281145b15610b5b57303314610b5657604051637d5d391d60e11b815260040160405180910390fd5b610ba8565b6000805160206135878339815191528103610b8757610b56600080516020613587833981519152611c43565b604051634a7ee1b960e11b8152600481018290526024015b60405180910390fd5b610bb28383611cfd565b505050565b600083610bc381610a58565b610be057604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c0810182526002546001600160a01b03908116825263ffffffff8a1660208084018290526001600160401b03808c16858701528a84166060860152600554600160401b900416608085015260015461ffff600160e81b82041660a086015260009283526006909152908490209351637bfa20a960e01b8152929361010090910490911691637bfa20a991610c82918591908a908a90600401612fa1565b602060405180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190612ffb565b98975050505050505050565b303314610cef57604051637d5d391d60e11b815260040160405180910390fd5b6109c58282611d75565b60405163dec9f03160e01b815260040160405180910390fd5b600080516020613587833981519152610d2a81611c43565b60005b82811015610e4c5736848483818110610d4857610d48613014565b90506080020190506040518060600160405280826020016020810190610d6e9190612c73565b6001600160401b03168152602001610d8c6060840160408501612d93565b61ffff168152602001610da56080840160608501613041565b6001600160801b0316905260066000610dc160208501856129eb565b63ffffffff1681526020808201929092526040908101600020835181549385015194909201516001600160801b0316600160501b026fffffffffffffffffffffffffffffffff60501b1961ffff909516600160401b0269ffffffffffffffffffff199094166001600160401b0390931692909217929092179290921691909117905550600101610d2d565b507f7dd21e42791b013d1929e86f0c59085e4fca24251f0f1aa81917b3b1611766e08383604051610e7e92919061305c565b60405180910390a1505050565b600081610e9781610a58565b610eb457604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c0810182526002546001600160a01b03908116825261ffff808a1660208085018290526001600160401b03808b16868801528985166060870152600554600160401b9004166080860152600154600160e81b810490931660a0860152600091825260068152858220865191820187529181529451637bfa20a960e01b8152939461010090920490921692637bfa20a992610f57928692600401613140565b602060405180830381865afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190612ffb565b979650505050505050565b600080516020613587833981519152610fbb81611c43565b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b30331461103157604051637d5d391d60e11b815260040160405180910390fd5b61103a81611ed0565b50565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600060008051602061356783398151915261108081611c43565b61109060a0860160808701612a4d565b61109981610a58565b6110b657604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c081019091526002546001600160a01b031681526000906020808201906110e4908a018a6129eb565b63ffffffff1681526020016110ff60808a0160608b01612c73565b6001600160401b0316815260200161111d60a08a0160808b01612a4d565b6001600160a01b039081168252600554600160401b90046001600160401b0316602080840191909152600154600160e81b810461ffff16604090940193909352929350610100909104169063df2b057e908390600690600090611182908d018d6129eb565b63ffffffff1663ffffffff16815260200190815260200160002089896040518563ffffffff1660e01b81526004016111bd9493929190612fa1565b6020604051808303816000875af1158015610f74573d6000803e3d6000fd5b6000805160206135878339815191526111f481611c43565b60005b8281101561086d573684848381811061121257611212613014565b905060200281019061122491906131a3565b905063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661125a60208301836129eb565b63ffffffff161461126b5750611489565b4281606001351161127c5750611489565b60006112b561128e60208401846129eb565b61129e6040850160208601612a4d565b6112ab60408601866131c3565b8660600135611a59565b905060006112ca826106e760808601866131c3565b5090508061130d576040518481527fd6d90193101048cc1b6edcdc2348f5acf7a4a4a97d3e7b668b74cb7602ab3ebc9060200160405180910390a1505050611489565b600061132d61131f60408601866131c3565b61132891613209565b611f9e565b905080156113a85760008381526007602052604090205460ff161561138e577f9bb9bddbdf537a2104255307230b323d7982f4512ee8e5bd15df62ddca50ab97848460405161137d92919061327e565b60405180910390a150505050611489565b6000838152600760205260409020805460ff191660011790555b6000806113bb6040870160208801612a4d565b6001600160a01b03166113d160408801886131c3565b6040516113df929190613319565b6000604051808303816000865af19150503d806000811461141c576040519150601f19603f3d011682016040523d82523d6000602084013e611421565b606091505b509150915081611482578215611448576000858152600760205260409020805460ff191690555b7fdc8cdd96296241bbefda4a8e18ad2e0985a8da6495b34d409cfc4c886ee3b0cf8782604051611479929190613329565b60405180910390a15b5050505050505b6001016111f7565b6000805160206135878339815191526114a981611c43565b6001805461ffff60e81b1916600160e81b61ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001611005565b600060008051602061356783398151915261151381611c43565b8261151d81610a58565b61153a57604051634ab5ebcd60e01b815260040160405180910390fd5b6040805160c0810182526002546001600160a01b03908116825261ffff808b1660208085018290526001600160401b03808c16868801528a85166060870152600554600160401b9004166080860152600154600160e81b810490931660a0860152600091825260068152858220865191820187529181529451636f9582bf60e11b815293946101009092049092169263df2b057e926115dd928692600401613140565b6020604051808303816000875af11580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116209190612ffb565b93507f87e46b0a6199bc734632187269a103c05714ee0adae5b28f30723955724f37ef8460405161165391815260200190565b60405180910390a1505050949350505050565b600554600090819061168990600160401b90046001600160401b03166041613358565b831461169b575060009050600161183b565b60006116f4866040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506000805b600554600160401b90046001600160401b031681101561182f573660008888611724856041613358565b9061173086600161336f565b61173b906041613358565b9261174893929190613382565b9150915060008061178f8785858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd792505050565b909250905060008160048111156117a8576117a8612dec565b146117c15760006001985098505050505050505061183b565b856001600160a01b0316826001600160a01b0316116117ee5760006002985098505050505050505061183b565b6001600160a01b03821660009081526004602052604090205460ff166118225760006003985098505050505050505061183b565b50935050506001016116fa565b50600160009350935050505b935093915050565b60008051602061358783398151915261185b81611c43565b60018054610100600160a81b0319166101006001600160a01b038516908102919091179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001611005565b6000805160206135878339815191526118c981611c43565b63ffffffff841660009081526003602052604090206118e9908484612855565b5050505050565b816000805160206135a783398151915281148061192c57507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b80611944575060008051602061356783398151915281145b1561196e5730331461196957604051637d5d391d60e11b815260040160405180910390fd5b61199a565b6000805160206135878339815191528103610b8757611969600080516020613587833981519152611c43565b610bb2838361201c565b6000805160206135878339815191526119bc81611c43565b6119d46000805160206135678339815191528561103d565b6119f157604051635ee08b9760e01b815260040160405180910390fd5b6040516303d8c5ef60e11b81526001600160a01b038481166004830152602482018490528516906307b18bde90604401600060405180830381600087803b158015611a3b57600080fd5b505af1158015611a4f573d6000803e3d6000fd5b5050505050505050565b60008585838686604051602001611a749594939291906133ac565b60405160208183030381529060405280519060200120905095945050505050565b42816060013511611ab957604051630bbaf26360e01b815260040160405180910390fd5b30611aca6040830160208401612a4d565b6001600160a01b031614611b0d57611ae86040820160208301612a4d565b604051631ce0bfcd60e01b81526001600160a01b039091166004820152602401610b9f565b63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016611b4160208301836129eb565b63ffffffff1614611b7b57611b5960208201826129eb565b60405163134bf0e160e11b815263ffffffff9091166004820152602401610b9f565b6000611b8d61128e60208401846129eb565b90506000611ba2826106e760808601866131c3565b50905080611bc357604051630af656f760e11b815260040160405180910390fd5b60008281526007602052604090205460ff1615611bf657604051634eb522d360e11b815260048101839052602401610b9f565b60008281526007602052604090819020805460ff19166001179055610bb29060008051602061358783398151915290611c31908601866131c3565b810190611c3e9190612a4d565b611cfd565b61103a8133612092565b6001600160a01b038316611c6557610bb282826120eb565b610bb2838383612198565b611c786121d3565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258335b6040516001600160a01b03909116815260200160405180910390a1565b611ccc61221b565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611ca7565b6000805160206135a783398151915282148015611d215750611d1f828261103d565b155b15611d6b5760018054601590611d4690600160a81b90046001600160401b03166133f2565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6109c58282612264565b6001600160a01b03821660009081526004602052604090205481151560ff909116151503611dc9576040516302c6469560e51b81526001600160a01b03831660048201528115156024820152604401610b9f565b6001600160a01b0382166000908152600460205260408120805460ff191683151517905581611e0f57600554611e0a906001906001600160401b0316613418565b611e26565b600554611e26906001600160401b0316600161343f565b6005549091506001600160401b03600160401b9091048116908216811115611e74576040516378e2c15760e11b81526001600160401b03808416600483015282166024820152604401610b9f565b6005805467ffffffffffffffff19166001600160401b038416179055604080516001600160a01b038616815284151560208201527f863d338cad74814b108a06288ad5e0e80d56495e0332238b1d2cdcfa0ca8e5ce910161099e565b806001600160401b0316600003611efa57604051635f86e17760e01b815260040160405180910390fd5b6005546001600160401b03908116908216811015611f3e576040516378e2c15760e11b81526001600160401b03808316600483015283166024820152604401610b9f565b600580546fffffffffffffffff00000000000000001916600160401b6001600160401b038516908102919091179091556040519081527fb600f3cf7f38a4b49bb0c75f722ef69f7e3e39ef3bb4aa8207fd86e724a2324990602001611005565b60006001600160e01b03198216630111a9b760e11b148015906108a457506001600160e01b0319821663704316e560e01b141592915050565b600080825160410361200d5760208301516040840151606085015160001a612001878285856122e8565b94509450505050612015565b506000905060025b9250929050565b6000805160206135a78339815191528214801561203e575061203e828261103d565b15612088576001805460159061206390600160a81b90046001600160401b031661345f565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6109c582826123ac565b61209c828261103d565b6109c5576120a981612411565b6120b4836020612423565b6040516020016120c5929190613482565b60408051601f198184030181529082905262461bcd60e51b8252610b9f916004016134f7565b6001600160a01b038216612112576040516306b7a93160e41b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461215f576040519150601f19603f3d011682016040523d82523d6000602084013e612164565b606091505b5050905080610bb257604051631196f20d60e21b81526001600160a01b038416600482015260248101839052604401610b9f565b6001600160a01b0382166121bf576040516306b7a93160e41b815260040160405180910390fd5b610bb26001600160a01b03841683836125c5565b60015460ff16156122195760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b9f565b565b60015460ff166122195760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b9f565b61226e828261103d565b6109c5576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556122a43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561231f57506000905060036123a3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612373573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661239c576000600192509250506123a3565b9150600090505b94509492505050565b6123b6828261103d565b156109c5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606108a46001600160a01b03831660145b60606000612432836002613358565b61243d90600261336f565b6001600160401b038111156124545761245461350a565b6040519080825280601f01601f19166020018201604052801561247e576020820181803683370190505b509050600360fc1b8160008151811061249957612499613014565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124c8576124c8613014565b60200101906001600160f81b031916908160001a90535060006124ec846002613358565b6124f790600161336f565b90505b600181111561256f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061252b5761252b613014565b1a60f81b82828151811061254157612541613014565b60200101906001600160f81b031916908160001a90535060049490941c9361256881613520565b90506124fa565b5083156125be5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b9f565b9392505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610bb2928692916000916126559185169084906126d5565b90508051600014806126765750808060200190518101906126769190613537565b610bb25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b9f565b60606126e484846000856126ec565b949350505050565b60608247101561274d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b9f565b600080866001600160a01b031685876040516127699190613554565b60006040518083038185875af1925050503d80600081146127a6576040519150601f19603f3d011682016040523d82523d6000602084013e6127ab565b606091505b5091509150610f98878383876060831561282657825160000361281f576001600160a01b0385163b61281f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b9f565b50816126e4565b6126e4838381511561283b5781518083602001fd5b8060405162461bcd60e51b8152600401610b9f91906134f7565b82805482825590600052602060002090601f016020900481019282156128ee5791602002820160005b838211156128bf57833560ff1683826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261287e565b80156128ec5782816101000a81549060ff02191690556001016020816000010492830192600103026128bf565b505b506128fa9291506128fe565b5090565b5b808211156128fa57600081556001016128ff565b6001600160a01b038116811461103a57600080fd5b60008060006060848603121561293d57600080fd5b833561294881612913565b9250602084013561295881612913565b929592945050506040919091013590565b60006020828403121561297b57600080fd5b81356001600160e01b0319811681146125be57600080fd5b801515811461103a57600080fd5b6000602082840312156129b357600080fd5b81356125be81612993565b6000602082840312156129d057600080fd5b5035919050565b803563ffffffff81168114610ad857600080fd5b6000602082840312156129fd57600080fd5b6125be826129d7565b6020808252825182820181905260009190848201906040850190845b81811015612a4157835160ff1683529284019291840191600101612a22565b50909695505050505050565b600060208284031215612a5f57600080fd5b81356125be81612913565b60008060408385031215612a7d57600080fd5b823591506020830135612a8f81612913565b809150509250929050565b80356001600160401b0381168114610ad857600080fd5b60008083601f840112612ac357600080fd5b5081356001600160401b03811115612ada57600080fd5b60208301915083602082850101111561201557600080fd5b600080600080600060808688031215612b0a57600080fd5b612b13866129d7565b9450612b2160208701612a9a565b93506040860135612b3181612913565b925060608601356001600160401b03811115612b4c57600080fd5b612b5888828901612ab1565b969995985093965092949392505050565b60008060408385031215612b7c57600080fd5b8235612b8781612913565b91506020830135612a8f81612993565b60008060208385031215612baa57600080fd5b82356001600160401b0380821115612bc157600080fd5b818501915085601f830112612bd557600080fd5b813581811115612be457600080fd5b8660208260071b8501011115612bf957600080fd5b60209290920196919550909350505050565b803561ffff81168114610ad857600080fd5b60008060008060808587031215612c3357600080fd5b612c3c85612c0b565b9350612c4a60208601612c0b565b9250612c5860408601612a9a565b91506060850135612c6881612913565b939692955090935050565b600060208284031215612c8557600080fd5b6125be82612a9a565b600060a08284031215612ca057600080fd5b50919050565b600080600060408486031215612cbb57600080fd5b83356001600160401b0380821115612cd257600080fd5b612cde87838801612c8e565b94506020860135915080821115612cf457600080fd5b50612d0186828701612ab1565b9497909650939450505050565b60008083601f840112612d2057600080fd5b5081356001600160401b03811115612d3757600080fd5b6020830191508360208260051b850101111561201557600080fd5b60008060208385031215612d6557600080fd5b82356001600160401b03811115612d7b57600080fd5b612d8785828601612d0e565b90969095509350505050565b600060208284031215612da557600080fd5b6125be82612c0b565b600080600060408486031215612dc357600080fd5b8335925060208401356001600160401b03811115612de057600080fd5b612d0186828701612ab1565b634e487b7160e01b600052602160045260246000fd5b82151581526040810160048310612e2957634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600080600060408486031215612e4b57600080fd5b612e54846129d7565b925060208401356001600160401b03811115612e6f57600080fd5b612d0186828701612d0e565b600080600080600060808688031215612e9357600080fd5b612e9c866129d7565b94506020860135612eac81612913565b935060408601356001600160401b03811115612ec757600080fd5b612ed388828901612ab1565b96999598509660600135949350505050565b600060208284031215612ef757600080fd5b81356001600160401b03811115612f0d57600080fd5b6126e484828501612c8e565b60018060a01b0380825116835263ffffffff602083015116602084015260408201516001600160401b03808216604086015282606085015116606086015280608085015116608086015250505061ffff60a08201511660a08301525050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000610140612fb08388612f19565b612fe760c0840187546001600160401b0381168252604081811c61ffff16602084015260509190911c6001600160801b0316910152565b80610120840152610f988184018587612f78565b60006020828403121561300d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b80356001600160801b0381168114610ad857600080fd5b60006020828403121561305357600080fd5b6125be8261302a565b6020808252818101839052600090604080840186845b878110156130e35763ffffffff613088836129d7565b1683526001600160401b0361309e868401612a9a565b168584015261ffff6130b1858401612c0b565b168484015260606001600160801b036130cb82850161302a565b16908401526080928301929190910190600101613072565b5090979650505050505050565b60005b8381101561310b5781810151838201526020016130f3565b50506000910152565b6000815180845261312c8160208601602086016130f0565b601f01601f19169290920160200192915050565b600061014061314f8387612f19565b61318660c0840186546001600160401b0381168252604081811c61ffff16602084015260509190911c6001600160801b0316910152565b8061012084015261319981840185613114565b9695505050505050565b60008235609e198336030181126131b957600080fd5b9190910192915050565b6000808335601e198436030181126131da57600080fd5b8301803591506001600160401b038211156131f457600080fd5b60200191503681900382131561201557600080fd5b6001600160e01b031981358181169160048510156132315780818660040360031b1b83161692505b505092915050565b6000808335601e1984360301811261325057600080fd5b83016020810192503590506001600160401b0381111561326f57600080fd5b80360382131561201557600080fd5b6040815263ffffffff613290846129d7565b166040820152600060208401356132a681612913565b6001600160a01b031660608301526132c16040850185613239565b60a060808501526132d660e085018284612f78565b915050606085013560a08401526132f06080860186613239565b848303603f190160c0860152613307838284612f78565b93505050508260208301529392505050565b8183823760009101908152919050565b8281526040602082015260006126e46040830184613114565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108a4576108a4613342565b808201808211156108a4576108a4613342565b6000808585111561339257600080fd5b8386111561339f57600080fd5b5050820193919092039150565b63ffffffff60e01b8660e01b1681526bffffffffffffffffffffffff198560601b1660048201528360188201528183603883013760009101603801908152949350505050565b60006001600160401b0380831681810361340e5761340e613342565b6001019392505050565b6001600160401b0382811682821603908082111561343857613438613342565b5092915050565b6001600160401b0381811683821601908082111561343857613438613342565b60006001600160401b0382168061347857613478613342565b6000190192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516134ba8160178501602088016130f0565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516134eb8160288401602088016130f0565b01602801949350505050565b6020815260006125be6020830184613114565b634e487b7160e01b600052604160045260246000fd5b60008161352f5761352f613342565b506000190190565b60006020828403121561354957600080fd5b81516125be81612993565b600082516131b98184602087016130f056fe724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19dea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177574845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bcaa2646970667358221220a11bda39b5eba36307b8c386e2dd33add9354815dcbbf35b0509937940a05b9164736f6c63430008160033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": {
        "details": "for ULN301, ULN302 and more to assign jobdvn network can reject job from _sender by adding/removing them from allowlist/denylist",
        "params": {
          "_options": "dvn options",
          "_param": "assign job param"
        }
      },
      "assignJob(uint16,uint16,uint64,address)": {
        "details": "to support ULNv2dvn network can reject job from _sender by adding/removing them from allowlist/denylist",
        "params": {
          "": "//_outboundProofType outbound proof type",
          "_confirmations": "block confirmations",
          "_dstEid": "destination EndpointId",
          "_sender": "message sender address"
        }
      },
      "constructor": {
        "details": "DVN doesn't have a roleAdmin (address(0x0))Supports all of ULNv2, ULN301, ULN302 and more",
        "params": {
          "_admins": "array of admin addresses that are granted the ADMIN_ROLE",
          "_messageLibs": "array of message lib addresses that are granted the MESSAGE_LIB_ROLE",
          "_priceFeed": "price feed address",
          "_quorum": "quorum for multisig",
          "_signers": "array of signer addresses for multisig",
          "_vid": "unique identifier for this DVN instance"
        }
      },
      "execute((uint32,address,bytes,uint256,bytes)[])": {
        "details": "takes a list of instructions and executes them in orderif any of the instructions fail, it will emit an error event and continue to execute the rest of the instructions",
        "params": {
          "_params": "array of ExecuteParam, includes target, callData, expiration, signatures"
        }
      },
      "getFee(uint16,uint16,uint64,address)": {
        "details": "to support ULNv2getFee can revert if _sender doesn't pass ACL",
        "params": {
          "": "//_outboundProofType outbound proof type",
          "_confirmations": "block confirmations",
          "_dstEid": "destination EndpointId",
          "_sender": "message sender address"
        }
      },
      "getFee(uint32,uint64,address,bytes)": {
        "details": "getFee can revert if _sender doesn't pass ACL",
        "params": {
          "_confirmations": "block confirmations",
          "_dstEid": "destination EndpointId",
          "_options": "dvn options",
          "_sender": "message sender address"
        },
        "returns": {
          "fee": "fee in native amount"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "overrides AccessControl to allow self/admin to grant role'function sig 0x2f2ff15d",
        "params": {
          "_account": "account to grant role to",
          "_role": "role to grant"
        }
      },
      "hasAcl(address)": {
        "details": "Access control list using allowlist and denylist1) if one address is in the denylist -> deny2) else if address in the allowlist OR allowlist is empty (allows everyone)-> allow3) else deny",
        "params": {
          "_sender": "address to check"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hashCallData(uint32,address,bytes,uint256)": {
        "params": {
          "_callData": "call data",
          "_expiration": "expiration timestamp",
          "_target": "target address"
        },
        "returns": {
          "_0": "hash of above"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quorumChangeAdmin((uint32,address,bytes,uint256,bytes))": {
        "details": "calldata in the case is abi.encode new admin address"
      },
      "renounceRole(bytes32,address)": {
        "details": "overrides AccessControl to disable renouncing of roles"
      },
      "revokeRole(bytes32,address)": {
        "details": "overrides AccessControl to allow self/admin to revoke rolefunction sig 0xd547741f",
        "params": {
          "_account": "account to revoke role from",
          "_role": "role to revoke"
        }
      },
      "setDefaultMultiplierBps(uint16)": {
        "params": {
          "_multiplierBps": "default multiplier for worker fee"
        }
      },
      "setDstConfig((uint32,uint64,uint16,uint128)[])": {
        "params": {
          "_params": "array of DstConfigParam"
        }
      },
      "setPaused(bool)": {
        "details": "flag to pause execution of workers (if used with whenNotPaused modifier)",
        "params": {
          "_paused": "true to pause, false to unpause"
        }
      },
      "setPriceFeed(address)": {
        "params": {
          "_priceFeed": "price feed address"
        }
      },
      "setQuorum(uint64)": {
        "details": "set quorum for multisigfunction sig 0x8585c945",
        "params": {
          "_quorum": "to set"
        }
      },
      "setSigner(address,bool)": {
        "details": "set signers for multisigfunction sig 0x31cb6105",
        "params": {
          "_active": "true to add, false to remove",
          "_signer": "signer address"
        }
      },
      "setWorkerFeeLib(address)": {
        "params": {
          "_workerFeeLib": "worker fee lib address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawFee(address,address,uint256)": {
        "details": "supports withdrawing fee from ULN301, ULN302 and more",
        "params": {
          "_amount": "amount to withdraw",
          "_lib": "message lib address",
          "_to": "address to withdraw fee to"
        }
      },
      "withdrawFeeFromUlnV2(address,address,uint256)": {
        "details": "to support ULNv2the withdrawFee function for ULN30X is built in the Worker contract",
        "params": {
          "_amount": "amount to withdraw",
          "_lib": "message lib address",
          "_to": "address to withdraw to"
        }
      },
      "withdrawToken(address,address,uint256)": {
        "details": "supports withdrawing token from the contract",
        "params": {
          "_amount": "amount to withdraw",
          "_to": "address to withdraw token to",
          "_token": "token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "quorumChangeAdmin((uint32,address,bytes,uint256,bytes))": {
        "notice": "function for quorum to change admin without going through execute function"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7552,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)7547_storage)"
      },
      {
        "astId": 8481,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 16351,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "workerFeeLib",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16353,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "allowlistSize",
        "offset": 21,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 16355,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "defaultMultiplierBps",
        "offset": 29,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 16357,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 16362,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "supportedOptionTypes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_array(t_uint8)dyn_storage)"
      },
      {
        "astId": 22158,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "signers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22160,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "signerSize",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 22162,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "quorum",
        "offset": 8,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 20943,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "dstConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_struct(DstConfig)25199_storage)"
      },
      {
        "astId": 20947,
        "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
        "label": "usedHashes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7547_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7547_storage"
      },
      "t_mapping(t_uint32,t_array(t_uint8)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint8[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)dyn_storage"
      },
      "t_mapping(t_uint32,t_struct(DstConfig)25199_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IDVN.DstConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(DstConfig)25199_storage"
      },
      "t_struct(DstConfig)25199_storage": {
        "encoding": "inplace",
        "label": "struct IDVN.DstConfig",
        "members": [
          {
            "astId": 25194,
            "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
            "label": "gas",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 25196,
            "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
            "label": "multiplierBps",
            "offset": 8,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 25198,
            "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
            "label": "floorMarginUSD",
            "offset": 10,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)7547_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 7544,
            "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7546,
            "contract": "contracts/messagelib/contracts/uln/dvn/DVN.sol:DVN",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}