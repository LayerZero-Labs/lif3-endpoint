{
  "address": "0xA6735E1632371d7ecE3463C966E6b94B3AD338bD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stargateBridgeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PACKET_SIGNATURE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "sizeOfSrcAddress",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "ulnAddress",
          "type": "bytes32"
        }
      ],
      "name": "getPacket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "srcChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "dstAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "srcAddress",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "ulnAddress",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct LayerZeroPacket.Packet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProofType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUtilsVersion",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hashRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "receiptSlotIndex",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "logIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "proof",
          "type": "bytes[]"
        }
      ],
      "name": "getVerifyLog",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "contractAddress",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "topicZeroSig",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IValidationLibraryHelperV2.ULNLog",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "secureStgPayload",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "secureStgTokenPayload",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilsVersion",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_receiptsRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_remoteAddressSize",
          "type": "uint256"
        }
      ],
      "name": "validateProof",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "srcChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "dstAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "srcAddress",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "ulnAddress",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct LayerZeroPacket.Packet",
          "name": "packet",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4af4e792eb8cd19a1f13c3966b2cac6eee32cca1ed2e31b994574aeb4f1fd92a",
  "receipt": {
    "to": null,
    "from": "0x462c2AE39B6B0bdB950Deb2BC82082308cF8cB10",
    "contractAddress": "0xA6735E1632371d7ecE3463C966E6b94B3AD338bD",
    "transactionIndex": 0,
    "gasUsed": "1602700",
    "logsBloom": "0x
    "blockHash": "0xac31fced5487fd98647f11733848f216db1f6434e873c0e26698dafbb1925b03",
    "transactionHash": "0x4af4e792eb8cd19a1f13c3966b2cac6eee32cca1ed2e31b994574aeb4f1fd92a",
    "logs": [],
    "blockNumber": 35651890,
    "cumulativeGasUsed": "1602700",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "66a864f53fcbcd62b4ecebba23860347",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PACKET_SIGNATURE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sizeOfSrcAddress\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ulnAddress\",\"type\":\"bytes32\"}],\"name\":\"getPacket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"ulnAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct LayerZeroPacket.Packet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProofType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUtilsVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"receiptSlotIndex\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"proof\",\"type\":\"bytes[]\"}],\"name\":\"getVerifyLog\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"contractAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"topicZeroSig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IValidationLibraryHelperV2.ULNLog\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"secureStgPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"secureStgTokenPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilsVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_receiptsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_remoteAddressSize\",\"type\":\"uint256\"}],\"name\":\"validateProof\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"ulnAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct LayerZeroPacket.Packet\",\"name\":\"packet\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/V1Contracts/contracts/proof/MPTValidator01.sol\":\"MPTValidator01\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"contracts/V1Contracts/contracts/interfaces/ILayerZeroValidationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../proof/utility/LayerZeroPacket.sol\\\";\\n\\ninterface ILayerZeroValidationLibrary {\\n    function validateProof(\\n        bytes32 blockData,\\n        bytes calldata _data,\\n        uint _remoteAddressSize\\n    ) external returns (LayerZeroPacket.Packet memory packet);\\n}\\n\",\"keccak256\":\"0x0621a318689774296b47c95d8738d0c4e1bc63efe62e524cb3ea36ef1a9da487\",\"license\":\"BUSL-1.1\"},\"contracts/V1Contracts/contracts/interfaces/IValidationLibraryHelperV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../proof/utility/LayerZeroPacket.sol\\\";\\n\\ninterface IValidationLibraryHelperV2 {\\n    struct ULNLog {\\n        bytes32 contractAddress;\\n        bytes32 topicZeroSig;\\n        bytes data;\\n    }\\n\\n    function getVerifyLog(\\n        bytes32 hashRoot,\\n        uint[] calldata receiptSlotIndex,\\n        uint logIndex,\\n        bytes[] calldata proof\\n    ) external pure returns (ULNLog memory);\\n\\n    function getPacket(\\n        bytes calldata data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) external pure returns (LayerZeroPacket.Packet memory);\\n\\n    function getUtilsVersion() external view returns (uint8);\\n\\n    function getProofType() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa65bfd98c01ae8eb3df2edc925720a85b8dd8f223ab8f8b641176a1c4c3cd41f\",\"license\":\"BUSL-1.1\"},\"contracts/V1Contracts/contracts/proof/MPTValidator01.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./utility/LayerZeroPacket.sol\\\";\\nimport \\\"./utility/UltraLightNodeEVMDecoder.sol\\\";\\nimport \\\"../interfaces/IValidationLibraryHelperV2.sol\\\";\\nimport \\\"../interfaces/ILayerZeroValidationLibrary.sol\\\";\\n\\ninterface IStargate {\\n    // Stargate objects for abi encoding / decoding\\n    struct SwapObj {\\n        uint amount;\\n        uint eqFee;\\n        uint eqReward;\\n        uint lpFee;\\n        uint protocolFee;\\n        uint lkbRemove;\\n    }\\n\\n    struct CreditObj {\\n        uint credits;\\n        uint idealBalance;\\n    }\\n}\\n\\ncontract MPTValidator01 is ILayerZeroValidationLibrary, IValidationLibraryHelperV2 {\\n    using RLPDecode for RLPDecode.RLPItem;\\n    using RLPDecode for RLPDecode.Iterator;\\n\\n    uint8 public proofType = 1;\\n    uint8 public utilsVersion = 4;\\n    bytes32 public constant PACKET_SIGNATURE = 0xe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82;\\n\\n    address public immutable stargateBridgeAddress;\\n    address public immutable stargateTokenAddress;\\n\\n    constructor(address _stargateBridgeAddress, address _stargateTokenAddress) {\\n        stargateBridgeAddress = _stargateBridgeAddress;\\n        stargateTokenAddress = _stargateTokenAddress;\\n    }\\n\\n    function validateProof(\\n        bytes32 _receiptsRoot,\\n        bytes calldata _transactionProof,\\n        uint _remoteAddressSize\\n    ) external view override returns (LayerZeroPacket.Packet memory packet) {\\n        require(_remoteAddressSize > 0, \\\"ProofLib: invalid address size\\\");\\n        (bytes[] memory proof, uint[] memory receiptSlotIndex, uint logIndex) = abi.decode(\\n            _transactionProof,\\n            (bytes[], uint[], uint)\\n        );\\n\\n        ULNLog memory log = _getVerifiedLog(_receiptsRoot, receiptSlotIndex, logIndex, proof);\\n        require(log.topicZeroSig == PACKET_SIGNATURE, \\\"ProofLib: packet not recognized\\\"); //data\\n\\n        packet = LayerZeroPacket.getPacketV2(log.data, _remoteAddressSize, log.contractAddress);\\n\\n        if (packet.dstAddress == stargateBridgeAddress) packet.payload = _secureStgPayload(packet.payload);\\n\\n        if (packet.dstAddress == stargateTokenAddress) packet.payload = _secureStgTokenPayload(packet.payload);\\n\\n        return packet;\\n    }\\n\\n    function _secureStgTokenPayload(bytes memory _payload) internal pure returns (bytes memory) {\\n        (bytes memory toAddressBytes, uint qty) = abi.decode(_payload, (bytes, uint));\\n\\n        address toAddress = address(0);\\n        if (toAddressBytes.length > 0) {\\n            assembly {\\n                toAddress := mload(add(toAddressBytes, 20))\\n            }\\n        }\\n\\n        if (toAddress == address(0)) {\\n            address deadAddress = address(0x000000000000000000000000000000000000dEaD);\\n            bytes memory newToAddressBytes = abi.encodePacked(deadAddress);\\n            return abi.encode(newToAddressBytes, qty);\\n        }\\n\\n        // default to return the original payload\\n        return _payload;\\n    }\\n\\n    function _secureStgPayload(bytes memory _payload) internal view returns (bytes memory) {\\n        // functionType is uint8 even though the encoding will take up the side of uint256\\n        uint8 functionType;\\n        assembly {\\n            functionType := mload(add(_payload, 32))\\n        }\\n\\n        // TYPE_SWAP_REMOTE == 1 && only if the payload has a payload\\n        // only swapRemote inside of stargate can call sgReceive on an user supplied to address\\n        // thus we do not care about the other type functions even if the toAddress is overly long.\\n        if (functionType == 1) {\\n            // decode the _payload with its types\\n            (\\n                ,\\n                uint srcPoolId,\\n                uint dstPoolId,\\n                uint dstGasForCall,\\n                IStargate.CreditObj memory c,\\n                IStargate.SwapObj memory s,\\n                bytes memory toAddressBytes,\\n                bytes memory contractCallPayload\\n            ) = abi.decode(_payload, (uint8, uint, uint, uint, IStargate.CreditObj, IStargate.SwapObj, bytes, bytes));\\n\\n            // if contractCallPayload.length > 0 need to check if the to address is a contract or not\\n            if (contractCallPayload.length > 0) {\\n                // otherwise, need to check if the payload can be delivered to the toAddress\\n                address toAddress = address(0);\\n                if (toAddressBytes.length > 0) {\\n                    assembly {\\n                        toAddress := mload(add(toAddressBytes, 20))\\n                    }\\n                }\\n\\n                // check if the toAddress is a contract. We are not concerned about addresses that pretend to be wallets. because worst case we just delete their payload if being malicious\\n                // we can guarantee that if a size > 0, then the contract is definitely a contract address in this context\\n                uint size;\\n                assembly {\\n                    size := extcodesize(toAddress)\\n                }\\n\\n                if (size == 0) {\\n                    // size == 0 indicates its not a contract, payload wont be delivered\\n                    // secure the _payload to make sure funds can be delivered to the toAddress\\n                    bytes memory newToAddressBytes = abi.encodePacked(toAddress);\\n                    bytes memory securePayload = abi.encode(\\n                        functionType,\\n                        srcPoolId,\\n                        dstPoolId,\\n                        dstGasForCall,\\n                        c,\\n                        s,\\n                        newToAddressBytes,\\n                        bytes(\\\"\\\")\\n                    );\\n                    return securePayload;\\n                }\\n            }\\n        }\\n\\n        // default to return the original payload\\n        return _payload;\\n    }\\n\\n    function secureStgTokenPayload(bytes memory _payload) external pure returns (bytes memory) {\\n        return _secureStgTokenPayload(_payload);\\n    }\\n\\n    function secureStgPayload(bytes memory _payload) external view returns (bytes memory) {\\n        return _secureStgPayload(_payload);\\n    }\\n\\n    function _getVerifiedLog(\\n        bytes32 hashRoot,\\n        uint[] memory paths,\\n        uint logIndex,\\n        bytes[] memory proof\\n    ) internal pure returns (ULNLog memory) {\\n        require(paths.length == proof.length, \\\"ProofLib: invalid proof size\\\");\\n        require(proof.length > 0, \\\"ProofLib: proof size must > 0\\\");\\n        RLPDecode.RLPItem memory item;\\n        bytes memory proofBytes;\\n\\n        for (uint i = 0; i < proof.length; i++) {\\n            proofBytes = proof[i];\\n            require(hashRoot == keccak256(proofBytes), \\\"ProofLib: invalid hashlink\\\");\\n            item = RLPDecode.toRlpItem(proofBytes).safeGetItemByIndex(paths[i]);\\n            if (i < proof.length - 1) hashRoot = bytes32(item.toUint());\\n        }\\n\\n        // burning status + gasUsed + logBloom\\n        RLPDecode.RLPItem memory logItem = item.typeOffset().safeGetItemByIndex(3);\\n        RLPDecode.Iterator memory it = logItem.safeGetItemByIndex(logIndex).iterator();\\n        ULNLog memory log;\\n        log.contractAddress = bytes32(it.next().toUint());\\n        log.topicZeroSig = bytes32(it.next().safeGetItemByIndex(0).toUint());\\n        log.data = it.next().toBytes();\\n\\n        return log;\\n    }\\n\\n    function getUtilsVersion() external view override returns (uint8) {\\n        return utilsVersion;\\n    }\\n\\n    function getProofType() external view override returns (uint8) {\\n        return proofType;\\n    }\\n\\n    function getVerifyLog(\\n        bytes32 hashRoot,\\n        uint[] memory receiptSlotIndex,\\n        uint logIndex,\\n        bytes[] memory proof\\n    ) external pure override returns (ULNLog memory) {\\n        return _getVerifiedLog(hashRoot, receiptSlotIndex, logIndex, proof);\\n    }\\n\\n    function getPacket(\\n        bytes memory data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) external pure override returns (LayerZeroPacket.Packet memory) {\\n        return LayerZeroPacket.getPacketV2(data, sizeOfSrcAddress, ulnAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xd8c78b4a9a9373cd1c8b647b52c7984367ef007c5fd3049b4cb1cd2abca8d8f1\",\"license\":\"BUSL-1.1\"},\"contracts/V1Contracts/contracts/proof/utility/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// https://github.com/ensdomains/buffer\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.a co\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param rawData The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeRawBytes(\\n        buffer memory buf,\\n        uint off,\\n        bytes memory rawData,\\n        uint offData,\\n        uint len\\n    ) internal pure returns (buffer memory) {\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(rawData, offData)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n\\n        return buf;\\n    }\\n\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint a, uint b) private pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb6ba1e85708e05e0f2181136650463faca122318dd16aa6cbaa4f88e48d908\",\"license\":\"BUSL-1.1\"},\"contracts/V1Contracts/contracts/proof/utility/LayerZeroPacket.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nlibrary LayerZeroPacket {\\n    using Buffer for Buffer.buffer;\\n    using SafeMath for uint;\\n\\n    struct Packet {\\n        uint16 srcChainId;\\n        uint16 dstChainId;\\n        uint64 nonce;\\n        address dstAddress;\\n        bytes srcAddress;\\n        bytes32 ulnAddress;\\n        bytes payload;\\n    }\\n\\n    function getPacket(\\n        bytes memory data,\\n        uint16 srcChain,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        uint16 dstChainId;\\n        address dstAddress;\\n        uint size;\\n        uint64 nonce;\\n\\n        // The log consists of the destination chain id and then a bytes payload\\n        //      0--------------------------------------------31\\n        // 0   |  total bytes size\\n        // 32  |  destination chain id\\n        // 64  |  bytes offset\\n        // 96  |  bytes array size\\n        // 128 |  payload\\n        assembly {\\n            dstChainId := mload(add(data, 32))\\n            size := mload(add(data, 96)) /// size of the byte array\\n            nonce := mload(add(data, 104)) // offset to convert to uint64  128  is index -24\\n            dstAddress := mload(add(data, sub(add(128, sizeOfSrcAddress), 4))) // offset to convert to address 12 -8\\n        }\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 136, sizeOfSrcAddress); // 128 + 8\\n\\n        uint payloadSize = size.sub(28).sub(sizeOfSrcAddress);\\n        Buffer.buffer memory payloadBuffer;\\n        payloadBuffer.init(payloadSize);\\n        payloadBuffer.writeRawBytes(0, data, sizeOfSrcAddress.add(156), payloadSize); // 148 + 8\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChainId,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n\\n    function getPacketV2(\\n        bytes memory data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        // packet def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\\n        // data def: abi.encode(packet) = offset(32) + length(32) + packet\\n        //              if from EVM\\n        // 0 - 31       0 - 31          |  total bytes size\\n        // 32 - 63      32 - 63         |  location\\n        // 64 - 95      64 - 95         |  size of the packet\\n        // 96 - 103     96 - 103        |  nonce\\n        // 104 - 105    104 - 105       |  srcChainId\\n        // 106 - P      106 - 125       |  srcAddress, where P = 106 + sizeOfSrcAddress - 1,\\n        // P+1 - P+2    126 - 127       |  dstChainId\\n        // P+3 - P+22   128 - 147       |  dstAddress\\n        // P+23 - END   148 - END       |  payload\\n\\n        // decode the packet\\n        uint256 realSize;\\n        uint64 nonce;\\n        uint16 srcChain;\\n        uint16 dstChain;\\n        address dstAddress;\\n        assembly {\\n            realSize := mload(add(data, 64))\\n            nonce := mload(add(data, 72)) // 104 - 32\\n            srcChain := mload(add(data, 74)) // 106 - 32\\n            dstChain := mload(add(data, add(76, sizeOfSrcAddress))) // P + 3 - 32 = 105 + size + 3 - 32 = 76 + size\\n            dstAddress := mload(add(data, add(96, sizeOfSrcAddress))) // P + 23 - 32 = 105 + size + 23 - 32 = 96 + size\\n        }\\n\\n        require(srcChain != 0, \\\"LayerZeroPacket: invalid packet\\\");\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 106, sizeOfSrcAddress);\\n\\n        uint nonPayloadSize = sizeOfSrcAddress.add(32); // 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\\n        uint payloadSize = realSize.sub(nonPayloadSize);\\n        Buffer.buffer memory payloadBuffer;\\n        payloadBuffer.init(payloadSize);\\n        payloadBuffer.writeRawBytes(0, data, nonPayloadSize.add(96), payloadSize);\\n\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChain,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n\\n    function getPacketV3(\\n        bytes memory data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        // data def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\\n        //              if from EVM\\n        // 0 - 31       0 - 31          |  total bytes size\\n        // 32 - 39      32 - 39         |  nonce\\n        // 40 - 41      40 - 41         |  srcChainId\\n        // 42 - P       42 - 61         |  srcAddress, where P = 41 + sizeOfSrcAddress,\\n        // P+1 - P+2    62 - 63         |  dstChainId\\n        // P+3 - P+22   64 - 83         |  dstAddress\\n        // P+23 - END   84 - END        |  payload\\n\\n        // decode the packet\\n        uint256 realSize = data.length;\\n        uint nonPayloadSize = sizeOfSrcAddress.add(32); // 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\\n        require(realSize >= nonPayloadSize, \\\"LayerZeroPacket: invalid packet\\\");\\n        uint payloadSize = realSize - nonPayloadSize;\\n\\n        uint64 nonce;\\n        uint16 srcChain;\\n        uint16 dstChain;\\n        address dstAddress;\\n        assembly {\\n            nonce := mload(add(data, 8)) // 40 - 32\\n            srcChain := mload(add(data, 10)) // 42 - 32\\n            dstChain := mload(add(data, add(12, sizeOfSrcAddress))) // P + 3 - 32 = 41 + size + 3 - 32 = 12 + size\\n            dstAddress := mload(add(data, add(32, sizeOfSrcAddress))) // P + 23 - 32 = 41 + size + 23 - 32 = 32 + size\\n        }\\n\\n        require(srcChain != 0, \\\"LayerZeroPacket: invalid packet\\\");\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 42, sizeOfSrcAddress);\\n\\n        Buffer.buffer memory payloadBuffer;\\n        if (payloadSize > 0) {\\n            payloadBuffer.init(payloadSize);\\n            payloadBuffer.writeRawBytes(0, data, nonPayloadSize.add(32), payloadSize);\\n        }\\n\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChain,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd389b7095521342a6d7afc994bbf3da80e7c006f4f74f49e100f729c7247c9e0\",\"license\":\"BUSL-1.1\"},\"contracts/V1Contracts/contracts/proof/utility/RLPDecode.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// https://github.com/hamdiallam/solidity-rlp\\n\\npragma solidity ^0.7.0;\\n\\nlibrary RLPDecode {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self), \\\"RLPDecoder iterator has no next\\\");\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n        // offset the pointer if the first byte\\n\\n        uint8 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n        uint len = item.length;\\n        if (len > 0 && byte0 < LIST_SHORT_START) {\\n            assembly {\\n                memPtr := add(memPtr, 0x01)\\n            }\\n            len -= 1;\\n        }\\n        return RLPItem(len, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self), \\\"RLPDecoder iterator is not list\\\");\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        require(item.len >= offset, \\\"RLPDecoder: invalid uint RLP item offset size\\\");\\n        return item.len - offset;\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item), \\\"RLPDecoder iterator is not a list\\\");\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    /*\\n     * @param get the RLP item by index. save gas.\\n     */\\n    function getItemByIndex(RLPItem memory item, uint idx) internal pure returns (RLPItem memory) {\\n        require(isList(item), \\\"RLPDecoder iterator is not a list\\\");\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < idx; i++) {\\n            dataLen = _itemLength(memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n        dataLen = _itemLength(memPtr);\\n        return RLPItem(dataLen, memPtr);\\n    }\\n\\n    /*\\n     * @param get the RLP item by index. save gas.\\n     */\\n    function safeGetItemByIndex(RLPItem memory item, uint idx) internal pure returns (RLPItem memory) {\\n        require(isList(item), \\\"RLPDecoder iterator is not a list\\\");\\n        require(idx < numItems(item), \\\"RLP item out of bounds\\\");\\n        uint endPtr = item.memPtr + item.len;\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < idx; i++) {\\n            dataLen = _itemLength(memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n        dataLen = _itemLength(memPtr);\\n\\n        require(memPtr + dataLen <= endPtr, \\\"RLP item overflow\\\");\\n        return RLPItem(dataLen, memPtr);\\n    }\\n\\n    /*\\n     * @param offset the receipt bytes item\\n     */\\n    function typeOffset(RLPItem memory item) internal pure returns (RLPItem memory) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        uint len = item.len;\\n        assembly {\\n            memPtr := add(memPtr, offset)\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n        if (len > 0 && byte0 < LIST_SHORT_START) {\\n            assembly {\\n                memPtr := add(memPtr, 0x01)\\n            }\\n            len -= 1;\\n        }\\n        return RLPItem(len, memPtr);\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1, \\\"RLPDecoder toBoolean invalid length\\\");\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21, \\\"RLPDecoder toAddress invalid length\\\");\\n\\n        return address(toUint(item));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33, \\\"RLPDecoder toUint invalid length\\\");\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        require(item.len >= offset, \\\"RLPDecoder: invalid RLP item offset size\\\");\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if necessary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33, \\\"RLPDecoder toUintStrict invalid length\\\");\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0, \\\"RLPDecoder toBytes invalid length\\\");\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        require(item.len >= offset, \\\"RLPDecoder: invalid RLP item offset size\\\");\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) internal pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf75683c1b2c5029a6cf47eab2dcc23d9fe70a08f3b76c9eb9e7efbfe660958c6\",\"license\":\"BUSL-1.1\"},\"contracts/V1Contracts/contracts/proof/utility/UltraLightNodeEVMDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./RLPDecode.sol\\\";\\n\\nlibrary UltraLightNodeEVMDecoder {\\n    using RLPDecode for RLPDecode.RLPItem;\\n    using RLPDecode for RLPDecode.Iterator;\\n\\n    struct Log {\\n        address contractAddress;\\n        bytes32 topicZero;\\n        bytes data;\\n    }\\n\\n    function getReceiptLog(bytes memory data, uint logIndex) internal pure returns (Log memory) {\\n        RLPDecode.Iterator memory it = RLPDecode.toRlpItem(data).iterator();\\n        uint idx;\\n        while (it.hasNext()) {\\n            if (idx == 3) {\\n                return toReceiptLog(it.next().getItemByIndex(logIndex).toRlpBytes());\\n            } else it.next();\\n            idx++;\\n        }\\n        revert(\\\"no log index in receipt\\\");\\n    }\\n\\n    function toReceiptLog(bytes memory data) internal pure returns (Log memory) {\\n        RLPDecode.Iterator memory it = RLPDecode.toRlpItem(data).iterator();\\n        Log memory log;\\n\\n        uint idx;\\n        while (it.hasNext()) {\\n            if (idx == 0) {\\n                log.contractAddress = it.next().toAddress();\\n            } else if (idx == 1) {\\n                RLPDecode.RLPItem memory item = it.next().getItemByIndex(0);\\n                log.topicZero = bytes32(item.toUint());\\n            } else if (idx == 2) log.data = it.next().toBytes();\\n            else it.next();\\n            idx++;\\n        }\\n        return log;\\n    }\\n}\\n\",\"keccak256\":\"0xa5a921e346276438893241fb9719b074bed6e215d37e372f91b2712cb9f46567\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c060405260008054600160ff199091161761ff0019166104001790553480156200002957600080fd5b5060405162001c8738038062001c878339810160408190526200004c9162000088565b6001600160601b0319606092831b8116608052911b1660a052620000bf565b80516001600160a01b03811681146200008357600080fd5b919050565b600080604083850312156200009b578182fd5b620000a6836200006b565b9150620000b6602084016200006b565b90509250929050565b60805160601c60a05160601c611b94620000f36000398061033952806103c852508061020b52806102e85250611b946000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639bcd850f116100715780639bcd850f14610154578063b71e0f711461015c578063be9d395e1461016f578063d633ad6114610184578063e965c1921461018c578063ea455df914610194576100b4565b806305af5d35146100b95780630f222e65146100d75780632ff20449146100f757806347713b39146101175780635711c2a81461011f5780636348d2691461013f575b600080fd5b6100c16101a7565b6040516100ce91906119b7565b60405180910390f35b6100ea6100e53660046114db565b6101b0565b6040516100ce9190611988565b61010a610105366004611640565b6101cd565b6040516100ce9190611902565b6100c16101e8565b61013261012d3660046115ca565b6101f6565b6040516100ce91906117ba565b610147610209565b6040516100ce919061179d565b6100c161022d565b61010a61016a36600461154e565b610236565b610177610394565b6040516100ce91906117b1565b6100c16103b8565b6101476103c6565b6101326101a23660046115ca565b6103ea565b60005460ff1681565b6101b86111b8565b6101c4858585856103f5565b95945050505050565b6101d56111d7565b6101e0848484610556565b949350505050565b600054610100900460ff1681565b60606102018261069d565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005460ff1690565b61023e6111d7565b600082116102675760405162461bcd60e51b815260040161025e906118cb565b60405180910390fd5b6000808061027786880188611472565b925092509250600061028b898484876103f5565b60208101519091507fe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82146102d15760405162461bcd60e51b815260040161025e9061185d565b6102e48160400151878360000151610556565b94507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685606001516001600160a01b03161415610337576103318560c0015161069d565b60c08601525b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685606001516001600160a01b03161415610388576103828560c00151610782565b60c08601525b50505050949350505050565b7fe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea8281565b600054610100900460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061020182610782565b6103fd6111b8565b815184511461041e5760405162461bcd60e51b815260040161025e906117ef565b600082511161043f5760405162461bcd60e51b815260040161025e90611894565b610447611215565b606060005b84518110156104d95784818151811061046157fe5b60200260200101519150818051906020012088146104915760405162461bcd60e51b815260040161025e90611826565b6104b78782815181106104a057fe5b60200260200101516104b18461081f565b90610875565b925060018551038110156104d1576104ce836109d0565b97505b60010161044c565b5060006104ea60036104b185610ab9565b905060006105006104fb8389610875565b610b27565b905061050a6111b8565b61051b61051683610bb9565b6109d0565b815261052e61051660006104b185610bb9565b602082015261054461053f83610bb9565b610c4f565b60408201529998505050505050505050565b61055e6111d7565b60408401516048850151604a860151858701604c81015160609091015161ffff83166105d1576040805162461bcd60e51b815260206004820152601f60248201527f4c617965725a65726f5061636b65743a20696e76616c6964207061636b657400604482015290519081900360640190fd5b6105d961122f565b6105e3818a610d47565b506105f38160008c606a8d610d81565b5060006106018a6020610e1f565b9050600061060f8883610e80565b905061061961122f565b6106238183610d47565b5061063f60008e610635866060610e1f565b8492919086610d81565b506040805160e08101825261ffff98891681529690971660208701526001600160401b0390971695850195909552506001600160a01b03909116606083015251608082015260a08101869052915160c0830152509150509392505050565b6020810151606090600160ff8216141561077b576000806000806000806000898060200190518101906106d0919061168b565b975097509750975097509750975050600081511115610773578151600090156106fa575060148201515b803b80610770576000826040516020016107149190611780565b60408051601f198184030181526020838101835260008085529251919450919261074c928f928f928f928f928f928f928b92016119c5565b60408051601f198184030181529190529c506102049b505050505050505050505050565b50505b505050505050505b5090919050565b60606000808380602001905181019061079b91906115fc565b91509150600080835111156107b1575060148201515b6001600160a01b0381166108165760405161dead906000906107d7908390602001611780565b604051602081830303815290604052905080846040516020016107fb9291906117cd565b60405160208183030381529060405295505050505050610204565b50929392505050565b610827611215565b602082018051835160009190911a908015801590610848575060c060ff8316105b156108595760019290920191600019015b6040805180820190915290815260208101929092525092915050565b61087d611215565b61088683610edd565b6108c15760405162461bcd60e51b8152600401808060200182810382526021815260200180611b1d6021913960400191505060405180910390fd5b6108ca83610f17565b8210610916576040805162461bcd60e51b8152602060048201526016602482015275524c50206974656d206f7574206f6620626f756e647360501b604482015290519081900360640190fd5b825160208401519081019060009061092d90610f6f565b60208601510190506000805b858110156109585761094a83610fd2565b928301929150600101610939565b5061096282610fd2565b90508281830111156109af576040805162461bcd60e51b8152602060048201526011602482015270524c50206974656d206f766572666c6f7760781b604482015290519081900360640190fd5b60405180604001604052808281526020018381525093505050505b92915050565b8051600090158015906109e557508151602110155b610a36576040805162461bcd60e51b815260206004820181905260248201527f524c504465636f64657220746f55696e7420696e76616c6964206c656e677468604482015290519081900360640190fd5b6000610a458360200151610f6f565b90508083600001511015610a8a5760405162461bcd60e51b8152600401808060200182810382526028815260200180611af56028913960400191505060405180910390fd5b825160208085015183018051928490039291831015610ab057826020036101000a820491505b50949350505050565b610ac1611215565b6000610ad08360200151610f6f565b60208401518451908201805192935060009290921a91908015801590610af9575060c060ff8416105b15610b0a5760019190910190600019015b604080518082019091529081526020810191909152949350505050565b610b2f611249565b610b3882610edd565b610b89576040805162461bcd60e51b815260206004820152601f60248201527f524c504465636f646572206974657261746f72206973206e6f74206c69737400604482015290519081900360640190fd5b6000610b988360200151610f6f565b60208085015160408051808201909152868152920190820152915050919050565b610bc1611215565b610bca8261106b565b610c1b576040805162461bcd60e51b815260206004820152601f60248201527f524c504465636f646572206974657261746f7220686173206e6f206e65787400604482015290519081900360640190fd5b60208201516000610c2b82610fd2565b80830160209586015260408051808201909152908152938401919091525090919050565b8051606090610c8f5760405162461bcd60e51b8152600401808060200182810382526021815260200180611b3e6021913960400191505060405180910390fd5b6000610c9e8360200151610f6f565b90508083600001511015610ce35760405162461bcd60e51b8152600401808060200182810382526028815260200180611af56028913960400191505060405180910390fd5b82518190036000816001600160401b0381118015610d0057600080fd5b506040519080825280601f01601f191660200182016040528015610d2b576020820181803683370190505b5090506000816020019050610ab0848760200151018285611080565b610d4f61122f565b6020820615610d645760208206602003820191505b506020828101829052604080518085526000815290920101905290565b610d8961122f565b85602001518286011115610db357610db386610dab88602001518886016110cb565b6002026110e2565b600080875180518860208301019350808987011115610dd25788860182525b5050508484015b60208410610df85780518252601f199093019260209182019101610dd9565b51815160001960208690036101000a01908116901991909116179052508495945050505050565b600082820183811015610e79576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115610ed7576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b8051600090610eee57506000610204565b6020820151805160001a9060c0821015610f0d57600092505050610204565b5060019392505050565b8051600090610f2857506000610204565b600080610f388460200151610f6f565b602085015185519181019250015b80821015610f6657610f5782610fd2565b60019093019290910190610f46565b50909392505050565b8051600090811a6080811015610f89576000915050610204565b60b8811080610fa4575060c08110801590610fa4575060f881105b15610fb3576001915050610204565b60c0811015610fc75760b519019050610204565b60f519019050610204565b80516000908190811a6080811015610fed5760019150611064565b60b881101561100257607e1981019150611064565b60c081101561102f5760b78103600185019450806020036101000a85510460018201810193505050611064565b60f88110156110445760be1981019150611064565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b80518051602091820151919092015191011190565b8061108a576110c6565b5b602081106110aa578251825260209283019290910190601f190161108b565b8251825160208390036101000a60001901801990921691161782525b505050565b6000818311156110dc5750816109ca565b50919050565b81516110ee8383610d47565b506110f983826110ff565b50505050565b61110761122f565b610e798384600001515184855161111c61122f565b825182111561112a57600080fd5b8460200151828501111561114c5761114c85610dab87602001518786016110cb565b60008086518051876020830101935080888701111561116b5787860182525b505050602084015b602084106111925780518252601f199093019260209182019101611173565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805160608082018352600080835260208301529181019190915290565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820181905260a082019290925260c081019190915290565b604051806040016040528060008152602001600081525090565b604051806040016040528060608152602001600081525090565b604051806040016040528061125c611215565b8152602001600081525090565b600082601f830112611279578081fd5b8135602061128e61128983611a8a565b611a67565b82815281810190858301855b858110156112c3576112b1898684358b010161132a565b8452928401929084019060010161129a565b5090979650505050505050565b600082601f8301126112e0578081fd5b813560206112f061128983611a8a565b828152818101908583018385028701840188101561130c578586fd5b855b858110156112c35781358452928401929084019060010161130e565b600082601f83011261133a578081fd5b813561134861128982611aa7565b81815284602083860101111561135c578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611386578081fd5b815161139461128982611aa7565b8181528460208386010111156113a8578283fd5b6101e0826020830160208701611ac8565b6000604082840312156113ca578081fd5b604051604081018181106001600160401b03821117156113e657fe5b604052825181526020928301519281019290925250919050565b600060c08284031215611411578081fd5b60405160c081018181106001600160401b038211171561142d57fe5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201525092915050565b600080600060608486031215611486578283fd5b83356001600160401b038082111561149c578485fd5b6114a887838801611269565b945060208601359150808211156114bd578384fd5b506114ca868287016112d0565b925050604084013590509250925092565b600080600080608085870312156114f0578081fd5b8435935060208501356001600160401b038082111561150d578283fd5b611519888389016112d0565b9450604087013593506060870135915080821115611535578283fd5b5061154287828801611269565b91505092959194509250565b60008060008060608587031215611563578384fd5b8435935060208501356001600160401b0380821115611580578485fd5b818701915087601f830112611593578485fd5b8135818111156115a1578586fd5b8860208285010111156115b2578586fd5b95986020929092019750949560400135945092505050565b6000602082840312156115db578081fd5b81356001600160401b038111156115f0578182fd5b6101e08482850161132a565b6000806040838503121561160e578182fd5b82516001600160401b03811115611623578283fd5b61162f85828601611376565b925050602083015190509250929050565b600080600060608486031215611654578283fd5b83356001600160401b03811115611669578384fd5b6116758682870161132a565b9660208601359650604090950135949350505050565b6000806000806000806000806101c0898b0312156116a7578586fd5b885160ff811681146116b7578687fd5b809850506020890151965060408901519550606089015194506116dd8a60808b016113b9565b93506116ec8a60c08b01611400565b92506101808901516001600160401b0380821115611708578384fd5b6117148c838d01611376565b93506101a08b015191508082111561172a578283fd5b506117378b828c01611376565b9150509295985092959890939650565b6001600160a01b03169052565b6000815180845261176c816020860160208601611ac8565b601f01601f19169290920160200192915050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b6001600160a01b0391909116815260200190565b90815260200190565b600060208252610e796020830184611754565b6000604082526117e06040830185611754565b90508260208301529392505050565b6020808252601c908201527f50726f6f664c69623a20696e76616c69642070726f6f662073697a6500000000604082015260600190565b6020808252601a908201527f50726f6f664c69623a20696e76616c696420686173686c696e6b000000000000604082015260600190565b6020808252601f908201527f50726f6f664c69623a207061636b6574206e6f74207265636f676e697a656400604082015260600190565b6020808252601d908201527f50726f6f664c69623a2070726f6f662073697a65206d757374203e2030000000604082015260600190565b6020808252601e908201527f50726f6f664c69623a20696e76616c696420616464726573732073697a650000604082015260600190565b60006020825261ffff808451166020840152806020850151166040840152506001600160401b03604084015116606083015260608301516119466080840182611747565b50608083015160e060a0840152611961610100840182611754565b905060a084015160c084015260c0840151601f198483030160e08501526101c48282611754565b600060208252825160208301526020830151604083015260408301516060808401526101e06080840182611754565b60ff91909116815260200190565b60006101c060ff8b16835289602084015288604084015287606084015286516080840152602087015160a0840152855160c0840152602086015160e084015260408601516101008401526060860151610120840152608086015161014084015260a086015161016084015280610180840152611a4381840186611754565b90508281036101a0840152611a588185611754565b9b9a5050505050505050505050565b6040518181016001600160401b0381118282101715611a8257fe5b604052919050565b60006001600160401b03821115611a9d57fe5b5060209081020190565b60006001600160401b03821115611aba57fe5b50601f01601f191660200190565b60005b83811015611ae3578181015183820152602001611acb565b838111156110f9575050600091015256fe524c504465636f6465723a20696e76616c696420524c50206974656d206f66667365742073697a65524c504465636f646572206974657261746f72206973206e6f742061206c697374524c504465636f64657220746f427974657320696e76616c6964206c656e677468a2646970667358221220b380c455a4f5b780299a4f5d55877dd9ccd9c5da659f8fb259dd5c6f4acf5dc264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639bcd850f116100715780639bcd850f14610154578063b71e0f711461015c578063be9d395e1461016f578063d633ad6114610184578063e965c1921461018c578063ea455df914610194576100b4565b806305af5d35146100b95780630f222e65146100d75780632ff20449146100f757806347713b39146101175780635711c2a81461011f5780636348d2691461013f575b600080fd5b6100c16101a7565b6040516100ce91906119b7565b60405180910390f35b6100ea6100e53660046114db565b6101b0565b6040516100ce9190611988565b61010a610105366004611640565b6101cd565b6040516100ce9190611902565b6100c16101e8565b61013261012d3660046115ca565b6101f6565b6040516100ce91906117ba565b610147610209565b6040516100ce919061179d565b6100c161022d565b61010a61016a36600461154e565b610236565b610177610394565b6040516100ce91906117b1565b6100c16103b8565b6101476103c6565b6101326101a23660046115ca565b6103ea565b60005460ff1681565b6101b86111b8565b6101c4858585856103f5565b95945050505050565b6101d56111d7565b6101e0848484610556565b949350505050565b600054610100900460ff1681565b60606102018261069d565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005460ff1690565b61023e6111d7565b600082116102675760405162461bcd60e51b815260040161025e906118cb565b60405180910390fd5b6000808061027786880188611472565b925092509250600061028b898484876103f5565b60208101519091507fe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82146102d15760405162461bcd60e51b815260040161025e9061185d565b6102e48160400151878360000151610556565b94507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685606001516001600160a01b03161415610337576103318560c0015161069d565b60c08601525b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685606001516001600160a01b03161415610388576103828560c00151610782565b60c08601525b50505050949350505050565b7fe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea8281565b600054610100900460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061020182610782565b6103fd6111b8565b815184511461041e5760405162461bcd60e51b815260040161025e906117ef565b600082511161043f5760405162461bcd60e51b815260040161025e90611894565b610447611215565b606060005b84518110156104d95784818151811061046157fe5b60200260200101519150818051906020012088146104915760405162461bcd60e51b815260040161025e90611826565b6104b78782815181106104a057fe5b60200260200101516104b18461081f565b90610875565b925060018551038110156104d1576104ce836109d0565b97505b60010161044c565b5060006104ea60036104b185610ab9565b905060006105006104fb8389610875565b610b27565b905061050a6111b8565b61051b61051683610bb9565b6109d0565b815261052e61051660006104b185610bb9565b602082015261054461053f83610bb9565b610c4f565b60408201529998505050505050505050565b61055e6111d7565b60408401516048850151604a860151858701604c81015160609091015161ffff83166105d1576040805162461bcd60e51b815260206004820152601f60248201527f4c617965725a65726f5061636b65743a20696e76616c6964207061636b657400604482015290519081900360640190fd5b6105d961122f565b6105e3818a610d47565b506105f38160008c606a8d610d81565b5060006106018a6020610e1f565b9050600061060f8883610e80565b905061061961122f565b6106238183610d47565b5061063f60008e610635866060610e1f565b8492919086610d81565b506040805160e08101825261ffff98891681529690971660208701526001600160401b0390971695850195909552506001600160a01b03909116606083015251608082015260a08101869052915160c0830152509150509392505050565b6020810151606090600160ff8216141561077b576000806000806000806000898060200190518101906106d0919061168b565b975097509750975097509750975050600081511115610773578151600090156106fa575060148201515b803b80610770576000826040516020016107149190611780565b60408051601f198184030181526020838101835260008085529251919450919261074c928f928f928f928f928f928f928b92016119c5565b60408051601f198184030181529190529c506102049b505050505050505050505050565b50505b505050505050505b5090919050565b60606000808380602001905181019061079b91906115fc565b91509150600080835111156107b1575060148201515b6001600160a01b0381166108165760405161dead906000906107d7908390602001611780565b604051602081830303815290604052905080846040516020016107fb9291906117cd565b60405160208183030381529060405295505050505050610204565b50929392505050565b610827611215565b602082018051835160009190911a908015801590610848575060c060ff8316105b156108595760019290920191600019015b6040805180820190915290815260208101929092525092915050565b61087d611215565b61088683610edd565b6108c15760405162461bcd60e51b8152600401808060200182810382526021815260200180611b1d6021913960400191505060405180910390fd5b6108ca83610f17565b8210610916576040805162461bcd60e51b8152602060048201526016602482015275524c50206974656d206f7574206f6620626f756e647360501b604482015290519081900360640190fd5b825160208401519081019060009061092d90610f6f565b60208601510190506000805b858110156109585761094a83610fd2565b928301929150600101610939565b5061096282610fd2565b90508281830111156109af576040805162461bcd60e51b8152602060048201526011602482015270524c50206974656d206f766572666c6f7760781b604482015290519081900360640190fd5b60405180604001604052808281526020018381525093505050505b92915050565b8051600090158015906109e557508151602110155b610a36576040805162461bcd60e51b815260206004820181905260248201527f524c504465636f64657220746f55696e7420696e76616c6964206c656e677468604482015290519081900360640190fd5b6000610a458360200151610f6f565b90508083600001511015610a8a5760405162461bcd60e51b8152600401808060200182810382526028815260200180611af56028913960400191505060405180910390fd5b825160208085015183018051928490039291831015610ab057826020036101000a820491505b50949350505050565b610ac1611215565b6000610ad08360200151610f6f565b60208401518451908201805192935060009290921a91908015801590610af9575060c060ff8416105b15610b0a5760019190910190600019015b604080518082019091529081526020810191909152949350505050565b610b2f611249565b610b3882610edd565b610b89576040805162461bcd60e51b815260206004820152601f60248201527f524c504465636f646572206974657261746f72206973206e6f74206c69737400604482015290519081900360640190fd5b6000610b988360200151610f6f565b60208085015160408051808201909152868152920190820152915050919050565b610bc1611215565b610bca8261106b565b610c1b576040805162461bcd60e51b815260206004820152601f60248201527f524c504465636f646572206974657261746f7220686173206e6f206e65787400604482015290519081900360640190fd5b60208201516000610c2b82610fd2565b80830160209586015260408051808201909152908152938401919091525090919050565b8051606090610c8f5760405162461bcd60e51b8152600401808060200182810382526021815260200180611b3e6021913960400191505060405180910390fd5b6000610c9e8360200151610f6f565b90508083600001511015610ce35760405162461bcd60e51b8152600401808060200182810382526028815260200180611af56028913960400191505060405180910390fd5b82518190036000816001600160401b0381118015610d0057600080fd5b506040519080825280601f01601f191660200182016040528015610d2b576020820181803683370190505b5090506000816020019050610ab0848760200151018285611080565b610d4f61122f565b6020820615610d645760208206602003820191505b506020828101829052604080518085526000815290920101905290565b610d8961122f565b85602001518286011115610db357610db386610dab88602001518886016110cb565b6002026110e2565b600080875180518860208301019350808987011115610dd25788860182525b5050508484015b60208410610df85780518252601f199093019260209182019101610dd9565b51815160001960208690036101000a01908116901991909116179052508495945050505050565b600082820183811015610e79576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115610ed7576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b8051600090610eee57506000610204565b6020820151805160001a9060c0821015610f0d57600092505050610204565b5060019392505050565b8051600090610f2857506000610204565b600080610f388460200151610f6f565b602085015185519181019250015b80821015610f6657610f5782610fd2565b60019093019290910190610f46565b50909392505050565b8051600090811a6080811015610f89576000915050610204565b60b8811080610fa4575060c08110801590610fa4575060f881105b15610fb3576001915050610204565b60c0811015610fc75760b519019050610204565b60f519019050610204565b80516000908190811a6080811015610fed5760019150611064565b60b881101561100257607e1981019150611064565b60c081101561102f5760b78103600185019450806020036101000a85510460018201810193505050611064565b60f88110156110445760be1981019150611064565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b80518051602091820151919092015191011190565b8061108a576110c6565b5b602081106110aa578251825260209283019290910190601f190161108b565b8251825160208390036101000a60001901801990921691161782525b505050565b6000818311156110dc5750816109ca565b50919050565b81516110ee8383610d47565b506110f983826110ff565b50505050565b61110761122f565b610e798384600001515184855161111c61122f565b825182111561112a57600080fd5b8460200151828501111561114c5761114c85610dab87602001518786016110cb565b60008086518051876020830101935080888701111561116b5787860182525b505050602084015b602084106111925780518252601f199093019260209182019101611173565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805160608082018352600080835260208301529181019190915290565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820181905260a082019290925260c081019190915290565b604051806040016040528060008152602001600081525090565b604051806040016040528060608152602001600081525090565b604051806040016040528061125c611215565b8152602001600081525090565b600082601f830112611279578081fd5b8135602061128e61128983611a8a565b611a67565b82815281810190858301855b858110156112c3576112b1898684358b010161132a565b8452928401929084019060010161129a565b5090979650505050505050565b600082601f8301126112e0578081fd5b813560206112f061128983611a8a565b828152818101908583018385028701840188101561130c578586fd5b855b858110156112c35781358452928401929084019060010161130e565b600082601f83011261133a578081fd5b813561134861128982611aa7565b81815284602083860101111561135c578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611386578081fd5b815161139461128982611aa7565b8181528460208386010111156113a8578283fd5b6101e0826020830160208701611ac8565b6000604082840312156113ca578081fd5b604051604081018181106001600160401b03821117156113e657fe5b604052825181526020928301519281019290925250919050565b600060c08284031215611411578081fd5b60405160c081018181106001600160401b038211171561142d57fe5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201525092915050565b600080600060608486031215611486578283fd5b83356001600160401b038082111561149c578485fd5b6114a887838801611269565b945060208601359150808211156114bd578384fd5b506114ca868287016112d0565b925050604084013590509250925092565b600080600080608085870312156114f0578081fd5b8435935060208501356001600160401b038082111561150d578283fd5b611519888389016112d0565b9450604087013593506060870135915080821115611535578283fd5b5061154287828801611269565b91505092959194509250565b60008060008060608587031215611563578384fd5b8435935060208501356001600160401b0380821115611580578485fd5b818701915087601f830112611593578485fd5b8135818111156115a1578586fd5b8860208285010111156115b2578586fd5b95986020929092019750949560400135945092505050565b6000602082840312156115db578081fd5b81356001600160401b038111156115f0578182fd5b6101e08482850161132a565b6000806040838503121561160e578182fd5b82516001600160401b03811115611623578283fd5b61162f85828601611376565b925050602083015190509250929050565b600080600060608486031215611654578283fd5b83356001600160401b03811115611669578384fd5b6116758682870161132a565b9660208601359650604090950135949350505050565b6000806000806000806000806101c0898b0312156116a7578586fd5b885160ff811681146116b7578687fd5b809850506020890151965060408901519550606089015194506116dd8a60808b016113b9565b93506116ec8a60c08b01611400565b92506101808901516001600160401b0380821115611708578384fd5b6117148c838d01611376565b93506101a08b015191508082111561172a578283fd5b506117378b828c01611376565b9150509295985092959890939650565b6001600160a01b03169052565b6000815180845261176c816020860160208601611ac8565b601f01601f19169290920160200192915050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b6001600160a01b0391909116815260200190565b90815260200190565b600060208252610e796020830184611754565b6000604082526117e06040830185611754565b90508260208301529392505050565b6020808252601c908201527f50726f6f664c69623a20696e76616c69642070726f6f662073697a6500000000604082015260600190565b6020808252601a908201527f50726f6f664c69623a20696e76616c696420686173686c696e6b000000000000604082015260600190565b6020808252601f908201527f50726f6f664c69623a207061636b6574206e6f74207265636f676e697a656400604082015260600190565b6020808252601d908201527f50726f6f664c69623a2070726f6f662073697a65206d757374203e2030000000604082015260600190565b6020808252601e908201527f50726f6f664c69623a20696e76616c696420616464726573732073697a650000604082015260600190565b60006020825261ffff808451166020840152806020850151166040840152506001600160401b03604084015116606083015260608301516119466080840182611747565b50608083015160e060a0840152611961610100840182611754565b905060a084015160c084015260c0840151601f198483030160e08501526101c48282611754565b600060208252825160208301526020830151604083015260408301516060808401526101e06080840182611754565b60ff91909116815260200190565b60006101c060ff8b16835289602084015288604084015287606084015286516080840152602087015160a0840152855160c0840152602086015160e084015260408601516101008401526060860151610120840152608086015161014084015260a086015161016084015280610180840152611a4381840186611754565b90508281036101a0840152611a588185611754565b9b9a5050505050505050505050565b6040518181016001600160401b0381118282101715611a8257fe5b604052919050565b60006001600160401b03821115611a9d57fe5b5060209081020190565b60006001600160401b03821115611aba57fe5b50601f01601f191660200190565b60005b83811015611ae3578181015183820152602001611acb565b838111156110f9575050600091015256fe524c504465636f6465723a20696e76616c696420524c50206974656d206f66667365742073697a65524c504465636f646572206974657261746f72206973206e6f742061206c697374524c504465636f64657220746f427974657320696e76616c6964206c656e677468a2646970667358221220b380c455a4f5b780299a4f5d55877dd9ccd9c5da659f8fb259dd5c6f4acf5dc264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21876,
        "contract": "contracts/V1Contracts/contracts/proof/MPTValidator01.sol:MPTValidator01",
        "label": "proofType",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 21879,
        "contract": "contracts/V1Contracts/contracts/proof/MPTValidator01.sol:MPTValidator01",
        "label": "utilsVersion",
        "offset": 1,
        "slot": "0",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}